// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: uri.proto

#include "uri.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace uprotocol {
namespace v1 {
PROTOBUF_CONSTEXPR UUri::UUri(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.authority_)*/nullptr
  , /*decltype(_impl_.entity_)*/nullptr
  , /*decltype(_impl_.resource_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UUriDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UUriDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UUriDefaultTypeInternal() {}
  union {
    UUri _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UUriDefaultTypeInternal _UUri_default_instance_;
PROTOBUF_CONSTEXPR UAuthority::UAuthority(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.remote_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct UAuthorityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UAuthorityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UAuthorityDefaultTypeInternal() {}
  union {
    UAuthority _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UAuthorityDefaultTypeInternal _UAuthority_default_instance_;
PROTOBUF_CONSTEXPR UEntity::UEntity(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.version_major_)*/0u
  , /*decltype(_impl_.version_minor_)*/0u} {}
struct UEntityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UEntityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UEntityDefaultTypeInternal() {}
  union {
    UEntity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UEntityDefaultTypeInternal _UEntity_default_instance_;
PROTOBUF_CONSTEXPR UResource::UResource(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instance_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0u} {}
struct UResourceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UResourceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UResourceDefaultTypeInternal() {}
  union {
    UResource _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UResourceDefaultTypeInternal _UResource_default_instance_;
PROTOBUF_CONSTEXPR UUriBatch::UUriBatch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uris_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UUriBatchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UUriBatchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UUriBatchDefaultTypeInternal() {}
  union {
    UUriBatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UUriBatchDefaultTypeInternal _UUriBatch_default_instance_;
}  // namespace v1
}  // namespace uprotocol
static ::_pb::Metadata file_level_metadata_uri_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_uri_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_uri_2eproto = nullptr;

const uint32_t TableStruct_uri_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uprotocol::v1::UUri, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::uprotocol::v1::UUri, _impl_.authority_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::v1::UUri, _impl_.entity_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::v1::UUri, _impl_.resource_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uprotocol::v1::UAuthority, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::uprotocol::v1::UAuthority, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::uprotocol::v1::UAuthority, _impl_.remote_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::v1::UEntity, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::v1::UEntity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::uprotocol::v1::UEntity, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::v1::UEntity, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::v1::UEntity, _impl_.version_major_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::v1::UEntity, _impl_.version_minor_),
  ~0u,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::uprotocol::v1::UResource, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::v1::UResource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::uprotocol::v1::UResource, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::v1::UResource, _impl_.instance_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::v1::UResource, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::v1::UResource, _impl_.id_),
  ~0u,
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uprotocol::v1::UUriBatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::uprotocol::v1::UUriBatch, _impl_.uris_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::uprotocol::v1::UUri)},
  { 9, -1, -1, sizeof(::uprotocol::v1::UAuthority)},
  { 19, 29, -1, sizeof(::uprotocol::v1::UEntity)},
  { 33, 43, -1, sizeof(::uprotocol::v1::UResource)},
  { 47, -1, -1, sizeof(::uprotocol::v1::UUriBatch)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::uprotocol::v1::_UUri_default_instance_._instance,
  &::uprotocol::v1::_UAuthority_default_instance_._instance,
  &::uprotocol::v1::_UEntity_default_instance_._instance,
  &::uprotocol::v1::_UResource_default_instance_._instance,
  &::uprotocol::v1::_UUriBatch_default_instance_._instance,
};

const char descriptor_table_protodef_uri_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\turi.proto\022\014uprotocol.v1\"\205\001\n\004UUri\022+\n\tau"
  "thority\030\001 \001(\0132\030.uprotocol.v1.UAuthority\022"
  "%\n\006entity\030\002 \001(\0132\025.uprotocol.v1.UEntity\022)"
  "\n\010resource\030\003 \001(\0132\027.uprotocol.v1.UResourc"
  "e\"B\n\nUAuthority\022\016\n\004name\030\001 \001(\tH\000\022\014\n\002ip\030\002 "
  "\001(\014H\000\022\014\n\002id\030\003 \001(\014H\000B\010\n\006remote\"\213\001\n\007UEntit"
  "y\022\014\n\004name\030\001 \001(\t\022\017\n\002id\030\002 \001(\rH\000\210\001\001\022\032\n\rvers"
  "ion_major\030\003 \001(\rH\001\210\001\001\022\032\n\rversion_minor\030\004 "
  "\001(\rH\002\210\001\001B\005\n\003_idB\020\n\016_version_majorB\020\n\016_ve"
  "rsion_minor\"w\n\tUResource\022\014\n\004name\030\001 \001(\t\022\025"
  "\n\010instance\030\002 \001(\tH\000\210\001\001\022\024\n\007message\030\003 \001(\tH\001"
  "\210\001\001\022\017\n\002id\030\004 \001(\rH\002\210\001\001B\013\n\t_instanceB\n\n\010_me"
  "ssageB\005\n\003_id\"-\n\tUUriBatch\022 \n\004uris\030\001 \003(\0132"
  "\022.uprotocol.v1.UUriB\'\n\030org.eclipse.uprot"
  "ocol.v1B\tUUriProtoP\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_uri_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_uri_2eproto = {
    false, false, 588, descriptor_table_protodef_uri_2eproto,
    "uri.proto",
    &descriptor_table_uri_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_uri_2eproto::offsets,
    file_level_metadata_uri_2eproto, file_level_enum_descriptors_uri_2eproto,
    file_level_service_descriptors_uri_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_uri_2eproto_getter() {
  return &descriptor_table_uri_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_uri_2eproto(&descriptor_table_uri_2eproto);
namespace uprotocol {
namespace v1 {

// ===================================================================

class UUri::_Internal {
 public:
  static const ::uprotocol::v1::UAuthority& authority(const UUri* msg);
  static const ::uprotocol::v1::UEntity& entity(const UUri* msg);
  static const ::uprotocol::v1::UResource& resource(const UUri* msg);
};

const ::uprotocol::v1::UAuthority&
UUri::_Internal::authority(const UUri* msg) {
  return *msg->_impl_.authority_;
}
const ::uprotocol::v1::UEntity&
UUri::_Internal::entity(const UUri* msg) {
  return *msg->_impl_.entity_;
}
const ::uprotocol::v1::UResource&
UUri::_Internal::resource(const UUri* msg) {
  return *msg->_impl_.resource_;
}
UUri::UUri(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:uprotocol.v1.UUri)
}
UUri::UUri(const UUri& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UUri* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.authority_){nullptr}
    , decltype(_impl_.entity_){nullptr}
    , decltype(_impl_.resource_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_authority()) {
    _this->_impl_.authority_ = new ::uprotocol::v1::UAuthority(*from._impl_.authority_);
  }
  if (from._internal_has_entity()) {
    _this->_impl_.entity_ = new ::uprotocol::v1::UEntity(*from._impl_.entity_);
  }
  if (from._internal_has_resource()) {
    _this->_impl_.resource_ = new ::uprotocol::v1::UResource(*from._impl_.resource_);
  }
  // @@protoc_insertion_point(copy_constructor:uprotocol.v1.UUri)
}

inline void UUri::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.authority_){nullptr}
    , decltype(_impl_.entity_){nullptr}
    , decltype(_impl_.resource_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UUri::~UUri() {
  // @@protoc_insertion_point(destructor:uprotocol.v1.UUri)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UUri::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.authority_;
  if (this != internal_default_instance()) delete _impl_.entity_;
  if (this != internal_default_instance()) delete _impl_.resource_;
}

void UUri::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UUri::Clear() {
// @@protoc_insertion_point(message_clear_start:uprotocol.v1.UUri)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.authority_ != nullptr) {
    delete _impl_.authority_;
  }
  _impl_.authority_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.entity_ != nullptr) {
    delete _impl_.entity_;
  }
  _impl_.entity_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.resource_ != nullptr) {
    delete _impl_.resource_;
  }
  _impl_.resource_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UUri::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .uprotocol.v1.UAuthority authority = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_authority(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .uprotocol.v1.UEntity entity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_entity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .uprotocol.v1.UResource resource = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UUri::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uprotocol.v1.UUri)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .uprotocol.v1.UAuthority authority = 1;
  if (this->_internal_has_authority()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::authority(this),
        _Internal::authority(this).GetCachedSize(), target, stream);
  }

  // .uprotocol.v1.UEntity entity = 2;
  if (this->_internal_has_entity()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::entity(this),
        _Internal::entity(this).GetCachedSize(), target, stream);
  }

  // .uprotocol.v1.UResource resource = 3;
  if (this->_internal_has_resource()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::resource(this),
        _Internal::resource(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uprotocol.v1.UUri)
  return target;
}

size_t UUri::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uprotocol.v1.UUri)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .uprotocol.v1.UAuthority authority = 1;
  if (this->_internal_has_authority()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.authority_);
  }

  // .uprotocol.v1.UEntity entity = 2;
  if (this->_internal_has_entity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.entity_);
  }

  // .uprotocol.v1.UResource resource = 3;
  if (this->_internal_has_resource()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.resource_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UUri::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UUri::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UUri::GetClassData() const { return &_class_data_; }


void UUri::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UUri*>(&to_msg);
  auto& from = static_cast<const UUri&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:uprotocol.v1.UUri)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_authority()) {
    _this->_internal_mutable_authority()->::uprotocol::v1::UAuthority::MergeFrom(
        from._internal_authority());
  }
  if (from._internal_has_entity()) {
    _this->_internal_mutable_entity()->::uprotocol::v1::UEntity::MergeFrom(
        from._internal_entity());
  }
  if (from._internal_has_resource()) {
    _this->_internal_mutable_resource()->::uprotocol::v1::UResource::MergeFrom(
        from._internal_resource());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UUri::CopyFrom(const UUri& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uprotocol.v1.UUri)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UUri::IsInitialized() const {
  return true;
}

void UUri::InternalSwap(UUri* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UUri, _impl_.resource_)
      + sizeof(UUri::_impl_.resource_)
      - PROTOBUF_FIELD_OFFSET(UUri, _impl_.authority_)>(
          reinterpret_cast<char*>(&_impl_.authority_),
          reinterpret_cast<char*>(&other->_impl_.authority_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UUri::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_uri_2eproto_getter, &descriptor_table_uri_2eproto_once,
      file_level_metadata_uri_2eproto[0]);
}

// ===================================================================

class UAuthority::_Internal {
 public:
};

UAuthority::UAuthority(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:uprotocol.v1.UAuthority)
}
UAuthority::UAuthority(const UAuthority& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UAuthority* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.remote_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_remote();
  switch (from.remote_case()) {
    case kName: {
      _this->_internal_set_name(from._internal_name());
      break;
    }
    case kIp: {
      _this->_internal_set_ip(from._internal_ip());
      break;
    }
    case kId: {
      _this->_internal_set_id(from._internal_id());
      break;
    }
    case REMOTE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:uprotocol.v1.UAuthority)
}

inline void UAuthority::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.remote_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_remote();
}

UAuthority::~UAuthority() {
  // @@protoc_insertion_point(destructor:uprotocol.v1.UAuthority)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UAuthority::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_remote()) {
    clear_remote();
  }
}

void UAuthority::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UAuthority::clear_remote() {
// @@protoc_insertion_point(one_of_clear_start:uprotocol.v1.UAuthority)
  switch (remote_case()) {
    case kName: {
      _impl_.remote_.name_.Destroy();
      break;
    }
    case kIp: {
      _impl_.remote_.ip_.Destroy();
      break;
    }
    case kId: {
      _impl_.remote_.id_.Destroy();
      break;
    }
    case REMOTE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = REMOTE_NOT_SET;
}


void UAuthority::Clear() {
// @@protoc_insertion_point(message_clear_start:uprotocol.v1.UAuthority)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_remote();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UAuthority::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "uprotocol.v1.UAuthority.name"));
        } else
          goto handle_unusual;
        continue;
      // bytes ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UAuthority::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uprotocol.v1.UAuthority)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (_internal_has_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "uprotocol.v1.UAuthority.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // bytes ip = 2;
  if (_internal_has_ip()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_ip(), target);
  }

  // bytes id = 3;
  if (_internal_has_id()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uprotocol.v1.UAuthority)
  return target;
}

size_t UAuthority::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uprotocol.v1.UAuthority)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (remote_case()) {
    // string name = 1;
    case kName: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
      break;
    }
    // bytes ip = 2;
    case kIp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_ip());
      break;
    }
    // bytes id = 3;
    case kId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_id());
      break;
    }
    case REMOTE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UAuthority::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UAuthority::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UAuthority::GetClassData() const { return &_class_data_; }


void UAuthority::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UAuthority*>(&to_msg);
  auto& from = static_cast<const UAuthority&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:uprotocol.v1.UAuthority)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.remote_case()) {
    case kName: {
      _this->_internal_set_name(from._internal_name());
      break;
    }
    case kIp: {
      _this->_internal_set_ip(from._internal_ip());
      break;
    }
    case kId: {
      _this->_internal_set_id(from._internal_id());
      break;
    }
    case REMOTE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UAuthority::CopyFrom(const UAuthority& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uprotocol.v1.UAuthority)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UAuthority::IsInitialized() const {
  return true;
}

void UAuthority::InternalSwap(UAuthority* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.remote_, other->_impl_.remote_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata UAuthority::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_uri_2eproto_getter, &descriptor_table_uri_2eproto_once,
      file_level_metadata_uri_2eproto[1]);
}

// ===================================================================

class UEntity::_Internal {
 public:
  using HasBits = decltype(std::declval<UEntity>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version_major(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_version_minor(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

UEntity::UEntity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:uprotocol.v1.UEntity)
}
UEntity::UEntity(const UEntity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UEntity* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.version_major_){}
    , decltype(_impl_.version_minor_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.version_minor_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.version_minor_));
  // @@protoc_insertion_point(copy_constructor:uprotocol.v1.UEntity)
}

inline void UEntity::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.version_major_){0u}
    , decltype(_impl_.version_minor_){0u}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UEntity::~UEntity() {
  // @@protoc_insertion_point(destructor:uprotocol.v1.UEntity)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UEntity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void UEntity::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UEntity::Clear() {
// @@protoc_insertion_point(message_clear_start:uprotocol.v1.UEntity)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.version_minor_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.version_minor_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UEntity::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "uprotocol.v1.UEntity.name"));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 version_major = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_version_major(&has_bits);
          _impl_.version_major_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 version_minor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_version_minor(&has_bits);
          _impl_.version_minor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UEntity::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uprotocol.v1.UEntity)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "uprotocol.v1.UEntity.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional uint32 id = 2;
  if (_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_id(), target);
  }

  // optional uint32 version_major = 3;
  if (_internal_has_version_major()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_version_major(), target);
  }

  // optional uint32 version_minor = 4;
  if (_internal_has_version_minor()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_version_minor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uprotocol.v1.UEntity)
  return target;
}

size_t UEntity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uprotocol.v1.UEntity)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
    }

    // optional uint32 version_major = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_version_major());
    }

    // optional uint32 version_minor = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_version_minor());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UEntity::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UEntity::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UEntity::GetClassData() const { return &_class_data_; }


void UEntity::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UEntity*>(&to_msg);
  auto& from = static_cast<const UEntity&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:uprotocol.v1.UEntity)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.version_major_ = from._impl_.version_major_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.version_minor_ = from._impl_.version_minor_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UEntity::CopyFrom(const UEntity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uprotocol.v1.UEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UEntity::IsInitialized() const {
  return true;
}

void UEntity::InternalSwap(UEntity* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UEntity, _impl_.version_minor_)
      + sizeof(UEntity::_impl_.version_minor_)
      - PROTOBUF_FIELD_OFFSET(UEntity, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UEntity::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_uri_2eproto_getter, &descriptor_table_uri_2eproto_once,
      file_level_metadata_uri_2eproto[2]);
}

// ===================================================================

class UResource::_Internal {
 public:
  using HasBits = decltype(std::declval<UResource>()._impl_._has_bits_);
  static void set_has_instance(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

UResource::UResource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:uprotocol.v1.UResource)
}
UResource::UResource(const UResource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UResource* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.instance_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.instance_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instance_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_instance()) {
    _this->_impl_.instance_.Set(from._internal_instance(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:uprotocol.v1.UResource)
}

inline void UResource::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.instance_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.id_){0u}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instance_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instance_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UResource::~UResource() {
  // @@protoc_insertion_point(destructor:uprotocol.v1.UResource)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UResource::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.instance_.Destroy();
  _impl_.message_.Destroy();
}

void UResource::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UResource::Clear() {
// @@protoc_insertion_point(message_clear_start:uprotocol.v1.UResource)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.instance_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.message_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UResource::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "uprotocol.v1.UResource.name"));
        } else
          goto handle_unusual;
        continue;
      // optional string instance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_instance();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "uprotocol.v1.UResource.instance"));
        } else
          goto handle_unusual;
        continue;
      // optional string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "uprotocol.v1.UResource.message"));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UResource::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uprotocol.v1.UResource)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "uprotocol.v1.UResource.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string instance = 2;
  if (_internal_has_instance()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instance().data(), static_cast<int>(this->_internal_instance().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "uprotocol.v1.UResource.instance");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_instance(), target);
  }

  // optional string message = 3;
  if (_internal_has_message()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "uprotocol.v1.UResource.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  // optional uint32 id = 4;
  if (_internal_has_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uprotocol.v1.UResource)
  return target;
}

size_t UResource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uprotocol.v1.UResource)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string instance = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_instance());
    }

    // optional string message = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional uint32 id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UResource::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UResource::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UResource::GetClassData() const { return &_class_data_; }


void UResource::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UResource*>(&to_msg);
  auto& from = static_cast<const UResource&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:uprotocol.v1.UResource)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_instance(from._internal_instance());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UResource::CopyFrom(const UResource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uprotocol.v1.UResource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UResource::IsInitialized() const {
  return true;
}

void UResource::InternalSwap(UResource* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instance_, lhs_arena,
      &other->_impl_.instance_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UResource::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_uri_2eproto_getter, &descriptor_table_uri_2eproto_once,
      file_level_metadata_uri_2eproto[3]);
}

// ===================================================================

class UUriBatch::_Internal {
 public:
};

UUriBatch::UUriBatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:uprotocol.v1.UUriBatch)
}
UUriBatch::UUriBatch(const UUriBatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UUriBatch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uris_){from._impl_.uris_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:uprotocol.v1.UUriBatch)
}

inline void UUriBatch::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uris_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UUriBatch::~UUriBatch() {
  // @@protoc_insertion_point(destructor:uprotocol.v1.UUriBatch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UUriBatch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uris_.~RepeatedPtrField();
}

void UUriBatch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UUriBatch::Clear() {
// @@protoc_insertion_point(message_clear_start:uprotocol.v1.UUriBatch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uris_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UUriBatch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .uprotocol.v1.UUri uris = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_uris(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UUriBatch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uprotocol.v1.UUriBatch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .uprotocol.v1.UUri uris = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_uris_size()); i < n; i++) {
    const auto& repfield = this->_internal_uris(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uprotocol.v1.UUriBatch)
  return target;
}

size_t UUriBatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uprotocol.v1.UUriBatch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .uprotocol.v1.UUri uris = 1;
  total_size += 1UL * this->_internal_uris_size();
  for (const auto& msg : this->_impl_.uris_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UUriBatch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UUriBatch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UUriBatch::GetClassData() const { return &_class_data_; }


void UUriBatch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UUriBatch*>(&to_msg);
  auto& from = static_cast<const UUriBatch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:uprotocol.v1.UUriBatch)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.uris_.MergeFrom(from._impl_.uris_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UUriBatch::CopyFrom(const UUriBatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uprotocol.v1.UUriBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UUriBatch::IsInitialized() const {
  return true;
}

void UUriBatch::InternalSwap(UUriBatch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.uris_.InternalSwap(&other->_impl_.uris_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UUriBatch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_uri_2eproto_getter, &descriptor_table_uri_2eproto_once,
      file_level_metadata_uri_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace uprotocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::uprotocol::v1::UUri*
Arena::CreateMaybeMessage< ::uprotocol::v1::UUri >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uprotocol::v1::UUri >(arena);
}
template<> PROTOBUF_NOINLINE ::uprotocol::v1::UAuthority*
Arena::CreateMaybeMessage< ::uprotocol::v1::UAuthority >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uprotocol::v1::UAuthority >(arena);
}
template<> PROTOBUF_NOINLINE ::uprotocol::v1::UEntity*
Arena::CreateMaybeMessage< ::uprotocol::v1::UEntity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uprotocol::v1::UEntity >(arena);
}
template<> PROTOBUF_NOINLINE ::uprotocol::v1::UResource*
Arena::CreateMaybeMessage< ::uprotocol::v1::UResource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uprotocol::v1::UResource >(arena);
}
template<> PROTOBUF_NOINLINE ::uprotocol::v1::UUriBatch*
Arena::CreateMaybeMessage< ::uprotocol::v1::UUriBatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uprotocol::v1::UUriBatch >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
