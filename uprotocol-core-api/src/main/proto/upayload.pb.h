// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: upayload.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_upayload_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_upayload_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_upayload_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_upayload_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_upayload_2eproto;
namespace uprotocol {
namespace v1 {
class UPayload;
struct UPayloadDefaultTypeInternal;
extern UPayloadDefaultTypeInternal _UPayload_default_instance_;
}  // namespace v1
}  // namespace uprotocol
PROTOBUF_NAMESPACE_OPEN
template<> ::uprotocol::v1::UPayload* Arena::CreateMaybeMessage<::uprotocol::v1::UPayload>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace uprotocol {
namespace v1 {

enum UPayloadFormat : int {
  UPAYLOAD_FORMAT_UNSPECIFIED = 0,
  UPAYLOAD_FORMAT_PROTOBUF = 1,
  UPAYLOAD_FORMAT_JSON = 2,
  UPAYLOAD_FORMAT_SOMEIP = 3,
  UPAYLOAD_FORMAT_SOMEIP_TLV = 4,
  UPAYLOAD_FORMAT_RAW = 5,
  UPAYLOAD_FORMAT_TEXT = 6,
  UPayloadFormat_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  UPayloadFormat_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool UPayloadFormat_IsValid(int value);
constexpr UPayloadFormat UPayloadFormat_MIN = UPAYLOAD_FORMAT_UNSPECIFIED;
constexpr UPayloadFormat UPayloadFormat_MAX = UPAYLOAD_FORMAT_TEXT;
constexpr int UPayloadFormat_ARRAYSIZE = UPayloadFormat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UPayloadFormat_descriptor();
template<typename T>
inline const std::string& UPayloadFormat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UPayloadFormat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UPayloadFormat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UPayloadFormat_descriptor(), enum_t_value);
}
inline bool UPayloadFormat_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UPayloadFormat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UPayloadFormat>(
    UPayloadFormat_descriptor(), name, value);
}
// ===================================================================

class UPayload final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:uprotocol.v1.UPayload) */ {
 public:
  inline UPayload() : UPayload(nullptr) {}
  ~UPayload() override;
  explicit PROTOBUF_CONSTEXPR UPayload(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UPayload(const UPayload& from);
  UPayload(UPayload&& from) noexcept
    : UPayload() {
    *this = ::std::move(from);
  }

  inline UPayload& operator=(const UPayload& from) {
    CopyFrom(from);
    return *this;
  }
  inline UPayload& operator=(UPayload&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UPayload& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kReference = 1,
    kValue = 2,
    DATA_NOT_SET = 0,
  };

  static inline const UPayload* internal_default_instance() {
    return reinterpret_cast<const UPayload*>(
               &_UPayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UPayload& a, UPayload& b) {
    a.Swap(&b);
  }
  inline void Swap(UPayload* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UPayload* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UPayload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UPayload>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UPayload& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UPayload& from) {
    UPayload::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UPayload* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "uprotocol.v1.UPayload";
  }
  protected:
  explicit UPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLengthFieldNumber = 3,
    kFormatFieldNumber = 4,
    kReferenceFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional int32 length = 3;
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  int32_t length() const;
  void set_length(int32_t value);
  private:
  int32_t _internal_length() const;
  void _internal_set_length(int32_t value);
  public:

  // .uprotocol.v1.UPayloadFormat format = 4;
  void clear_format();
  ::uprotocol::v1::UPayloadFormat format() const;
  void set_format(::uprotocol::v1::UPayloadFormat value);
  private:
  ::uprotocol::v1::UPayloadFormat _internal_format() const;
  void _internal_set_format(::uprotocol::v1::UPayloadFormat value);
  public:

  // fixed64 reference = 1;
  bool has_reference() const;
  private:
  bool _internal_has_reference() const;
  public:
  void clear_reference();
  uint64_t reference() const;
  void set_reference(uint64_t value);
  private:
  uint64_t _internal_reference() const;
  void _internal_set_reference(uint64_t value);
  public:

  // bytes value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:uprotocol.v1.UPayload)
 private:
  class _Internal;
  void set_has_reference();
  void set_has_value();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t length_;
    int format_;
    union DataUnion {
      constexpr DataUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      uint64_t reference_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    } data_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_upayload_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UPayload

// fixed64 reference = 1;
inline bool UPayload::_internal_has_reference() const {
  return data_case() == kReference;
}
inline bool UPayload::has_reference() const {
  return _internal_has_reference();
}
inline void UPayload::set_has_reference() {
  _impl_._oneof_case_[0] = kReference;
}
inline void UPayload::clear_reference() {
  if (_internal_has_reference()) {
    _impl_.data_.reference_ = uint64_t{0u};
    clear_has_data();
  }
}
inline uint64_t UPayload::_internal_reference() const {
  if (_internal_has_reference()) {
    return _impl_.data_.reference_;
  }
  return uint64_t{0u};
}
inline void UPayload::_internal_set_reference(uint64_t value) {
  if (!_internal_has_reference()) {
    clear_data();
    set_has_reference();
  }
  _impl_.data_.reference_ = value;
}
inline uint64_t UPayload::reference() const {
  // @@protoc_insertion_point(field_get:uprotocol.v1.UPayload.reference)
  return _internal_reference();
}
inline void UPayload::set_reference(uint64_t value) {
  _internal_set_reference(value);
  // @@protoc_insertion_point(field_set:uprotocol.v1.UPayload.reference)
}

// bytes value = 2;
inline bool UPayload::_internal_has_value() const {
  return data_case() == kValue;
}
inline bool UPayload::has_value() const {
  return _internal_has_value();
}
inline void UPayload::set_has_value() {
  _impl_._oneof_case_[0] = kValue;
}
inline void UPayload::clear_value() {
  if (_internal_has_value()) {
    _impl_.data_.value_.Destroy();
    clear_has_data();
  }
}
inline const std::string& UPayload::value() const {
  // @@protoc_insertion_point(field_get:uprotocol.v1.UPayload.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline void UPayload::set_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_value()) {
    clear_data();
    set_has_value();
    _impl_.data_.value_.InitDefault();
  }
  _impl_.data_.value_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:uprotocol.v1.UPayload.value)
}
inline std::string* UPayload::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:uprotocol.v1.UPayload.value)
  return _s;
}
inline const std::string& UPayload::_internal_value() const {
  if (_internal_has_value()) {
    return _impl_.data_.value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void UPayload::_internal_set_value(const std::string& value) {
  if (!_internal_has_value()) {
    clear_data();
    set_has_value();
    _impl_.data_.value_.InitDefault();
  }
  _impl_.data_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* UPayload::_internal_mutable_value() {
  if (!_internal_has_value()) {
    clear_data();
    set_has_value();
    _impl_.data_.value_.InitDefault();
  }
  return _impl_.data_.value_.Mutable(      GetArenaForAllocation());
}
inline std::string* UPayload::release_value() {
  // @@protoc_insertion_point(field_release:uprotocol.v1.UPayload.value)
  if (_internal_has_value()) {
    clear_has_data();
    return _impl_.data_.value_.Release();
  } else {
    return nullptr;
  }
}
inline void UPayload::set_allocated_value(std::string* value) {
  if (has_data()) {
    clear_data();
  }
  if (value != nullptr) {
    set_has_value();
    _impl_.data_.value_.InitAllocated(value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:uprotocol.v1.UPayload.value)
}

// optional int32 length = 3;
inline bool UPayload::_internal_has_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UPayload::has_length() const {
  return _internal_has_length();
}
inline void UPayload::clear_length() {
  _impl_.length_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t UPayload::_internal_length() const {
  return _impl_.length_;
}
inline int32_t UPayload::length() const {
  // @@protoc_insertion_point(field_get:uprotocol.v1.UPayload.length)
  return _internal_length();
}
inline void UPayload::_internal_set_length(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.length_ = value;
}
inline void UPayload::set_length(int32_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:uprotocol.v1.UPayload.length)
}

// .uprotocol.v1.UPayloadFormat format = 4;
inline void UPayload::clear_format() {
  _impl_.format_ = 0;
}
inline ::uprotocol::v1::UPayloadFormat UPayload::_internal_format() const {
  return static_cast< ::uprotocol::v1::UPayloadFormat >(_impl_.format_);
}
inline ::uprotocol::v1::UPayloadFormat UPayload::format() const {
  // @@protoc_insertion_point(field_get:uprotocol.v1.UPayload.format)
  return _internal_format();
}
inline void UPayload::_internal_set_format(::uprotocol::v1::UPayloadFormat value) {
  
  _impl_.format_ = value;
}
inline void UPayload::set_format(::uprotocol::v1::UPayloadFormat value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:uprotocol.v1.UPayload.format)
}

inline bool UPayload::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void UPayload::clear_has_data() {
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}
inline UPayload::DataCase UPayload::data_case() const {
  return UPayload::DataCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace uprotocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::uprotocol::v1::UPayloadFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::uprotocol::v1::UPayloadFormat>() {
  return ::uprotocol::v1::UPayloadFormat_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_upayload_2eproto
