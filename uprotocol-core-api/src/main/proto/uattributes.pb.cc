// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: uattributes.proto

#include "uattributes.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace uprotocol {
namespace v1 {
PROTOBUF_CONSTEXPR UAttributes::UAttributes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/nullptr
  , /*decltype(_impl_.sink_)*/nullptr
  , /*decltype(_impl_.reqid_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.priority_)*/0
  , /*decltype(_impl_.ttl_)*/0
  , /*decltype(_impl_.permission_level_)*/0
  , /*decltype(_impl_.commstatus_)*/0} {}
struct UAttributesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UAttributesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UAttributesDefaultTypeInternal() {}
  union {
    UAttributes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UAttributesDefaultTypeInternal _UAttributes_default_instance_;
}  // namespace v1
}  // namespace uprotocol
static ::_pb::Metadata file_level_metadata_uattributes_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_uattributes_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_uattributes_2eproto = nullptr;

const uint32_t TableStruct_uattributes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::uprotocol::v1::UAttributes, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::v1::UAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::uprotocol::v1::UAttributes, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::v1::UAttributes, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::v1::UAttributes, _impl_.sink_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::v1::UAttributes, _impl_.priority_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::v1::UAttributes, _impl_.ttl_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::v1::UAttributes, _impl_.permission_level_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::v1::UAttributes, _impl_.commstatus_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::v1::UAttributes, _impl_.reqid_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::v1::UAttributes, _impl_.token_),
  ~0u,
  ~0u,
  1,
  ~0u,
  3,
  4,
  5,
  2,
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, -1, sizeof(::uprotocol::v1::UAttributes)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::uprotocol::v1::_UAttributes_default_instance_._instance,
};

const char descriptor_table_protodef_uattributes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021uattributes.proto\022\014uprotocol.v1\032\turi.p"
  "roto\032\nuuid.proto\"\370\002\n\013UAttributes\022\036\n\002id\030\001"
  " \001(\0132\022.uprotocol.v1.UUID\022(\n\004type\030\002 \001(\0162\032"
  ".uprotocol.v1.UMessageType\022%\n\004sink\030\003 \001(\013"
  "2\022.uprotocol.v1.UUriH\000\210\001\001\022)\n\010priority\030\004 "
  "\001(\0162\027.uprotocol.v1.UPriority\022\020\n\003ttl\030\005 \001("
  "\005H\001\210\001\001\022\035\n\020permission_level\030\006 \001(\005H\002\210\001\001\022\027\n"
  "\ncommstatus\030\007 \001(\005H\003\210\001\001\022&\n\005reqid\030\010 \001(\0132\022."
  "uprotocol.v1.UUIDH\004\210\001\001\022\022\n\005token\030\t \001(\tH\005\210"
  "\001\001B\007\n\005_sinkB\006\n\004_ttlB\023\n\021_permission_level"
  "B\r\n\013_commstatusB\010\n\006_reqidB\010\n\006_token*\177\n\014U"
  "MessageType\022\035\n\031UMESSAGE_TYPE_UNSPECIFIED"
  "\020\000\022\031\n\025UMESSAGE_TYPE_PUBLISH\020\001\022\031\n\025UMESSAG"
  "E_TYPE_REQUEST\020\002\022\032\n\026UMESSAGE_TYPE_RESPON"
  "SE\020\003*\253\001\n\tUPriority\022\031\n\025UPRIORITY_UNSPECIF"
  "IED\020\000\022\021\n\rUPRIORITY_CS0\020\001\022\021\n\rUPRIORITY_CS"
  "1\020\002\022\021\n\rUPRIORITY_CS2\020\003\022\021\n\rUPRIORITY_CS3\020"
  "\004\022\021\n\rUPRIORITY_CS4\020\005\022\021\n\rUPRIORITY_CS5\020\006\022"
  "\021\n\rUPRIORITY_CS6\020\007B.\n\030org.eclipse.uproto"
  "col.v1B\020UAttributesProtoP\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_uattributes_2eproto_deps[2] = {
  &::descriptor_table_uri_2eproto,
  &::descriptor_table_uuid_2eproto,
};
static ::_pbi::once_flag descriptor_table_uattributes_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_uattributes_2eproto = {
    false, false, 794, descriptor_table_protodef_uattributes_2eproto,
    "uattributes.proto",
    &descriptor_table_uattributes_2eproto_once, descriptor_table_uattributes_2eproto_deps, 2, 1,
    schemas, file_default_instances, TableStruct_uattributes_2eproto::offsets,
    file_level_metadata_uattributes_2eproto, file_level_enum_descriptors_uattributes_2eproto,
    file_level_service_descriptors_uattributes_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_uattributes_2eproto_getter() {
  return &descriptor_table_uattributes_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_uattributes_2eproto(&descriptor_table_uattributes_2eproto);
namespace uprotocol {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UMessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_uattributes_2eproto);
  return file_level_enum_descriptors_uattributes_2eproto[0];
}
bool UMessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UPriority_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_uattributes_2eproto);
  return file_level_enum_descriptors_uattributes_2eproto[1];
}
bool UPriority_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class UAttributes::_Internal {
 public:
  using HasBits = decltype(std::declval<UAttributes>()._impl_._has_bits_);
  static const ::uprotocol::v1::UUID& id(const UAttributes* msg);
  static const ::uprotocol::v1::UUri& sink(const UAttributes* msg);
  static void set_has_sink(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ttl(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_permission_level(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_commstatus(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::uprotocol::v1::UUID& reqid(const UAttributes* msg);
  static void set_has_reqid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::uprotocol::v1::UUID&
UAttributes::_Internal::id(const UAttributes* msg) {
  return *msg->_impl_.id_;
}
const ::uprotocol::v1::UUri&
UAttributes::_Internal::sink(const UAttributes* msg) {
  return *msg->_impl_.sink_;
}
const ::uprotocol::v1::UUID&
UAttributes::_Internal::reqid(const UAttributes* msg) {
  return *msg->_impl_.reqid_;
}
void UAttributes::clear_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.id_ != nullptr) {
    delete _impl_.id_;
  }
  _impl_.id_ = nullptr;
}
void UAttributes::clear_sink() {
  if (_impl_.sink_ != nullptr) _impl_.sink_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void UAttributes::clear_reqid() {
  if (_impl_.reqid_ != nullptr) _impl_.reqid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
UAttributes::UAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:uprotocol.v1.UAttributes)
}
UAttributes::UAttributes(const UAttributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UAttributes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.token_){}
    , decltype(_impl_.id_){nullptr}
    , decltype(_impl_.sink_){nullptr}
    , decltype(_impl_.reqid_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.priority_){}
    , decltype(_impl_.ttl_){}
    , decltype(_impl_.permission_level_){}
    , decltype(_impl_.commstatus_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_token()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_id()) {
    _this->_impl_.id_ = new ::uprotocol::v1::UUID(*from._impl_.id_);
  }
  if (from._internal_has_sink()) {
    _this->_impl_.sink_ = new ::uprotocol::v1::UUri(*from._impl_.sink_);
  }
  if (from._internal_has_reqid()) {
    _this->_impl_.reqid_ = new ::uprotocol::v1::UUID(*from._impl_.reqid_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.commstatus_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.commstatus_));
  // @@protoc_insertion_point(copy_constructor:uprotocol.v1.UAttributes)
}

inline void UAttributes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.token_){}
    , decltype(_impl_.id_){nullptr}
    , decltype(_impl_.sink_){nullptr}
    , decltype(_impl_.reqid_){nullptr}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.priority_){0}
    , decltype(_impl_.ttl_){0}
    , decltype(_impl_.permission_level_){0}
    , decltype(_impl_.commstatus_){0}
  };
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UAttributes::~UAttributes() {
  // @@protoc_insertion_point(destructor:uprotocol.v1.UAttributes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UAttributes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.token_.Destroy();
  if (this != internal_default_instance()) delete _impl_.id_;
  if (this != internal_default_instance()) delete _impl_.sink_;
  if (this != internal_default_instance()) delete _impl_.reqid_;
}

void UAttributes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:uprotocol.v1.UAttributes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.token_.ClearNonDefaultToEmpty();
  }
  if (GetArenaForAllocation() == nullptr && _impl_.id_ != nullptr) {
    delete _impl_.id_;
  }
  _impl_.id_ = nullptr;
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.sink_ != nullptr);
      _impl_.sink_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.reqid_ != nullptr);
      _impl_.reqid_->Clear();
    }
  }
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.priority_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.priority_));
  if (cached_has_bits & 0x00000038u) {
    ::memset(&_impl_.ttl_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.commstatus_) -
        reinterpret_cast<char*>(&_impl_.ttl_)) + sizeof(_impl_.commstatus_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UAttributes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .uprotocol.v1.UUID id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .uprotocol.v1.UMessageType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::uprotocol::v1::UMessageType>(val));
        } else
          goto handle_unusual;
        continue;
      // optional .uprotocol.v1.UUri sink = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sink(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .uprotocol.v1.UPriority priority = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_priority(static_cast<::uprotocol::v1::UPriority>(val));
        } else
          goto handle_unusual;
        continue;
      // optional int32 ttl = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_ttl(&has_bits);
          _impl_.ttl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 permission_level = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_permission_level(&has_bits);
          _impl_.permission_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 commstatus = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_commstatus(&has_bits);
          _impl_.commstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .uprotocol.v1.UUID reqid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_reqid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string token = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "uprotocol.v1.UAttributes.token"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UAttributes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uprotocol.v1.UAttributes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .uprotocol.v1.UUID id = 1;
  if (this->_internal_has_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::id(this),
        _Internal::id(this).GetCachedSize(), target, stream);
  }

  // .uprotocol.v1.UMessageType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // optional .uprotocol.v1.UUri sink = 3;
  if (_internal_has_sink()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::sink(this),
        _Internal::sink(this).GetCachedSize(), target, stream);
  }

  // .uprotocol.v1.UPriority priority = 4;
  if (this->_internal_priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_priority(), target);
  }

  // optional int32 ttl = 5;
  if (_internal_has_ttl()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_ttl(), target);
  }

  // optional int32 permission_level = 6;
  if (_internal_has_permission_level()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_permission_level(), target);
  }

  // optional int32 commstatus = 7;
  if (_internal_has_commstatus()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_commstatus(), target);
  }

  // optional .uprotocol.v1.UUID reqid = 8;
  if (_internal_has_reqid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::reqid(this),
        _Internal::reqid(this).GetCachedSize(), target, stream);
  }

  // optional string token = 9;
  if (_internal_has_token()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "uprotocol.v1.UAttributes.token");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uprotocol.v1.UAttributes)
  return target;
}

size_t UAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uprotocol.v1.UAttributes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string token = 9;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // .uprotocol.v1.UUID id = 1;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.id_);
  }

  if (cached_has_bits & 0x00000006u) {
    // optional .uprotocol.v1.UUri sink = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sink_);
    }

    // optional .uprotocol.v1.UUID reqid = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.reqid_);
    }

  }
  // .uprotocol.v1.UMessageType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .uprotocol.v1.UPriority priority = 4;
  if (this->_internal_priority() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_priority());
  }

  if (cached_has_bits & 0x00000038u) {
    // optional int32 ttl = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ttl());
    }

    // optional int32 permission_level = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_permission_level());
    }

    // optional int32 commstatus = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_commstatus());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UAttributes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UAttributes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UAttributes::GetClassData() const { return &_class_data_; }


void UAttributes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UAttributes*>(&to_msg);
  auto& from = static_cast<const UAttributes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:uprotocol.v1.UAttributes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_token()) {
    _this->_internal_set_token(from._internal_token());
  }
  if (from._internal_has_id()) {
    _this->_internal_mutable_id()->::uprotocol::v1::UUID::MergeFrom(
        from._internal_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_sink()->::uprotocol::v1::UUri::MergeFrom(
          from._internal_sink());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_reqid()->::uprotocol::v1::UUID::MergeFrom(
          from._internal_reqid());
    }
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_priority() != 0) {
    _this->_internal_set_priority(from._internal_priority());
  }
  if (cached_has_bits & 0x00000038u) {
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.ttl_ = from._impl_.ttl_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.permission_level_ = from._impl_.permission_level_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.commstatus_ = from._impl_.commstatus_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UAttributes::CopyFrom(const UAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uprotocol.v1.UAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UAttributes::IsInitialized() const {
  return true;
}

void UAttributes::InternalSwap(UAttributes* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UAttributes, _impl_.commstatus_)
      + sizeof(UAttributes::_impl_.commstatus_)
      - PROTOBUF_FIELD_OFFSET(UAttributes, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UAttributes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_uattributes_2eproto_getter, &descriptor_table_uattributes_2eproto_once,
      file_level_metadata_uattributes_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace uprotocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::uprotocol::v1::UAttributes*
Arena::CreateMaybeMessage< ::uprotocol::v1::UAttributes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uprotocol::v1::UAttributes >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
