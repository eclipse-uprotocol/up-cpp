// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: uri.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_uri_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_uri_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_uri_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_uri_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_uri_2eproto;
namespace uprotocol {
namespace v1 {
class UAuthority;
struct UAuthorityDefaultTypeInternal;
extern UAuthorityDefaultTypeInternal _UAuthority_default_instance_;
class UEntity;
struct UEntityDefaultTypeInternal;
extern UEntityDefaultTypeInternal _UEntity_default_instance_;
class UResource;
struct UResourceDefaultTypeInternal;
extern UResourceDefaultTypeInternal _UResource_default_instance_;
class UUri;
struct UUriDefaultTypeInternal;
extern UUriDefaultTypeInternal _UUri_default_instance_;
class UUriBatch;
struct UUriBatchDefaultTypeInternal;
extern UUriBatchDefaultTypeInternal _UUriBatch_default_instance_;
}  // namespace v1
}  // namespace uprotocol
PROTOBUF_NAMESPACE_OPEN
template<> ::uprotocol::v1::UAuthority* Arena::CreateMaybeMessage<::uprotocol::v1::UAuthority>(Arena*);
template<> ::uprotocol::v1::UEntity* Arena::CreateMaybeMessage<::uprotocol::v1::UEntity>(Arena*);
template<> ::uprotocol::v1::UResource* Arena::CreateMaybeMessage<::uprotocol::v1::UResource>(Arena*);
template<> ::uprotocol::v1::UUri* Arena::CreateMaybeMessage<::uprotocol::v1::UUri>(Arena*);
template<> ::uprotocol::v1::UUriBatch* Arena::CreateMaybeMessage<::uprotocol::v1::UUriBatch>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace uprotocol {
namespace v1 {

// ===================================================================

class UUri final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:uprotocol.v1.UUri) */ {
 public:
  inline UUri() : UUri(nullptr) {}
  ~UUri() override;
  explicit PROTOBUF_CONSTEXPR UUri(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UUri(const UUri& from);
  UUri(UUri&& from) noexcept
    : UUri() {
    *this = ::std::move(from);
  }

  inline UUri& operator=(const UUri& from) {
    CopyFrom(from);
    return *this;
  }
  inline UUri& operator=(UUri&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UUri& default_instance() {
    return *internal_default_instance();
  }
  static inline const UUri* internal_default_instance() {
    return reinterpret_cast<const UUri*>(
               &_UUri_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UUri& a, UUri& b) {
    a.Swap(&b);
  }
  inline void Swap(UUri* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UUri* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UUri* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UUri>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UUri& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UUri& from) {
    UUri::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UUri* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "uprotocol.v1.UUri";
  }
  protected:
  explicit UUri(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthorityFieldNumber = 1,
    kEntityFieldNumber = 2,
    kResourceFieldNumber = 3,
  };
  // .uprotocol.v1.UAuthority authority = 1;
  bool has_authority() const;
  private:
  bool _internal_has_authority() const;
  public:
  void clear_authority();
  const ::uprotocol::v1::UAuthority& authority() const;
  PROTOBUF_NODISCARD ::uprotocol::v1::UAuthority* release_authority();
  ::uprotocol::v1::UAuthority* mutable_authority();
  void set_allocated_authority(::uprotocol::v1::UAuthority* authority);
  private:
  const ::uprotocol::v1::UAuthority& _internal_authority() const;
  ::uprotocol::v1::UAuthority* _internal_mutable_authority();
  public:
  void unsafe_arena_set_allocated_authority(
      ::uprotocol::v1::UAuthority* authority);
  ::uprotocol::v1::UAuthority* unsafe_arena_release_authority();

  // .uprotocol.v1.UEntity entity = 2;
  bool has_entity() const;
  private:
  bool _internal_has_entity() const;
  public:
  void clear_entity();
  const ::uprotocol::v1::UEntity& entity() const;
  PROTOBUF_NODISCARD ::uprotocol::v1::UEntity* release_entity();
  ::uprotocol::v1::UEntity* mutable_entity();
  void set_allocated_entity(::uprotocol::v1::UEntity* entity);
  private:
  const ::uprotocol::v1::UEntity& _internal_entity() const;
  ::uprotocol::v1::UEntity* _internal_mutable_entity();
  public:
  void unsafe_arena_set_allocated_entity(
      ::uprotocol::v1::UEntity* entity);
  ::uprotocol::v1::UEntity* unsafe_arena_release_entity();

  // .uprotocol.v1.UResource resource = 3;
  bool has_resource() const;
  private:
  bool _internal_has_resource() const;
  public:
  void clear_resource();
  const ::uprotocol::v1::UResource& resource() const;
  PROTOBUF_NODISCARD ::uprotocol::v1::UResource* release_resource();
  ::uprotocol::v1::UResource* mutable_resource();
  void set_allocated_resource(::uprotocol::v1::UResource* resource);
  private:
  const ::uprotocol::v1::UResource& _internal_resource() const;
  ::uprotocol::v1::UResource* _internal_mutable_resource();
  public:
  void unsafe_arena_set_allocated_resource(
      ::uprotocol::v1::UResource* resource);
  ::uprotocol::v1::UResource* unsafe_arena_release_resource();

  // @@protoc_insertion_point(class_scope:uprotocol.v1.UUri)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uprotocol::v1::UAuthority* authority_;
    ::uprotocol::v1::UEntity* entity_;
    ::uprotocol::v1::UResource* resource_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_uri_2eproto;
};
// -------------------------------------------------------------------

class UAuthority final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:uprotocol.v1.UAuthority) */ {
 public:
  inline UAuthority() : UAuthority(nullptr) {}
  ~UAuthority() override;
  explicit PROTOBUF_CONSTEXPR UAuthority(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UAuthority(const UAuthority& from);
  UAuthority(UAuthority&& from) noexcept
    : UAuthority() {
    *this = ::std::move(from);
  }

  inline UAuthority& operator=(const UAuthority& from) {
    CopyFrom(from);
    return *this;
  }
  inline UAuthority& operator=(UAuthority&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UAuthority& default_instance() {
    return *internal_default_instance();
  }
  enum RemoteCase {
    kName = 1,
    kIp = 2,
    kId = 3,
    REMOTE_NOT_SET = 0,
  };

  static inline const UAuthority* internal_default_instance() {
    return reinterpret_cast<const UAuthority*>(
               &_UAuthority_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UAuthority& a, UAuthority& b) {
    a.Swap(&b);
  }
  inline void Swap(UAuthority* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UAuthority* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UAuthority* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UAuthority>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UAuthority& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UAuthority& from) {
    UAuthority::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UAuthority* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "uprotocol.v1.UAuthority";
  }
  protected:
  explicit UAuthority(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kIpFieldNumber = 2,
    kIdFieldNumber = 3,
  };
  // string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes ip = 2;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // bytes id = 3;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  void clear_remote();
  RemoteCase remote_case() const;
  // @@protoc_insertion_point(class_scope:uprotocol.v1.UAuthority)
 private:
  class _Internal;
  void set_has_name();
  void set_has_ip();
  void set_has_id();

  inline bool has_remote() const;
  inline void clear_has_remote();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union RemoteUnion {
      constexpr RemoteUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    } remote_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_uri_2eproto;
};
// -------------------------------------------------------------------

class UEntity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:uprotocol.v1.UEntity) */ {
 public:
  inline UEntity() : UEntity(nullptr) {}
  ~UEntity() override;
  explicit PROTOBUF_CONSTEXPR UEntity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UEntity(const UEntity& from);
  UEntity(UEntity&& from) noexcept
    : UEntity() {
    *this = ::std::move(from);
  }

  inline UEntity& operator=(const UEntity& from) {
    CopyFrom(from);
    return *this;
  }
  inline UEntity& operator=(UEntity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UEntity& default_instance() {
    return *internal_default_instance();
  }
  static inline const UEntity* internal_default_instance() {
    return reinterpret_cast<const UEntity*>(
               &_UEntity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UEntity& a, UEntity& b) {
    a.Swap(&b);
  }
  inline void Swap(UEntity* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UEntity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UEntity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UEntity>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UEntity& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UEntity& from) {
    UEntity::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UEntity* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "uprotocol.v1.UEntity";
  }
  protected:
  explicit UEntity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kIdFieldNumber = 2,
    kVersionMajorFieldNumber = 3,
    kVersionMinorFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint32 id = 2;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // optional uint32 version_major = 3;
  bool has_version_major() const;
  private:
  bool _internal_has_version_major() const;
  public:
  void clear_version_major();
  uint32_t version_major() const;
  void set_version_major(uint32_t value);
  private:
  uint32_t _internal_version_major() const;
  void _internal_set_version_major(uint32_t value);
  public:

  // optional uint32 version_minor = 4;
  bool has_version_minor() const;
  private:
  bool _internal_has_version_minor() const;
  public:
  void clear_version_minor();
  uint32_t version_minor() const;
  void set_version_minor(uint32_t value);
  private:
  uint32_t _internal_version_minor() const;
  void _internal_set_version_minor(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:uprotocol.v1.UEntity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t id_;
    uint32_t version_major_;
    uint32_t version_minor_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_uri_2eproto;
};
// -------------------------------------------------------------------

class UResource final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:uprotocol.v1.UResource) */ {
 public:
  inline UResource() : UResource(nullptr) {}
  ~UResource() override;
  explicit PROTOBUF_CONSTEXPR UResource(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UResource(const UResource& from);
  UResource(UResource&& from) noexcept
    : UResource() {
    *this = ::std::move(from);
  }

  inline UResource& operator=(const UResource& from) {
    CopyFrom(from);
    return *this;
  }
  inline UResource& operator=(UResource&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UResource& default_instance() {
    return *internal_default_instance();
  }
  static inline const UResource* internal_default_instance() {
    return reinterpret_cast<const UResource*>(
               &_UResource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UResource& a, UResource& b) {
    a.Swap(&b);
  }
  inline void Swap(UResource* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UResource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UResource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UResource>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UResource& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UResource& from) {
    UResource::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UResource* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "uprotocol.v1.UResource";
  }
  protected:
  explicit UResource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kInstanceFieldNumber = 2,
    kMessageFieldNumber = 3,
    kIdFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string instance = 2;
  bool has_instance() const;
  private:
  bool _internal_has_instance() const;
  public:
  void clear_instance();
  const std::string& instance() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instance(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instance();
  PROTOBUF_NODISCARD std::string* release_instance();
  void set_allocated_instance(std::string* instance);
  private:
  const std::string& _internal_instance() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instance(const std::string& value);
  std::string* _internal_mutable_instance();
  public:

  // optional string message = 3;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // optional uint32 id = 4;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:uprotocol.v1.UResource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instance_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    uint32_t id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_uri_2eproto;
};
// -------------------------------------------------------------------

class UUriBatch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:uprotocol.v1.UUriBatch) */ {
 public:
  inline UUriBatch() : UUriBatch(nullptr) {}
  ~UUriBatch() override;
  explicit PROTOBUF_CONSTEXPR UUriBatch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UUriBatch(const UUriBatch& from);
  UUriBatch(UUriBatch&& from) noexcept
    : UUriBatch() {
    *this = ::std::move(from);
  }

  inline UUriBatch& operator=(const UUriBatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline UUriBatch& operator=(UUriBatch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UUriBatch& default_instance() {
    return *internal_default_instance();
  }
  static inline const UUriBatch* internal_default_instance() {
    return reinterpret_cast<const UUriBatch*>(
               &_UUriBatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UUriBatch& a, UUriBatch& b) {
    a.Swap(&b);
  }
  inline void Swap(UUriBatch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UUriBatch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UUriBatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UUriBatch>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UUriBatch& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UUriBatch& from) {
    UUriBatch::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UUriBatch* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "uprotocol.v1.UUriBatch";
  }
  protected:
  explicit UUriBatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrisFieldNumber = 1,
  };
  // repeated .uprotocol.v1.UUri uris = 1;
  int uris_size() const;
  private:
  int _internal_uris_size() const;
  public:
  void clear_uris();
  ::uprotocol::v1::UUri* mutable_uris(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::uprotocol::v1::UUri >*
      mutable_uris();
  private:
  const ::uprotocol::v1::UUri& _internal_uris(int index) const;
  ::uprotocol::v1::UUri* _internal_add_uris();
  public:
  const ::uprotocol::v1::UUri& uris(int index) const;
  ::uprotocol::v1::UUri* add_uris();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::uprotocol::v1::UUri >&
      uris() const;

  // @@protoc_insertion_point(class_scope:uprotocol.v1.UUriBatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::uprotocol::v1::UUri > uris_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_uri_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UUri

// .uprotocol.v1.UAuthority authority = 1;
inline bool UUri::_internal_has_authority() const {
  return this != internal_default_instance() && _impl_.authority_ != nullptr;
}
inline bool UUri::has_authority() const {
  return _internal_has_authority();
}
inline void UUri::clear_authority() {
  if (GetArenaForAllocation() == nullptr && _impl_.authority_ != nullptr) {
    delete _impl_.authority_;
  }
  _impl_.authority_ = nullptr;
}
inline const ::uprotocol::v1::UAuthority& UUri::_internal_authority() const {
  const ::uprotocol::v1::UAuthority* p = _impl_.authority_;
  return p != nullptr ? *p : reinterpret_cast<const ::uprotocol::v1::UAuthority&>(
      ::uprotocol::v1::_UAuthority_default_instance_);
}
inline const ::uprotocol::v1::UAuthority& UUri::authority() const {
  // @@protoc_insertion_point(field_get:uprotocol.v1.UUri.authority)
  return _internal_authority();
}
inline void UUri::unsafe_arena_set_allocated_authority(
    ::uprotocol::v1::UAuthority* authority) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.authority_);
  }
  _impl_.authority_ = authority;
  if (authority) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:uprotocol.v1.UUri.authority)
}
inline ::uprotocol::v1::UAuthority* UUri::release_authority() {
  
  ::uprotocol::v1::UAuthority* temp = _impl_.authority_;
  _impl_.authority_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::uprotocol::v1::UAuthority* UUri::unsafe_arena_release_authority() {
  // @@protoc_insertion_point(field_release:uprotocol.v1.UUri.authority)
  
  ::uprotocol::v1::UAuthority* temp = _impl_.authority_;
  _impl_.authority_ = nullptr;
  return temp;
}
inline ::uprotocol::v1::UAuthority* UUri::_internal_mutable_authority() {
  
  if (_impl_.authority_ == nullptr) {
    auto* p = CreateMaybeMessage<::uprotocol::v1::UAuthority>(GetArenaForAllocation());
    _impl_.authority_ = p;
  }
  return _impl_.authority_;
}
inline ::uprotocol::v1::UAuthority* UUri::mutable_authority() {
  ::uprotocol::v1::UAuthority* _msg = _internal_mutable_authority();
  // @@protoc_insertion_point(field_mutable:uprotocol.v1.UUri.authority)
  return _msg;
}
inline void UUri::set_allocated_authority(::uprotocol::v1::UAuthority* authority) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.authority_;
  }
  if (authority) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(authority);
    if (message_arena != submessage_arena) {
      authority = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, authority, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.authority_ = authority;
  // @@protoc_insertion_point(field_set_allocated:uprotocol.v1.UUri.authority)
}

// .uprotocol.v1.UEntity entity = 2;
inline bool UUri::_internal_has_entity() const {
  return this != internal_default_instance() && _impl_.entity_ != nullptr;
}
inline bool UUri::has_entity() const {
  return _internal_has_entity();
}
inline void UUri::clear_entity() {
  if (GetArenaForAllocation() == nullptr && _impl_.entity_ != nullptr) {
    delete _impl_.entity_;
  }
  _impl_.entity_ = nullptr;
}
inline const ::uprotocol::v1::UEntity& UUri::_internal_entity() const {
  const ::uprotocol::v1::UEntity* p = _impl_.entity_;
  return p != nullptr ? *p : reinterpret_cast<const ::uprotocol::v1::UEntity&>(
      ::uprotocol::v1::_UEntity_default_instance_);
}
inline const ::uprotocol::v1::UEntity& UUri::entity() const {
  // @@protoc_insertion_point(field_get:uprotocol.v1.UUri.entity)
  return _internal_entity();
}
inline void UUri::unsafe_arena_set_allocated_entity(
    ::uprotocol::v1::UEntity* entity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.entity_);
  }
  _impl_.entity_ = entity;
  if (entity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:uprotocol.v1.UUri.entity)
}
inline ::uprotocol::v1::UEntity* UUri::release_entity() {
  
  ::uprotocol::v1::UEntity* temp = _impl_.entity_;
  _impl_.entity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::uprotocol::v1::UEntity* UUri::unsafe_arena_release_entity() {
  // @@protoc_insertion_point(field_release:uprotocol.v1.UUri.entity)
  
  ::uprotocol::v1::UEntity* temp = _impl_.entity_;
  _impl_.entity_ = nullptr;
  return temp;
}
inline ::uprotocol::v1::UEntity* UUri::_internal_mutable_entity() {
  
  if (_impl_.entity_ == nullptr) {
    auto* p = CreateMaybeMessage<::uprotocol::v1::UEntity>(GetArenaForAllocation());
    _impl_.entity_ = p;
  }
  return _impl_.entity_;
}
inline ::uprotocol::v1::UEntity* UUri::mutable_entity() {
  ::uprotocol::v1::UEntity* _msg = _internal_mutable_entity();
  // @@protoc_insertion_point(field_mutable:uprotocol.v1.UUri.entity)
  return _msg;
}
inline void UUri::set_allocated_entity(::uprotocol::v1::UEntity* entity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.entity_;
  }
  if (entity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(entity);
    if (message_arena != submessage_arena) {
      entity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entity, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.entity_ = entity;
  // @@protoc_insertion_point(field_set_allocated:uprotocol.v1.UUri.entity)
}

// .uprotocol.v1.UResource resource = 3;
inline bool UUri::_internal_has_resource() const {
  return this != internal_default_instance() && _impl_.resource_ != nullptr;
}
inline bool UUri::has_resource() const {
  return _internal_has_resource();
}
inline void UUri::clear_resource() {
  if (GetArenaForAllocation() == nullptr && _impl_.resource_ != nullptr) {
    delete _impl_.resource_;
  }
  _impl_.resource_ = nullptr;
}
inline const ::uprotocol::v1::UResource& UUri::_internal_resource() const {
  const ::uprotocol::v1::UResource* p = _impl_.resource_;
  return p != nullptr ? *p : reinterpret_cast<const ::uprotocol::v1::UResource&>(
      ::uprotocol::v1::_UResource_default_instance_);
}
inline const ::uprotocol::v1::UResource& UUri::resource() const {
  // @@protoc_insertion_point(field_get:uprotocol.v1.UUri.resource)
  return _internal_resource();
}
inline void UUri::unsafe_arena_set_allocated_resource(
    ::uprotocol::v1::UResource* resource) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.resource_);
  }
  _impl_.resource_ = resource;
  if (resource) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:uprotocol.v1.UUri.resource)
}
inline ::uprotocol::v1::UResource* UUri::release_resource() {
  
  ::uprotocol::v1::UResource* temp = _impl_.resource_;
  _impl_.resource_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::uprotocol::v1::UResource* UUri::unsafe_arena_release_resource() {
  // @@protoc_insertion_point(field_release:uprotocol.v1.UUri.resource)
  
  ::uprotocol::v1::UResource* temp = _impl_.resource_;
  _impl_.resource_ = nullptr;
  return temp;
}
inline ::uprotocol::v1::UResource* UUri::_internal_mutable_resource() {
  
  if (_impl_.resource_ == nullptr) {
    auto* p = CreateMaybeMessage<::uprotocol::v1::UResource>(GetArenaForAllocation());
    _impl_.resource_ = p;
  }
  return _impl_.resource_;
}
inline ::uprotocol::v1::UResource* UUri::mutable_resource() {
  ::uprotocol::v1::UResource* _msg = _internal_mutable_resource();
  // @@protoc_insertion_point(field_mutable:uprotocol.v1.UUri.resource)
  return _msg;
}
inline void UUri::set_allocated_resource(::uprotocol::v1::UResource* resource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.resource_;
  }
  if (resource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resource);
    if (message_arena != submessage_arena) {
      resource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resource, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.resource_ = resource;
  // @@protoc_insertion_point(field_set_allocated:uprotocol.v1.UUri.resource)
}

// -------------------------------------------------------------------

// UAuthority

// string name = 1;
inline bool UAuthority::_internal_has_name() const {
  return remote_case() == kName;
}
inline bool UAuthority::has_name() const {
  return _internal_has_name();
}
inline void UAuthority::set_has_name() {
  _impl_._oneof_case_[0] = kName;
}
inline void UAuthority::clear_name() {
  if (_internal_has_name()) {
    _impl_.remote_.name_.Destroy();
    clear_has_remote();
  }
}
inline const std::string& UAuthority::name() const {
  // @@protoc_insertion_point(field_get:uprotocol.v1.UAuthority.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline void UAuthority::set_name(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_name()) {
    clear_remote();
    set_has_name();
    _impl_.remote_.name_.InitDefault();
  }
  _impl_.remote_.name_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:uprotocol.v1.UAuthority.name)
}
inline std::string* UAuthority::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:uprotocol.v1.UAuthority.name)
  return _s;
}
inline const std::string& UAuthority::_internal_name() const {
  if (_internal_has_name()) {
    return _impl_.remote_.name_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void UAuthority::_internal_set_name(const std::string& value) {
  if (!_internal_has_name()) {
    clear_remote();
    set_has_name();
    _impl_.remote_.name_.InitDefault();
  }
  _impl_.remote_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* UAuthority::_internal_mutable_name() {
  if (!_internal_has_name()) {
    clear_remote();
    set_has_name();
    _impl_.remote_.name_.InitDefault();
  }
  return _impl_.remote_.name_.Mutable(      GetArenaForAllocation());
}
inline std::string* UAuthority::release_name() {
  // @@protoc_insertion_point(field_release:uprotocol.v1.UAuthority.name)
  if (_internal_has_name()) {
    clear_has_remote();
    return _impl_.remote_.name_.Release();
  } else {
    return nullptr;
  }
}
inline void UAuthority::set_allocated_name(std::string* name) {
  if (has_remote()) {
    clear_remote();
  }
  if (name != nullptr) {
    set_has_name();
    _impl_.remote_.name_.InitAllocated(name, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:uprotocol.v1.UAuthority.name)
}

// bytes ip = 2;
inline bool UAuthority::_internal_has_ip() const {
  return remote_case() == kIp;
}
inline bool UAuthority::has_ip() const {
  return _internal_has_ip();
}
inline void UAuthority::set_has_ip() {
  _impl_._oneof_case_[0] = kIp;
}
inline void UAuthority::clear_ip() {
  if (_internal_has_ip()) {
    _impl_.remote_.ip_.Destroy();
    clear_has_remote();
  }
}
inline const std::string& UAuthority::ip() const {
  // @@protoc_insertion_point(field_get:uprotocol.v1.UAuthority.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline void UAuthority::set_ip(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_ip()) {
    clear_remote();
    set_has_ip();
    _impl_.remote_.ip_.InitDefault();
  }
  _impl_.remote_.ip_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:uprotocol.v1.UAuthority.ip)
}
inline std::string* UAuthority::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:uprotocol.v1.UAuthority.ip)
  return _s;
}
inline const std::string& UAuthority::_internal_ip() const {
  if (_internal_has_ip()) {
    return _impl_.remote_.ip_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void UAuthority::_internal_set_ip(const std::string& value) {
  if (!_internal_has_ip()) {
    clear_remote();
    set_has_ip();
    _impl_.remote_.ip_.InitDefault();
  }
  _impl_.remote_.ip_.Set(value, GetArenaForAllocation());
}
inline std::string* UAuthority::_internal_mutable_ip() {
  if (!_internal_has_ip()) {
    clear_remote();
    set_has_ip();
    _impl_.remote_.ip_.InitDefault();
  }
  return _impl_.remote_.ip_.Mutable(      GetArenaForAllocation());
}
inline std::string* UAuthority::release_ip() {
  // @@protoc_insertion_point(field_release:uprotocol.v1.UAuthority.ip)
  if (_internal_has_ip()) {
    clear_has_remote();
    return _impl_.remote_.ip_.Release();
  } else {
    return nullptr;
  }
}
inline void UAuthority::set_allocated_ip(std::string* ip) {
  if (has_remote()) {
    clear_remote();
  }
  if (ip != nullptr) {
    set_has_ip();
    _impl_.remote_.ip_.InitAllocated(ip, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:uprotocol.v1.UAuthority.ip)
}

// bytes id = 3;
inline bool UAuthority::_internal_has_id() const {
  return remote_case() == kId;
}
inline bool UAuthority::has_id() const {
  return _internal_has_id();
}
inline void UAuthority::set_has_id() {
  _impl_._oneof_case_[0] = kId;
}
inline void UAuthority::clear_id() {
  if (_internal_has_id()) {
    _impl_.remote_.id_.Destroy();
    clear_has_remote();
  }
}
inline const std::string& UAuthority::id() const {
  // @@protoc_insertion_point(field_get:uprotocol.v1.UAuthority.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline void UAuthority::set_id(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_id()) {
    clear_remote();
    set_has_id();
    _impl_.remote_.id_.InitDefault();
  }
  _impl_.remote_.id_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:uprotocol.v1.UAuthority.id)
}
inline std::string* UAuthority::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:uprotocol.v1.UAuthority.id)
  return _s;
}
inline const std::string& UAuthority::_internal_id() const {
  if (_internal_has_id()) {
    return _impl_.remote_.id_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void UAuthority::_internal_set_id(const std::string& value) {
  if (!_internal_has_id()) {
    clear_remote();
    set_has_id();
    _impl_.remote_.id_.InitDefault();
  }
  _impl_.remote_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* UAuthority::_internal_mutable_id() {
  if (!_internal_has_id()) {
    clear_remote();
    set_has_id();
    _impl_.remote_.id_.InitDefault();
  }
  return _impl_.remote_.id_.Mutable(      GetArenaForAllocation());
}
inline std::string* UAuthority::release_id() {
  // @@protoc_insertion_point(field_release:uprotocol.v1.UAuthority.id)
  if (_internal_has_id()) {
    clear_has_remote();
    return _impl_.remote_.id_.Release();
  } else {
    return nullptr;
  }
}
inline void UAuthority::set_allocated_id(std::string* id) {
  if (has_remote()) {
    clear_remote();
  }
  if (id != nullptr) {
    set_has_id();
    _impl_.remote_.id_.InitAllocated(id, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:uprotocol.v1.UAuthority.id)
}

inline bool UAuthority::has_remote() const {
  return remote_case() != REMOTE_NOT_SET;
}
inline void UAuthority::clear_has_remote() {
  _impl_._oneof_case_[0] = REMOTE_NOT_SET;
}
inline UAuthority::RemoteCase UAuthority::remote_case() const {
  return UAuthority::RemoteCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// UEntity

// string name = 1;
inline void UEntity::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& UEntity::name() const {
  // @@protoc_insertion_point(field_get:uprotocol.v1.UEntity.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UEntity::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:uprotocol.v1.UEntity.name)
}
inline std::string* UEntity::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:uprotocol.v1.UEntity.name)
  return _s;
}
inline const std::string& UEntity::_internal_name() const {
  return _impl_.name_.Get();
}
inline void UEntity::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* UEntity::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* UEntity::release_name() {
  // @@protoc_insertion_point(field_release:uprotocol.v1.UEntity.name)
  return _impl_.name_.Release();
}
inline void UEntity::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:uprotocol.v1.UEntity.name)
}

// optional uint32 id = 2;
inline bool UEntity::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UEntity::has_id() const {
  return _internal_has_id();
}
inline void UEntity::clear_id() {
  _impl_.id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t UEntity::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t UEntity::id() const {
  // @@protoc_insertion_point(field_get:uprotocol.v1.UEntity.id)
  return _internal_id();
}
inline void UEntity::_internal_set_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_ = value;
}
inline void UEntity::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:uprotocol.v1.UEntity.id)
}

// optional uint32 version_major = 3;
inline bool UEntity::_internal_has_version_major() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UEntity::has_version_major() const {
  return _internal_has_version_major();
}
inline void UEntity::clear_version_major() {
  _impl_.version_major_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t UEntity::_internal_version_major() const {
  return _impl_.version_major_;
}
inline uint32_t UEntity::version_major() const {
  // @@protoc_insertion_point(field_get:uprotocol.v1.UEntity.version_major)
  return _internal_version_major();
}
inline void UEntity::_internal_set_version_major(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.version_major_ = value;
}
inline void UEntity::set_version_major(uint32_t value) {
  _internal_set_version_major(value);
  // @@protoc_insertion_point(field_set:uprotocol.v1.UEntity.version_major)
}

// optional uint32 version_minor = 4;
inline bool UEntity::_internal_has_version_minor() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UEntity::has_version_minor() const {
  return _internal_has_version_minor();
}
inline void UEntity::clear_version_minor() {
  _impl_.version_minor_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t UEntity::_internal_version_minor() const {
  return _impl_.version_minor_;
}
inline uint32_t UEntity::version_minor() const {
  // @@protoc_insertion_point(field_get:uprotocol.v1.UEntity.version_minor)
  return _internal_version_minor();
}
inline void UEntity::_internal_set_version_minor(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.version_minor_ = value;
}
inline void UEntity::set_version_minor(uint32_t value) {
  _internal_set_version_minor(value);
  // @@protoc_insertion_point(field_set:uprotocol.v1.UEntity.version_minor)
}

// -------------------------------------------------------------------

// UResource

// string name = 1;
inline void UResource::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& UResource::name() const {
  // @@protoc_insertion_point(field_get:uprotocol.v1.UResource.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UResource::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:uprotocol.v1.UResource.name)
}
inline std::string* UResource::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:uprotocol.v1.UResource.name)
  return _s;
}
inline const std::string& UResource::_internal_name() const {
  return _impl_.name_.Get();
}
inline void UResource::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* UResource::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* UResource::release_name() {
  // @@protoc_insertion_point(field_release:uprotocol.v1.UResource.name)
  return _impl_.name_.Release();
}
inline void UResource::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:uprotocol.v1.UResource.name)
}

// optional string instance = 2;
inline bool UResource::_internal_has_instance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UResource::has_instance() const {
  return _internal_has_instance();
}
inline void UResource::clear_instance() {
  _impl_.instance_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UResource::instance() const {
  // @@protoc_insertion_point(field_get:uprotocol.v1.UResource.instance)
  return _internal_instance();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UResource::set_instance(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.instance_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:uprotocol.v1.UResource.instance)
}
inline std::string* UResource::mutable_instance() {
  std::string* _s = _internal_mutable_instance();
  // @@protoc_insertion_point(field_mutable:uprotocol.v1.UResource.instance)
  return _s;
}
inline const std::string& UResource::_internal_instance() const {
  return _impl_.instance_.Get();
}
inline void UResource::_internal_set_instance(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.instance_.Set(value, GetArenaForAllocation());
}
inline std::string* UResource::_internal_mutable_instance() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.instance_.Mutable(GetArenaForAllocation());
}
inline std::string* UResource::release_instance() {
  // @@protoc_insertion_point(field_release:uprotocol.v1.UResource.instance)
  if (!_internal_has_instance()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.instance_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.instance_.IsDefault()) {
    _impl_.instance_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UResource::set_allocated_instance(std::string* instance) {
  if (instance != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.instance_.SetAllocated(instance, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.instance_.IsDefault()) {
    _impl_.instance_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:uprotocol.v1.UResource.instance)
}

// optional string message = 3;
inline bool UResource::_internal_has_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UResource::has_message() const {
  return _internal_has_message();
}
inline void UResource::clear_message() {
  _impl_.message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& UResource::message() const {
  // @@protoc_insertion_point(field_get:uprotocol.v1.UResource.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UResource::set_message(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:uprotocol.v1.UResource.message)
}
inline std::string* UResource::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:uprotocol.v1.UResource.message)
  return _s;
}
inline const std::string& UResource::_internal_message() const {
  return _impl_.message_.Get();
}
inline void UResource::_internal_set_message(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* UResource::_internal_mutable_message() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* UResource::release_message() {
  // @@protoc_insertion_point(field_release:uprotocol.v1.UResource.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.message_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UResource::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:uprotocol.v1.UResource.message)
}

// optional uint32 id = 4;
inline bool UResource::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UResource::has_id() const {
  return _internal_has_id();
}
inline void UResource::clear_id() {
  _impl_.id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t UResource::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t UResource::id() const {
  // @@protoc_insertion_point(field_get:uprotocol.v1.UResource.id)
  return _internal_id();
}
inline void UResource::_internal_set_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.id_ = value;
}
inline void UResource::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:uprotocol.v1.UResource.id)
}

// -------------------------------------------------------------------

// UUriBatch

// repeated .uprotocol.v1.UUri uris = 1;
inline int UUriBatch::_internal_uris_size() const {
  return _impl_.uris_.size();
}
inline int UUriBatch::uris_size() const {
  return _internal_uris_size();
}
inline void UUriBatch::clear_uris() {
  _impl_.uris_.Clear();
}
inline ::uprotocol::v1::UUri* UUriBatch::mutable_uris(int index) {
  // @@protoc_insertion_point(field_mutable:uprotocol.v1.UUriBatch.uris)
  return _impl_.uris_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::uprotocol::v1::UUri >*
UUriBatch::mutable_uris() {
  // @@protoc_insertion_point(field_mutable_list:uprotocol.v1.UUriBatch.uris)
  return &_impl_.uris_;
}
inline const ::uprotocol::v1::UUri& UUriBatch::_internal_uris(int index) const {
  return _impl_.uris_.Get(index);
}
inline const ::uprotocol::v1::UUri& UUriBatch::uris(int index) const {
  // @@protoc_insertion_point(field_get:uprotocol.v1.UUriBatch.uris)
  return _internal_uris(index);
}
inline ::uprotocol::v1::UUri* UUriBatch::_internal_add_uris() {
  return _impl_.uris_.Add();
}
inline ::uprotocol::v1::UUri* UUriBatch::add_uris() {
  ::uprotocol::v1::UUri* _add = _internal_add_uris();
  // @@protoc_insertion_point(field_add:uprotocol.v1.UUriBatch.uris)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::uprotocol::v1::UUri >&
UUriBatch::uris() const {
  // @@protoc_insertion_point(field_list:uprotocol.v1.UUriBatch.uris)
  return _impl_.uris_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace uprotocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_uri_2eproto
