// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: umessage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_umessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_umessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "uattributes.pb.h"
#include "upayload.pb.h"
#include "uri.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_umessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_umessage_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_umessage_2eproto;
namespace uprotocol {
namespace v1 {
class UMessage;
struct UMessageDefaultTypeInternal;
extern UMessageDefaultTypeInternal _UMessage_default_instance_;
}  // namespace v1
}  // namespace uprotocol
PROTOBUF_NAMESPACE_OPEN
template<> ::uprotocol::v1::UMessage* Arena::CreateMaybeMessage<::uprotocol::v1::UMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace uprotocol {
namespace v1 {

// ===================================================================

class UMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:uprotocol.v1.UMessage) */ {
 public:
  inline UMessage() : UMessage(nullptr) {}
  ~UMessage() override;
  explicit PROTOBUF_CONSTEXPR UMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UMessage(const UMessage& from);
  UMessage(UMessage&& from) noexcept
    : UMessage() {
    *this = ::std::move(from);
  }

  inline UMessage& operator=(const UMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline UMessage& operator=(UMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const UMessage* internal_default_instance() {
    return reinterpret_cast<const UMessage*>(
               &_UMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UMessage& a, UMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(UMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UMessage& from) {
    UMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "uprotocol.v1.UMessage";
  }
  protected:
  explicit UMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 1,
    kAttributesFieldNumber = 2,
    kPayloadFieldNumber = 3,
  };
  // .uprotocol.v1.UUri source = 1;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const ::uprotocol::v1::UUri& source() const;
  PROTOBUF_NODISCARD ::uprotocol::v1::UUri* release_source();
  ::uprotocol::v1::UUri* mutable_source();
  void set_allocated_source(::uprotocol::v1::UUri* source);
  private:
  const ::uprotocol::v1::UUri& _internal_source() const;
  ::uprotocol::v1::UUri* _internal_mutable_source();
  public:
  void unsafe_arena_set_allocated_source(
      ::uprotocol::v1::UUri* source);
  ::uprotocol::v1::UUri* unsafe_arena_release_source();

  // .uprotocol.v1.UAttributes attributes = 2;
  bool has_attributes() const;
  private:
  bool _internal_has_attributes() const;
  public:
  void clear_attributes();
  const ::uprotocol::v1::UAttributes& attributes() const;
  PROTOBUF_NODISCARD ::uprotocol::v1::UAttributes* release_attributes();
  ::uprotocol::v1::UAttributes* mutable_attributes();
  void set_allocated_attributes(::uprotocol::v1::UAttributes* attributes);
  private:
  const ::uprotocol::v1::UAttributes& _internal_attributes() const;
  ::uprotocol::v1::UAttributes* _internal_mutable_attributes();
  public:
  void unsafe_arena_set_allocated_attributes(
      ::uprotocol::v1::UAttributes* attributes);
  ::uprotocol::v1::UAttributes* unsafe_arena_release_attributes();

  // .uprotocol.v1.UPayload payload = 3;
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const ::uprotocol::v1::UPayload& payload() const;
  PROTOBUF_NODISCARD ::uprotocol::v1::UPayload* release_payload();
  ::uprotocol::v1::UPayload* mutable_payload();
  void set_allocated_payload(::uprotocol::v1::UPayload* payload);
  private:
  const ::uprotocol::v1::UPayload& _internal_payload() const;
  ::uprotocol::v1::UPayload* _internal_mutable_payload();
  public:
  void unsafe_arena_set_allocated_payload(
      ::uprotocol::v1::UPayload* payload);
  ::uprotocol::v1::UPayload* unsafe_arena_release_payload();

  // @@protoc_insertion_point(class_scope:uprotocol.v1.UMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uprotocol::v1::UUri* source_;
    ::uprotocol::v1::UAttributes* attributes_;
    ::uprotocol::v1::UPayload* payload_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_umessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UMessage

// .uprotocol.v1.UUri source = 1;
inline bool UMessage::_internal_has_source() const {
  return this != internal_default_instance() && _impl_.source_ != nullptr;
}
inline bool UMessage::has_source() const {
  return _internal_has_source();
}
inline const ::uprotocol::v1::UUri& UMessage::_internal_source() const {
  const ::uprotocol::v1::UUri* p = _impl_.source_;
  return p != nullptr ? *p : reinterpret_cast<const ::uprotocol::v1::UUri&>(
      ::uprotocol::v1::_UUri_default_instance_);
}
inline const ::uprotocol::v1::UUri& UMessage::source() const {
  // @@protoc_insertion_point(field_get:uprotocol.v1.UMessage.source)
  return _internal_source();
}
inline void UMessage::unsafe_arena_set_allocated_source(
    ::uprotocol::v1::UUri* source) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.source_);
  }
  _impl_.source_ = source;
  if (source) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:uprotocol.v1.UMessage.source)
}
inline ::uprotocol::v1::UUri* UMessage::release_source() {
  
  ::uprotocol::v1::UUri* temp = _impl_.source_;
  _impl_.source_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::uprotocol::v1::UUri* UMessage::unsafe_arena_release_source() {
  // @@protoc_insertion_point(field_release:uprotocol.v1.UMessage.source)
  
  ::uprotocol::v1::UUri* temp = _impl_.source_;
  _impl_.source_ = nullptr;
  return temp;
}
inline ::uprotocol::v1::UUri* UMessage::_internal_mutable_source() {
  
  if (_impl_.source_ == nullptr) {
    auto* p = CreateMaybeMessage<::uprotocol::v1::UUri>(GetArenaForAllocation());
    _impl_.source_ = p;
  }
  return _impl_.source_;
}
inline ::uprotocol::v1::UUri* UMessage::mutable_source() {
  ::uprotocol::v1::UUri* _msg = _internal_mutable_source();
  // @@protoc_insertion_point(field_mutable:uprotocol.v1.UMessage.source)
  return _msg;
}
inline void UMessage::set_allocated_source(::uprotocol::v1::UUri* source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.source_);
  }
  if (source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source));
    if (message_arena != submessage_arena) {
      source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.source_ = source;
  // @@protoc_insertion_point(field_set_allocated:uprotocol.v1.UMessage.source)
}

// .uprotocol.v1.UAttributes attributes = 2;
inline bool UMessage::_internal_has_attributes() const {
  return this != internal_default_instance() && _impl_.attributes_ != nullptr;
}
inline bool UMessage::has_attributes() const {
  return _internal_has_attributes();
}
inline const ::uprotocol::v1::UAttributes& UMessage::_internal_attributes() const {
  const ::uprotocol::v1::UAttributes* p = _impl_.attributes_;
  return p != nullptr ? *p : reinterpret_cast<const ::uprotocol::v1::UAttributes&>(
      ::uprotocol::v1::_UAttributes_default_instance_);
}
inline const ::uprotocol::v1::UAttributes& UMessage::attributes() const {
  // @@protoc_insertion_point(field_get:uprotocol.v1.UMessage.attributes)
  return _internal_attributes();
}
inline void UMessage::unsafe_arena_set_allocated_attributes(
    ::uprotocol::v1::UAttributes* attributes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attributes_);
  }
  _impl_.attributes_ = attributes;
  if (attributes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:uprotocol.v1.UMessage.attributes)
}
inline ::uprotocol::v1::UAttributes* UMessage::release_attributes() {
  
  ::uprotocol::v1::UAttributes* temp = _impl_.attributes_;
  _impl_.attributes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::uprotocol::v1::UAttributes* UMessage::unsafe_arena_release_attributes() {
  // @@protoc_insertion_point(field_release:uprotocol.v1.UMessage.attributes)
  
  ::uprotocol::v1::UAttributes* temp = _impl_.attributes_;
  _impl_.attributes_ = nullptr;
  return temp;
}
inline ::uprotocol::v1::UAttributes* UMessage::_internal_mutable_attributes() {
  
  if (_impl_.attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::uprotocol::v1::UAttributes>(GetArenaForAllocation());
    _impl_.attributes_ = p;
  }
  return _impl_.attributes_;
}
inline ::uprotocol::v1::UAttributes* UMessage::mutable_attributes() {
  ::uprotocol::v1::UAttributes* _msg = _internal_mutable_attributes();
  // @@protoc_insertion_point(field_mutable:uprotocol.v1.UMessage.attributes)
  return _msg;
}
inline void UMessage::set_allocated_attributes(::uprotocol::v1::UAttributes* attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attributes_);
  }
  if (attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attributes));
    if (message_arena != submessage_arena) {
      attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attributes, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.attributes_ = attributes;
  // @@protoc_insertion_point(field_set_allocated:uprotocol.v1.UMessage.attributes)
}

// .uprotocol.v1.UPayload payload = 3;
inline bool UMessage::_internal_has_payload() const {
  return this != internal_default_instance() && _impl_.payload_ != nullptr;
}
inline bool UMessage::has_payload() const {
  return _internal_has_payload();
}
inline const ::uprotocol::v1::UPayload& UMessage::_internal_payload() const {
  const ::uprotocol::v1::UPayload* p = _impl_.payload_;
  return p != nullptr ? *p : reinterpret_cast<const ::uprotocol::v1::UPayload&>(
      ::uprotocol::v1::_UPayload_default_instance_);
}
inline const ::uprotocol::v1::UPayload& UMessage::payload() const {
  // @@protoc_insertion_point(field_get:uprotocol.v1.UMessage.payload)
  return _internal_payload();
}
inline void UMessage::unsafe_arena_set_allocated_payload(
    ::uprotocol::v1::UPayload* payload) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.payload_);
  }
  _impl_.payload_ = payload;
  if (payload) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:uprotocol.v1.UMessage.payload)
}
inline ::uprotocol::v1::UPayload* UMessage::release_payload() {
  
  ::uprotocol::v1::UPayload* temp = _impl_.payload_;
  _impl_.payload_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::uprotocol::v1::UPayload* UMessage::unsafe_arena_release_payload() {
  // @@protoc_insertion_point(field_release:uprotocol.v1.UMessage.payload)
  
  ::uprotocol::v1::UPayload* temp = _impl_.payload_;
  _impl_.payload_ = nullptr;
  return temp;
}
inline ::uprotocol::v1::UPayload* UMessage::_internal_mutable_payload() {
  
  if (_impl_.payload_ == nullptr) {
    auto* p = CreateMaybeMessage<::uprotocol::v1::UPayload>(GetArenaForAllocation());
    _impl_.payload_ = p;
  }
  return _impl_.payload_;
}
inline ::uprotocol::v1::UPayload* UMessage::mutable_payload() {
  ::uprotocol::v1::UPayload* _msg = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:uprotocol.v1.UMessage.payload)
  return _msg;
}
inline void UMessage::set_allocated_payload(::uprotocol::v1::UPayload* payload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.payload_);
  }
  if (payload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload));
    if (message_arena != submessage_arena) {
      payload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payload, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.payload_ = payload;
  // @@protoc_insertion_point(field_set_allocated:uprotocol.v1.UMessage.payload)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace uprotocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_umessage_2eproto
