// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: umessage.proto

#include "umessage.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace uprotocol {
namespace v1 {
PROTOBUF_CONSTEXPR UMessage::UMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.source_)*/nullptr
  , /*decltype(_impl_.attributes_)*/nullptr
  , /*decltype(_impl_.payload_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UMessageDefaultTypeInternal() {}
  union {
    UMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UMessageDefaultTypeInternal _UMessage_default_instance_;
}  // namespace v1
}  // namespace uprotocol
static ::_pb::Metadata file_level_metadata_umessage_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_umessage_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_umessage_2eproto = nullptr;

const uint32_t TableStruct_umessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uprotocol::v1::UMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::uprotocol::v1::UMessage, _impl_.source_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::v1::UMessage, _impl_.attributes_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::v1::UMessage, _impl_.payload_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::uprotocol::v1::UMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::uprotocol::v1::_UMessage_default_instance_._instance,
};

const char descriptor_table_protodef_umessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016umessage.proto\022\014uprotocol.v1\032\021uattribu"
  "tes.proto\032\016upayload.proto\032\turi.proto\"\206\001\n"
  "\010UMessage\022\"\n\006source\030\001 \001(\0132\022.uprotocol.v1"
  ".UUri\022-\n\nattributes\030\002 \001(\0132\031.uprotocol.v1"
  ".UAttributes\022\'\n\007payload\030\003 \001(\0132\026.uprotoco"
  "l.v1.UPayloadB+\n\030org.eclipse.uprotocol.v"
  "1B\rUMessageProtoP\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_umessage_2eproto_deps[3] = {
  &::descriptor_table_uattributes_2eproto,
  &::descriptor_table_upayload_2eproto,
  &::descriptor_table_uri_2eproto,
};
static ::_pbi::once_flag descriptor_table_umessage_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_umessage_2eproto = {
    false, false, 266, descriptor_table_protodef_umessage_2eproto,
    "umessage.proto",
    &descriptor_table_umessage_2eproto_once, descriptor_table_umessage_2eproto_deps, 3, 1,
    schemas, file_default_instances, TableStruct_umessage_2eproto::offsets,
    file_level_metadata_umessage_2eproto, file_level_enum_descriptors_umessage_2eproto,
    file_level_service_descriptors_umessage_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_umessage_2eproto_getter() {
  return &descriptor_table_umessage_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_umessage_2eproto(&descriptor_table_umessage_2eproto);
namespace uprotocol {
namespace v1 {

// ===================================================================

class UMessage::_Internal {
 public:
  static const ::uprotocol::v1::UUri& source(const UMessage* msg);
  static const ::uprotocol::v1::UAttributes& attributes(const UMessage* msg);
  static const ::uprotocol::v1::UPayload& payload(const UMessage* msg);
};

const ::uprotocol::v1::UUri&
UMessage::_Internal::source(const UMessage* msg) {
  return *msg->_impl_.source_;
}
const ::uprotocol::v1::UAttributes&
UMessage::_Internal::attributes(const UMessage* msg) {
  return *msg->_impl_.attributes_;
}
const ::uprotocol::v1::UPayload&
UMessage::_Internal::payload(const UMessage* msg) {
  return *msg->_impl_.payload_;
}
void UMessage::clear_source() {
  if (GetArenaForAllocation() == nullptr && _impl_.source_ != nullptr) {
    delete _impl_.source_;
  }
  _impl_.source_ = nullptr;
}
void UMessage::clear_attributes() {
  if (GetArenaForAllocation() == nullptr && _impl_.attributes_ != nullptr) {
    delete _impl_.attributes_;
  }
  _impl_.attributes_ = nullptr;
}
void UMessage::clear_payload() {
  if (GetArenaForAllocation() == nullptr && _impl_.payload_ != nullptr) {
    delete _impl_.payload_;
  }
  _impl_.payload_ = nullptr;
}
UMessage::UMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:uprotocol.v1.UMessage)
}
UMessage::UMessage(const UMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.source_){nullptr}
    , decltype(_impl_.attributes_){nullptr}
    , decltype(_impl_.payload_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_source()) {
    _this->_impl_.source_ = new ::uprotocol::v1::UUri(*from._impl_.source_);
  }
  if (from._internal_has_attributes()) {
    _this->_impl_.attributes_ = new ::uprotocol::v1::UAttributes(*from._impl_.attributes_);
  }
  if (from._internal_has_payload()) {
    _this->_impl_.payload_ = new ::uprotocol::v1::UPayload(*from._impl_.payload_);
  }
  // @@protoc_insertion_point(copy_constructor:uprotocol.v1.UMessage)
}

inline void UMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.source_){nullptr}
    , decltype(_impl_.attributes_){nullptr}
    , decltype(_impl_.payload_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UMessage::~UMessage() {
  // @@protoc_insertion_point(destructor:uprotocol.v1.UMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.source_;
  if (this != internal_default_instance()) delete _impl_.attributes_;
  if (this != internal_default_instance()) delete _impl_.payload_;
}

void UMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:uprotocol.v1.UMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.source_ != nullptr) {
    delete _impl_.source_;
  }
  _impl_.source_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.attributes_ != nullptr) {
    delete _impl_.attributes_;
  }
  _impl_.attributes_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.payload_ != nullptr) {
    delete _impl_.payload_;
  }
  _impl_.payload_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .uprotocol.v1.UUri source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_source(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .uprotocol.v1.UAttributes attributes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_attributes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .uprotocol.v1.UPayload payload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_payload(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uprotocol.v1.UMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .uprotocol.v1.UUri source = 1;
  if (this->_internal_has_source()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::source(this),
        _Internal::source(this).GetCachedSize(), target, stream);
  }

  // .uprotocol.v1.UAttributes attributes = 2;
  if (this->_internal_has_attributes()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::attributes(this),
        _Internal::attributes(this).GetCachedSize(), target, stream);
  }

  // .uprotocol.v1.UPayload payload = 3;
  if (this->_internal_has_payload()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::payload(this),
        _Internal::payload(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uprotocol.v1.UMessage)
  return target;
}

size_t UMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uprotocol.v1.UMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .uprotocol.v1.UUri source = 1;
  if (this->_internal_has_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.source_);
  }

  // .uprotocol.v1.UAttributes attributes = 2;
  if (this->_internal_has_attributes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.attributes_);
  }

  // .uprotocol.v1.UPayload payload = 3;
  if (this->_internal_has_payload()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.payload_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UMessage::GetClassData() const { return &_class_data_; }


void UMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UMessage*>(&to_msg);
  auto& from = static_cast<const UMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:uprotocol.v1.UMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_source()) {
    _this->_internal_mutable_source()->::uprotocol::v1::UUri::MergeFrom(
        from._internal_source());
  }
  if (from._internal_has_attributes()) {
    _this->_internal_mutable_attributes()->::uprotocol::v1::UAttributes::MergeFrom(
        from._internal_attributes());
  }
  if (from._internal_has_payload()) {
    _this->_internal_mutable_payload()->::uprotocol::v1::UPayload::MergeFrom(
        from._internal_payload());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UMessage::CopyFrom(const UMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uprotocol.v1.UMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UMessage::IsInitialized() const {
  return true;
}

void UMessage::InternalSwap(UMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UMessage, _impl_.payload_)
      + sizeof(UMessage::_impl_.payload_)
      - PROTOBUF_FIELD_OFFSET(UMessage, _impl_.source_)>(
          reinterpret_cast<char*>(&_impl_.source_),
          reinterpret_cast<char*>(&other->_impl_.source_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_umessage_2eproto_getter, &descriptor_table_umessage_2eproto_once,
      file_level_metadata_umessage_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace uprotocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::uprotocol::v1::UMessage*
Arena::CreateMaybeMessage< ::uprotocol::v1::UMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uprotocol::v1::UMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
