// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_file_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_file_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_file_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_file_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_file_2eproto;
namespace uprotocol {
namespace v1 {
class Checksum;
struct ChecksumDefaultTypeInternal;
extern ChecksumDefaultTypeInternal _Checksum_default_instance_;
class File;
struct FileDefaultTypeInternal;
extern FileDefaultTypeInternal _File_default_instance_;
class FileBatch;
struct FileBatchDefaultTypeInternal;
extern FileBatchDefaultTypeInternal _FileBatch_default_instance_;
}  // namespace v1
}  // namespace uprotocol
PROTOBUF_NAMESPACE_OPEN
template<> ::uprotocol::v1::Checksum* Arena::CreateMaybeMessage<::uprotocol::v1::Checksum>(Arena*);
template<> ::uprotocol::v1::File* Arena::CreateMaybeMessage<::uprotocol::v1::File>(Arena*);
template<> ::uprotocol::v1::FileBatch* Arena::CreateMaybeMessage<::uprotocol::v1::FileBatch>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace uprotocol {
namespace v1 {

enum ChecksumType : int {
  CHECKSUM_TYPE_UNSPECIFIED = 0,
  CHECKSUM_TYPE_MD5 = 1,
  CHECKSUM_TYPE_SHA1 = 2,
  ChecksumType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ChecksumType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ChecksumType_IsValid(int value);
constexpr ChecksumType ChecksumType_MIN = CHECKSUM_TYPE_UNSPECIFIED;
constexpr ChecksumType ChecksumType_MAX = CHECKSUM_TYPE_SHA1;
constexpr int ChecksumType_ARRAYSIZE = ChecksumType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChecksumType_descriptor();
template<typename T>
inline const std::string& ChecksumType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChecksumType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChecksumType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChecksumType_descriptor(), enum_t_value);
}
inline bool ChecksumType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChecksumType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChecksumType>(
    ChecksumType_descriptor(), name, value);
}
// ===================================================================

class File final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:uprotocol.v1.File) */ {
 public:
  inline File() : File(nullptr) {}
  ~File() override;
  explicit PROTOBUF_CONSTEXPR File(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  File(const File& from);
  File(File&& from) noexcept
    : File() {
    *this = ::std::move(from);
  }

  inline File& operator=(const File& from) {
    CopyFrom(from);
    return *this;
  }
  inline File& operator=(File&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const File& default_instance() {
    return *internal_default_instance();
  }
  static inline const File* internal_default_instance() {
    return reinterpret_cast<const File*>(
               &_File_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(File& a, File& b) {
    a.Swap(&b);
  }
  inline void Swap(File* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(File* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  File* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<File>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const File& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const File& from) {
    File::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(File* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "uprotocol.v1.File";
  }
  protected:
  explicit File(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kChecksumFieldNumber = 3,
    kSizeFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .uprotocol.v1.Checksum checksum = 3;
  bool has_checksum() const;
  private:
  bool _internal_has_checksum() const;
  public:
  void clear_checksum();
  const ::uprotocol::v1::Checksum& checksum() const;
  PROTOBUF_NODISCARD ::uprotocol::v1::Checksum* release_checksum();
  ::uprotocol::v1::Checksum* mutable_checksum();
  void set_allocated_checksum(::uprotocol::v1::Checksum* checksum);
  private:
  const ::uprotocol::v1::Checksum& _internal_checksum() const;
  ::uprotocol::v1::Checksum* _internal_mutable_checksum();
  public:
  void unsafe_arena_set_allocated_checksum(
      ::uprotocol::v1::Checksum* checksum);
  ::uprotocol::v1::Checksum* unsafe_arena_release_checksum();

  // optional uint64 size = 2;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  uint64_t size() const;
  void set_size(uint64_t value);
  private:
  uint64_t _internal_size() const;
  void _internal_set_size(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:uprotocol.v1.File)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::uprotocol::v1::Checksum* checksum_;
    uint64_t size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_file_2eproto;
};
// -------------------------------------------------------------------

class FileBatch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:uprotocol.v1.FileBatch) */ {
 public:
  inline FileBatch() : FileBatch(nullptr) {}
  ~FileBatch() override;
  explicit PROTOBUF_CONSTEXPR FileBatch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileBatch(const FileBatch& from);
  FileBatch(FileBatch&& from) noexcept
    : FileBatch() {
    *this = ::std::move(from);
  }

  inline FileBatch& operator=(const FileBatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileBatch& operator=(FileBatch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileBatch& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileBatch* internal_default_instance() {
    return reinterpret_cast<const FileBatch*>(
               &_FileBatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FileBatch& a, FileBatch& b) {
    a.Swap(&b);
  }
  inline void Swap(FileBatch* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileBatch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileBatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileBatch>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileBatch& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FileBatch& from) {
    FileBatch::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileBatch* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "uprotocol.v1.FileBatch";
  }
  protected:
  explicit FileBatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilesFieldNumber = 1,
  };
  // repeated .uprotocol.v1.File files = 1;
  int files_size() const;
  private:
  int _internal_files_size() const;
  public:
  void clear_files();
  ::uprotocol::v1::File* mutable_files(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::uprotocol::v1::File >*
      mutable_files();
  private:
  const ::uprotocol::v1::File& _internal_files(int index) const;
  ::uprotocol::v1::File* _internal_add_files();
  public:
  const ::uprotocol::v1::File& files(int index) const;
  ::uprotocol::v1::File* add_files();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::uprotocol::v1::File >&
      files() const;

  // @@protoc_insertion_point(class_scope:uprotocol.v1.FileBatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::uprotocol::v1::File > files_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_file_2eproto;
};
// -------------------------------------------------------------------

class Checksum final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:uprotocol.v1.Checksum) */ {
 public:
  inline Checksum() : Checksum(nullptr) {}
  ~Checksum() override;
  explicit PROTOBUF_CONSTEXPR Checksum(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Checksum(const Checksum& from);
  Checksum(Checksum&& from) noexcept
    : Checksum() {
    *this = ::std::move(from);
  }

  inline Checksum& operator=(const Checksum& from) {
    CopyFrom(from);
    return *this;
  }
  inline Checksum& operator=(Checksum&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Checksum& default_instance() {
    return *internal_default_instance();
  }
  static inline const Checksum* internal_default_instance() {
    return reinterpret_cast<const Checksum*>(
               &_Checksum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Checksum& a, Checksum& b) {
    a.Swap(&b);
  }
  inline void Swap(Checksum* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Checksum* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Checksum* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Checksum>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Checksum& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Checksum& from) {
    Checksum::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Checksum* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "uprotocol.v1.Checksum";
  }
  protected:
  explicit Checksum(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .uprotocol.v1.ChecksumType type = 1;
  void clear_type();
  ::uprotocol::v1::ChecksumType type() const;
  void set_type(::uprotocol::v1::ChecksumType value);
  private:
  ::uprotocol::v1::ChecksumType _internal_type() const;
  void _internal_set_type(::uprotocol::v1::ChecksumType value);
  public:

  // @@protoc_insertion_point(class_scope:uprotocol.v1.Checksum)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_file_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// File

// string name = 1;
inline void File::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& File::name() const {
  // @@protoc_insertion_point(field_get:uprotocol.v1.File.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void File::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:uprotocol.v1.File.name)
}
inline std::string* File::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:uprotocol.v1.File.name)
  return _s;
}
inline const std::string& File::_internal_name() const {
  return _impl_.name_.Get();
}
inline void File::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* File::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* File::release_name() {
  // @@protoc_insertion_point(field_release:uprotocol.v1.File.name)
  return _impl_.name_.Release();
}
inline void File::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:uprotocol.v1.File.name)
}

// optional uint64 size = 2;
inline bool File::_internal_has_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool File::has_size() const {
  return _internal_has_size();
}
inline void File::clear_size() {
  _impl_.size_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t File::_internal_size() const {
  return _impl_.size_;
}
inline uint64_t File::size() const {
  // @@protoc_insertion_point(field_get:uprotocol.v1.File.size)
  return _internal_size();
}
inline void File::_internal_set_size(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.size_ = value;
}
inline void File::set_size(uint64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:uprotocol.v1.File.size)
}

// .uprotocol.v1.Checksum checksum = 3;
inline bool File::_internal_has_checksum() const {
  return this != internal_default_instance() && _impl_.checksum_ != nullptr;
}
inline bool File::has_checksum() const {
  return _internal_has_checksum();
}
inline void File::clear_checksum() {
  if (GetArenaForAllocation() == nullptr && _impl_.checksum_ != nullptr) {
    delete _impl_.checksum_;
  }
  _impl_.checksum_ = nullptr;
}
inline const ::uprotocol::v1::Checksum& File::_internal_checksum() const {
  const ::uprotocol::v1::Checksum* p = _impl_.checksum_;
  return p != nullptr ? *p : reinterpret_cast<const ::uprotocol::v1::Checksum&>(
      ::uprotocol::v1::_Checksum_default_instance_);
}
inline const ::uprotocol::v1::Checksum& File::checksum() const {
  // @@protoc_insertion_point(field_get:uprotocol.v1.File.checksum)
  return _internal_checksum();
}
inline void File::unsafe_arena_set_allocated_checksum(
    ::uprotocol::v1::Checksum* checksum) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.checksum_);
  }
  _impl_.checksum_ = checksum;
  if (checksum) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:uprotocol.v1.File.checksum)
}
inline ::uprotocol::v1::Checksum* File::release_checksum() {
  
  ::uprotocol::v1::Checksum* temp = _impl_.checksum_;
  _impl_.checksum_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::uprotocol::v1::Checksum* File::unsafe_arena_release_checksum() {
  // @@protoc_insertion_point(field_release:uprotocol.v1.File.checksum)
  
  ::uprotocol::v1::Checksum* temp = _impl_.checksum_;
  _impl_.checksum_ = nullptr;
  return temp;
}
inline ::uprotocol::v1::Checksum* File::_internal_mutable_checksum() {
  
  if (_impl_.checksum_ == nullptr) {
    auto* p = CreateMaybeMessage<::uprotocol::v1::Checksum>(GetArenaForAllocation());
    _impl_.checksum_ = p;
  }
  return _impl_.checksum_;
}
inline ::uprotocol::v1::Checksum* File::mutable_checksum() {
  ::uprotocol::v1::Checksum* _msg = _internal_mutable_checksum();
  // @@protoc_insertion_point(field_mutable:uprotocol.v1.File.checksum)
  return _msg;
}
inline void File::set_allocated_checksum(::uprotocol::v1::Checksum* checksum) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.checksum_;
  }
  if (checksum) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(checksum);
    if (message_arena != submessage_arena) {
      checksum = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, checksum, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.checksum_ = checksum;
  // @@protoc_insertion_point(field_set_allocated:uprotocol.v1.File.checksum)
}

// -------------------------------------------------------------------

// FileBatch

// repeated .uprotocol.v1.File files = 1;
inline int FileBatch::_internal_files_size() const {
  return _impl_.files_.size();
}
inline int FileBatch::files_size() const {
  return _internal_files_size();
}
inline void FileBatch::clear_files() {
  _impl_.files_.Clear();
}
inline ::uprotocol::v1::File* FileBatch::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:uprotocol.v1.FileBatch.files)
  return _impl_.files_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::uprotocol::v1::File >*
FileBatch::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:uprotocol.v1.FileBatch.files)
  return &_impl_.files_;
}
inline const ::uprotocol::v1::File& FileBatch::_internal_files(int index) const {
  return _impl_.files_.Get(index);
}
inline const ::uprotocol::v1::File& FileBatch::files(int index) const {
  // @@protoc_insertion_point(field_get:uprotocol.v1.FileBatch.files)
  return _internal_files(index);
}
inline ::uprotocol::v1::File* FileBatch::_internal_add_files() {
  return _impl_.files_.Add();
}
inline ::uprotocol::v1::File* FileBatch::add_files() {
  ::uprotocol::v1::File* _add = _internal_add_files();
  // @@protoc_insertion_point(field_add:uprotocol.v1.FileBatch.files)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::uprotocol::v1::File >&
FileBatch::files() const {
  // @@protoc_insertion_point(field_list:uprotocol.v1.FileBatch.files)
  return _impl_.files_;
}

// -------------------------------------------------------------------

// Checksum

// .uprotocol.v1.ChecksumType type = 1;
inline void Checksum::clear_type() {
  _impl_.type_ = 0;
}
inline ::uprotocol::v1::ChecksumType Checksum::_internal_type() const {
  return static_cast< ::uprotocol::v1::ChecksumType >(_impl_.type_);
}
inline ::uprotocol::v1::ChecksumType Checksum::type() const {
  // @@protoc_insertion_point(field_get:uprotocol.v1.Checksum.type)
  return _internal_type();
}
inline void Checksum::_internal_set_type(::uprotocol::v1::ChecksumType value) {
  
  _impl_.type_ = value;
}
inline void Checksum::set_type(::uprotocol::v1::ChecksumType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:uprotocol.v1.Checksum.type)
}

// bytes value = 2;
inline void Checksum::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& Checksum::value() const {
  // @@protoc_insertion_point(field_get:uprotocol.v1.Checksum.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Checksum::set_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.value_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:uprotocol.v1.Checksum.value)
}
inline std::string* Checksum::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:uprotocol.v1.Checksum.value)
  return _s;
}
inline const std::string& Checksum::_internal_value() const {
  return _impl_.value_.Get();
}
inline void Checksum::_internal_set_value(const std::string& value) {
  
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* Checksum::_internal_mutable_value() {
  
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* Checksum::release_value() {
  // @@protoc_insertion_point(field_release:uprotocol.v1.Checksum.value)
  return _impl_.value_.Release();
}
inline void Checksum::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:uprotocol.v1.Checksum.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace uprotocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::uprotocol::v1::ChecksumType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::uprotocol::v1::ChecksumType>() {
  return ::uprotocol::v1::ChecksumType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_file_2eproto
