// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/usubscription/v3/usubscription.proto

#include "core/usubscription/v3/usubscription.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace uprotocol {
namespace core {
namespace usubscription {
namespace v3 {
PROTOBUF_CONSTEXPR SubscribeAttributes::SubscribeAttributes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.details_)*/{}
  , /*decltype(_impl_.expire_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubscribeAttributesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeAttributesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeAttributesDefaultTypeInternal() {}
  union {
    SubscribeAttributes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeAttributesDefaultTypeInternal _SubscribeAttributes_default_instance_;
PROTOBUF_CONSTEXPR SubscriberInfo::SubscriberInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.details_)*/{}
  , /*decltype(_impl_.uri_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubscriberInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscriberInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscriberInfoDefaultTypeInternal() {}
  union {
    SubscriberInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscriberInfoDefaultTypeInternal _SubscriberInfo_default_instance_;
PROTOBUF_CONSTEXPR SubscriptionStatus::SubscriptionStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_.code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubscriptionStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscriptionStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscriptionStatusDefaultTypeInternal() {}
  union {
    SubscriptionStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscriptionStatusDefaultTypeInternal _SubscriptionStatus_default_instance_;
PROTOBUF_CONSTEXPR EventDeliveryConfig_AttributesEntry_DoNotUse::EventDeliveryConfig_AttributesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct EventDeliveryConfig_AttributesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventDeliveryConfig_AttributesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventDeliveryConfig_AttributesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    EventDeliveryConfig_AttributesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventDeliveryConfig_AttributesEntry_DoNotUseDefaultTypeInternal _EventDeliveryConfig_AttributesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR EventDeliveryConfig::EventDeliveryConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.attributes_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EventDeliveryConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventDeliveryConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventDeliveryConfigDefaultTypeInternal() {}
  union {
    EventDeliveryConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventDeliveryConfigDefaultTypeInternal _EventDeliveryConfig_default_instance_;
PROTOBUF_CONSTEXPR SubscriptionRequest::SubscriptionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.topic_)*/nullptr
  , /*decltype(_impl_.subscriber_)*/nullptr
  , /*decltype(_impl_.attributes_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubscriptionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscriptionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscriptionRequestDefaultTypeInternal() {}
  union {
    SubscriptionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscriptionRequestDefaultTypeInternal _SubscriptionRequest_default_instance_;
PROTOBUF_CONSTEXPR SubscriptionResponse::SubscriptionResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.config_)*/nullptr
  , /*decltype(_impl_.topic_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubscriptionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscriptionResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscriptionResponseDefaultTypeInternal() {}
  union {
    SubscriptionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscriptionResponseDefaultTypeInternal _SubscriptionResponse_default_instance_;
PROTOBUF_CONSTEXPR UnsubscribeRequest::UnsubscribeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.topic_)*/nullptr
  , /*decltype(_impl_.subscriber_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UnsubscribeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnsubscribeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnsubscribeRequestDefaultTypeInternal() {}
  union {
    UnsubscribeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnsubscribeRequestDefaultTypeInternal _UnsubscribeRequest_default_instance_;
PROTOBUF_CONSTEXPR FetchSubscribersRequest::FetchSubscribersRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.topic_)*/nullptr
  , /*decltype(_impl_.offset_)*/0u} {}
struct FetchSubscribersRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FetchSubscribersRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FetchSubscribersRequestDefaultTypeInternal() {}
  union {
    FetchSubscribersRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FetchSubscribersRequestDefaultTypeInternal _FetchSubscribersRequest_default_instance_;
PROTOBUF_CONSTEXPR FetchSubscribersResponse::FetchSubscribersResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.subscribers_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.has_more_records_)*/false} {}
struct FetchSubscribersResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FetchSubscribersResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FetchSubscribersResponseDefaultTypeInternal() {}
  union {
    FetchSubscribersResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FetchSubscribersResponseDefaultTypeInternal _FetchSubscribersResponse_default_instance_;
PROTOBUF_CONSTEXPR Subscription::Subscription(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.topic_)*/nullptr
  , /*decltype(_impl_.subscriber_)*/nullptr
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.attributes_)*/nullptr
  , /*decltype(_impl_.config_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubscriptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscriptionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscriptionDefaultTypeInternal() {}
  union {
    Subscription _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscriptionDefaultTypeInternal _Subscription_default_instance_;
PROTOBUF_CONSTEXPR FetchSubscriptionsRequest::FetchSubscriptionsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.offset_)*/0u
  , /*decltype(_impl_.request_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct FetchSubscriptionsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FetchSubscriptionsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FetchSubscriptionsRequestDefaultTypeInternal() {}
  union {
    FetchSubscriptionsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FetchSubscriptionsRequestDefaultTypeInternal _FetchSubscriptionsRequest_default_instance_;
PROTOBUF_CONSTEXPR FetchSubscriptionsResponse::FetchSubscriptionsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.subscriptions_)*/{}
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.has_more_records_)*/false} {}
struct FetchSubscriptionsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FetchSubscriptionsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FetchSubscriptionsResponseDefaultTypeInternal() {}
  union {
    FetchSubscriptionsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FetchSubscriptionsResponseDefaultTypeInternal _FetchSubscriptionsResponse_default_instance_;
PROTOBUF_CONSTEXPR NotificationsRequest::NotificationsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.topic_)*/nullptr
  , /*decltype(_impl_.subscriber_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NotificationsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NotificationsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NotificationsRequestDefaultTypeInternal() {}
  union {
    NotificationsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NotificationsRequestDefaultTypeInternal _NotificationsRequest_default_instance_;
PROTOBUF_CONSTEXPR CreateTopicRequest::CreateTopicRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.topic_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateTopicRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateTopicRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateTopicRequestDefaultTypeInternal() {}
  union {
    CreateTopicRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateTopicRequestDefaultTypeInternal _CreateTopicRequest_default_instance_;
PROTOBUF_CONSTEXPR DeprecateTopicRequest::DeprecateTopicRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.topic_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeprecateTopicRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeprecateTopicRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeprecateTopicRequestDefaultTypeInternal() {}
  union {
    DeprecateTopicRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeprecateTopicRequestDefaultTypeInternal _DeprecateTopicRequest_default_instance_;
PROTOBUF_CONSTEXPR Update::Update(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.topic_)*/nullptr
  , /*decltype(_impl_.subscriber_)*/nullptr
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.attributes_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateDefaultTypeInternal() {}
  union {
    Update _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateDefaultTypeInternal _Update_default_instance_;
PROTOBUF_CONSTEXPR SubscriptionChangeNotification::SubscriptionChangeNotification(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.resource_name_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SubscriptionChangeNotificationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscriptionChangeNotificationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscriptionChangeNotificationDefaultTypeInternal() {}
  union {
    SubscriptionChangeNotification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscriptionChangeNotificationDefaultTypeInternal _SubscriptionChangeNotification_default_instance_;
PROTOBUF_CONSTEXPR PassiveMode::PassiveMode(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.enable_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PassiveModeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PassiveModeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PassiveModeDefaultTypeInternal() {}
  union {
    PassiveMode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PassiveModeDefaultTypeInternal _PassiveMode_default_instance_;
PROTOBUF_CONSTEXPR ResetRequest_Reason::ResetRequest_Reason(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/0} {}
struct ResetRequest_ReasonDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResetRequest_ReasonDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResetRequest_ReasonDefaultTypeInternal() {}
  union {
    ResetRequest_Reason _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResetRequest_ReasonDefaultTypeInternal _ResetRequest_Reason_default_instance_;
PROTOBUF_CONSTEXPR ResetRequest::ResetRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.reason_)*/nullptr
  , /*decltype(_impl_.before_)*/nullptr} {}
struct ResetRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResetRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResetRequestDefaultTypeInternal() {}
  union {
    ResetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResetRequestDefaultTypeInternal _ResetRequest_default_instance_;
}  // namespace v3
}  // namespace usubscription
}  // namespace core
}  // namespace uprotocol
static ::_pb::Metadata file_level_metadata_core_2fusubscription_2fv3_2fusubscription_2eproto[21];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_core_2fusubscription_2fv3_2fusubscription_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_core_2fusubscription_2fv3_2fusubscription_2eproto = nullptr;

const uint32_t TableStruct_core_2fusubscription_2fv3_2fusubscription_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::SubscribeAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::SubscribeAttributes, _impl_.expire_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::SubscribeAttributes, _impl_.details_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::SubscriberInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::SubscriberInfo, _impl_.uri_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::SubscriberInfo, _impl_.details_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::SubscriptionStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::SubscriptionStatus, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::SubscriptionStatus, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::SubscriptionStatus, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::EventDeliveryConfig_AttributesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::EventDeliveryConfig_AttributesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::EventDeliveryConfig_AttributesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::EventDeliveryConfig_AttributesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::EventDeliveryConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::EventDeliveryConfig, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::EventDeliveryConfig, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::EventDeliveryConfig, _impl_.attributes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::SubscriptionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::SubscriptionRequest, _impl_.topic_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::SubscriptionRequest, _impl_.subscriber_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::SubscriptionRequest, _impl_.attributes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::SubscriptionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::SubscriptionResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::SubscriptionResponse, _impl_.config_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::SubscriptionResponse, _impl_.topic_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::UnsubscribeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::UnsubscribeRequest, _impl_.topic_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::UnsubscribeRequest, _impl_.subscriber_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::FetchSubscribersRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::FetchSubscribersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::FetchSubscribersRequest, _impl_.topic_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::FetchSubscribersRequest, _impl_.offset_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::FetchSubscribersResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::FetchSubscribersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::FetchSubscribersResponse, _impl_.subscribers_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::FetchSubscribersResponse, _impl_.has_more_records_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::FetchSubscribersResponse, _impl_.status_),
  ~0u,
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::Subscription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::Subscription, _impl_.topic_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::Subscription, _impl_.subscriber_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::Subscription, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::Subscription, _impl_.attributes_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::Subscription, _impl_.config_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::FetchSubscriptionsRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::FetchSubscriptionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::FetchSubscriptionsRequest, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::FetchSubscriptionsRequest, _impl_.offset_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::FetchSubscriptionsRequest, _impl_.request_),
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::FetchSubscriptionsResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::FetchSubscriptionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::FetchSubscriptionsResponse, _impl_.subscriptions_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::FetchSubscriptionsResponse, _impl_.has_more_records_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::FetchSubscriptionsResponse, _impl_.status_),
  ~0u,
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::NotificationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::NotificationsRequest, _impl_.topic_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::NotificationsRequest, _impl_.subscriber_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::CreateTopicRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::CreateTopicRequest, _impl_.topic_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::DeprecateTopicRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::DeprecateTopicRequest, _impl_.topic_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::Update, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::Update, _impl_.topic_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::Update, _impl_.subscriber_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::Update, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::Update, _impl_.attributes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::SubscriptionChangeNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::SubscriptionChangeNotification, _impl_.resource_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::PassiveMode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::PassiveMode, _impl_.enable_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::ResetRequest_Reason, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::ResetRequest_Reason, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::ResetRequest_Reason, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::ResetRequest_Reason, _impl_.message_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::ResetRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::ResetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::ResetRequest, _impl_.reason_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::core::usubscription::v3::ResetRequest, _impl_.before_),
  0,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::uprotocol::core::usubscription::v3::SubscribeAttributes)},
  { 8, -1, -1, sizeof(::uprotocol::core::usubscription::v3::SubscriberInfo)},
  { 16, -1, -1, sizeof(::uprotocol::core::usubscription::v3::SubscriptionStatus)},
  { 25, 33, -1, sizeof(::uprotocol::core::usubscription::v3::EventDeliveryConfig_AttributesEntry_DoNotUse)},
  { 35, -1, -1, sizeof(::uprotocol::core::usubscription::v3::EventDeliveryConfig)},
  { 44, -1, -1, sizeof(::uprotocol::core::usubscription::v3::SubscriptionRequest)},
  { 53, -1, -1, sizeof(::uprotocol::core::usubscription::v3::SubscriptionResponse)},
  { 62, -1, -1, sizeof(::uprotocol::core::usubscription::v3::UnsubscribeRequest)},
  { 70, 78, -1, sizeof(::uprotocol::core::usubscription::v3::FetchSubscribersRequest)},
  { 80, 89, -1, sizeof(::uprotocol::core::usubscription::v3::FetchSubscribersResponse)},
  { 92, -1, -1, sizeof(::uprotocol::core::usubscription::v3::Subscription)},
  { 103, 113, -1, sizeof(::uprotocol::core::usubscription::v3::FetchSubscriptionsRequest)},
  { 116, 125, -1, sizeof(::uprotocol::core::usubscription::v3::FetchSubscriptionsResponse)},
  { 128, -1, -1, sizeof(::uprotocol::core::usubscription::v3::NotificationsRequest)},
  { 136, -1, -1, sizeof(::uprotocol::core::usubscription::v3::CreateTopicRequest)},
  { 143, -1, -1, sizeof(::uprotocol::core::usubscription::v3::DeprecateTopicRequest)},
  { 150, -1, -1, sizeof(::uprotocol::core::usubscription::v3::Update)},
  { 160, -1, -1, sizeof(::uprotocol::core::usubscription::v3::SubscriptionChangeNotification)},
  { 167, -1, -1, sizeof(::uprotocol::core::usubscription::v3::PassiveMode)},
  { 174, 182, -1, sizeof(::uprotocol::core::usubscription::v3::ResetRequest_Reason)},
  { 184, 192, -1, sizeof(::uprotocol::core::usubscription::v3::ResetRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::uprotocol::core::usubscription::v3::_SubscribeAttributes_default_instance_._instance,
  &::uprotocol::core::usubscription::v3::_SubscriberInfo_default_instance_._instance,
  &::uprotocol::core::usubscription::v3::_SubscriptionStatus_default_instance_._instance,
  &::uprotocol::core::usubscription::v3::_EventDeliveryConfig_AttributesEntry_DoNotUse_default_instance_._instance,
  &::uprotocol::core::usubscription::v3::_EventDeliveryConfig_default_instance_._instance,
  &::uprotocol::core::usubscription::v3::_SubscriptionRequest_default_instance_._instance,
  &::uprotocol::core::usubscription::v3::_SubscriptionResponse_default_instance_._instance,
  &::uprotocol::core::usubscription::v3::_UnsubscribeRequest_default_instance_._instance,
  &::uprotocol::core::usubscription::v3::_FetchSubscribersRequest_default_instance_._instance,
  &::uprotocol::core::usubscription::v3::_FetchSubscribersResponse_default_instance_._instance,
  &::uprotocol::core::usubscription::v3::_Subscription_default_instance_._instance,
  &::uprotocol::core::usubscription::v3::_FetchSubscriptionsRequest_default_instance_._instance,
  &::uprotocol::core::usubscription::v3::_FetchSubscriptionsResponse_default_instance_._instance,
  &::uprotocol::core::usubscription::v3::_NotificationsRequest_default_instance_._instance,
  &::uprotocol::core::usubscription::v3::_CreateTopicRequest_default_instance_._instance,
  &::uprotocol::core::usubscription::v3::_DeprecateTopicRequest_default_instance_._instance,
  &::uprotocol::core::usubscription::v3::_Update_default_instance_._instance,
  &::uprotocol::core::usubscription::v3::_SubscriptionChangeNotification_default_instance_._instance,
  &::uprotocol::core::usubscription::v3::_PassiveMode_default_instance_._instance,
  &::uprotocol::core::usubscription::v3::_ResetRequest_Reason_default_instance_._instance,
  &::uprotocol::core::usubscription::v3::_ResetRequest_default_instance_._instance,
};

const char descriptor_table_protodef_core_2fusubscription_2fv3_2fusubscription_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n)core/usubscription/v3/usubscription.pr"
  "oto\022\037uprotocol.core.usubscription.v3\032\031go"
  "ogle/protobuf/any.proto\032\037google/protobuf"
  "/timestamp.proto\032\rustatus.proto\032\turi.pro"
  "to\032\027uprotocol_options.proto\"h\n\023Subscribe"
  "Attributes\022*\n\006expire\030\001 \001(\0132\032.google.prot"
  "obuf.Timestamp\022%\n\007details\030\002 \003(\0132\024.google"
  ".protobuf.Any\"X\n\016SubscriberInfo\022\037\n\003uri\030\001"
  " \001(\0132\022.uprotocol.v1.UUri\022%\n\007details\030\002 \003("
  "\0132\024.google.protobuf.Any\"\355\001\n\022Subscription"
  "Status\022H\n\005state\030\001 \001(\01629.uprotocol.core.u"
  "subscription.v3.SubscriptionStatus.State"
  "\022!\n\004code\030\002 \001(\0162\023.uprotocol.v1.UCode\022\017\n\007m"
  "essage\030\003 \001(\t\"Y\n\005State\022\020\n\014UNSUBSCRIBED\020\000\022"
  "\025\n\021SUBSCRIBE_PENDING\020\001\022\016\n\nSUBSCRIBED\020\002\022\027"
  "\n\023UNSUBSCRIBE_PENDING\020\003\"\322\001\n\023EventDeliver"
  "yConfig\022\n\n\002id\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\022X\n\natt"
  "ributes\030\003 \003(\0132D.uprotocol.core.usubscrip"
  "tion.v3.EventDeliveryConfig.AttributesEn"
  "try\032G\n\017AttributesEntry\022\013\n\003key\030\001 \001(\t\022#\n\005v"
  "alue\030\002 \001(\0132\024.google.protobuf.Any:\0028\001\"\307\001\n"
  "\023SubscriptionRequest\022!\n\005topic\030\001 \001(\0132\022.up"
  "rotocol.v1.UUri\022C\n\nsubscriber\030\002 \001(\0132/.up"
  "rotocol.core.usubscription.v3.Subscriber"
  "Info\022H\n\nattributes\030\003 \001(\01324.uprotocol.cor"
  "e.usubscription.v3.SubscribeAttributes\"\304"
  "\001\n\024SubscriptionResponse\022C\n\006status\030\001 \001(\0132"
  "3.uprotocol.core.usubscription.v3.Subscr"
  "iptionStatus\022D\n\006config\030\002 \001(\01324.uprotocol"
  ".core.usubscription.v3.EventDeliveryConf"
  "ig\022!\n\005topic\030\003 \001(\0132\022.uprotocol.v1.UUri\"|\n"
  "\022UnsubscribeRequest\022!\n\005topic\030\001 \001(\0132\022.upr"
  "otocol.v1.UUri\022C\n\nsubscriber\030\002 \001(\0132/.upr"
  "otocol.core.usubscription.v3.SubscriberI"
  "nfo\"\\\n\027FetchSubscribersRequest\022!\n\005topic\030"
  "\001 \001(\0132\022.uprotocol.v1.UUri\022\023\n\006offset\030\002 \001("
  "\rH\000\210\001\001B\t\n\007_offset\"\273\001\n\030FetchSubscribersRe"
  "sponse\022D\n\013subscribers\030\001 \003(\0132/.uprotocol."
  "core.usubscription.v3.SubscriberInfo\022\035\n\020"
  "has_more_records\030\002 \001(\010H\000\210\001\001\022%\n\006status\030\003 "
  "\001(\0132\025.uprotocol.v1.UStatusB\023\n\021_has_more_"
  "records\"\313\002\n\014Subscription\022!\n\005topic\030\001 \001(\0132"
  "\022.uprotocol.v1.UUri\022C\n\nsubscriber\030\002 \001(\0132"
  "/.uprotocol.core.usubscription.v3.Subscr"
  "iberInfo\022C\n\006status\030\003 \001(\01323.uprotocol.cor"
  "e.usubscription.v3.SubscriptionStatus\022H\n"
  "\nattributes\030\004 \001(\01324.uprotocol.core.usubs"
  "cription.v3.SubscribeAttributes\022D\n\006confi"
  "g\030\005 \001(\01324.uprotocol.core.usubscription.v"
  "3.EventDeliveryConfig\"\262\001\n\031FetchSubscript"
  "ionsRequest\022#\n\005topic\030\001 \001(\0132\022.uprotocol.v"
  "1.UUriH\000\022E\n\nsubscriber\030\002 \001(\0132/.uprotocol"
  ".core.usubscription.v3.SubscriberInfoH\000\022"
  "\023\n\006offset\030\003 \001(\rH\001\210\001\001B\t\n\007requestB\t\n\007_offs"
  "et\"\275\001\n\032FetchSubscriptionsResponse\022D\n\rsub"
  "scriptions\030\001 \003(\0132-.uprotocol.core.usubsc"
  "ription.v3.Subscription\022\035\n\020has_more_reco"
  "rds\030\002 \001(\010H\000\210\001\001\022%\n\006status\030\003 \001(\0132\025.uprotoc"
  "ol.v1.UStatusB\023\n\021_has_more_records\"~\n\024No"
  "tificationsRequest\022!\n\005topic\030\001 \001(\0132\022.upro"
  "tocol.v1.UUri\022C\n\nsubscriber\030\002 \001(\0132/.upro"
  "tocol.core.usubscription.v3.SubscriberIn"
  "fo\"7\n\022CreateTopicRequest\022!\n\005topic\030\001 \001(\0132"
  "\022.uprotocol.v1.UUri\":\n\025DeprecateTopicReq"
  "uest\022!\n\005topic\030\001 \001(\0132\022.uprotocol.v1.UUri\""
  "\237\002\n\006Update\022!\n\005topic\030\001 \001(\0132\022.uprotocol.v1"
  ".UUri\022C\n\nsubscriber\030\002 \001(\0132/.uprotocol.co"
  "re.usubscription.v3.SubscriberInfo\022C\n\006st"
  "atus\030\003 \001(\01323.uprotocol.core.usubscriptio"
  "n.v3.SubscriptionStatus\022H\n\nattributes\030\004 "
  "\001(\01324.uprotocol.core.usubscription.v3.Su"
  "bscribeAttributes\"\036\n\tResources\022\021\n\rsubscr"
  "iptions\020\000\"x\n\036SubscriptionChangeNotificat"
  "ion\022O\n\rresource_name\030\001 \001(\01621.uprotocol.c"
  "ore.usubscription.v3.Update.ResourcesB\005\202"
  "\316\030\001*:\005\340\307\030\350\007\"\035\n\013PassiveMode\022\016\n\006enable\030\001 \001"
  "(\010\"\326\002\n\014ResetRequest\022I\n\006reason\030\001 \001(\01324.up"
  "rotocol.core.usubscription.v3.ResetReque"
  "st.ReasonH\000\210\001\001\022/\n\006before\030\002 \001(\0132\032.google."
  "protobuf.TimestampH\001\210\001\001\032\263\001\n\006Reason\022G\n\004co"
  "de\030\001 \001(\01629.uprotocol.core.usubscription."
  "v3.ResetRequest.Reason.Code\022\024\n\007message\030\002"
  " \001(\tH\000\210\001\001\">\n\004Code\022\017\n\013UNSPECIFIED\020\000\022\021\n\rFA"
  "CTORY_RESET\020\001\022\022\n\016CORRUPTED_DATA\020\002B\n\n\010_me"
  "ssageB\t\n\007_reasonB\t\n\007_before2\271\010\n\ruSubscri"
  "ption\022~\n\tSubscribe\0224.uprotocol.core.usub"
  "scription.v3.SubscriptionRequest\0325.uprot"
  "ocol.core.usubscription.v3.SubscriptionR"
  "esponse\"\004\300\301\030\001\022_\n\013Unsubscribe\0223.uprotocol"
  ".core.usubscription.v3.UnsubscribeReques"
  "t\032\025.uprotocol.v1.UStatus\"\004\300\301\030\002\022\223\001\n\022Fetch"
  "Subscriptions\022:.uprotocol.core.usubscrip"
  "tion.v3.FetchSubscriptionsRequest\032;.upro"
  "tocol.core.usubscription.v3.FetchSubscri"
  "ptionsResponse\"\004\300\301\030\003\022_\n\013CreateTopic\0223.up"
  "rotocol.core.usubscription.v3.CreateTopi"
  "cRequest\032\025.uprotocol.v1.UStatus\"\004\300\301\030\004\022e\n"
  "\016DeprecateTopic\0226.uprotocol.core.usubscr"
  "iption.v3.DeprecateTopicRequest\032\025.uproto"
  "col.v1.UStatus\"\004\300\301\030\005\022n\n\030RegisterForNotif"
  "ications\0225.uprotocol.core.usubscription."
  "v3.NotificationsRequest\032\025.uprotocol.v1.U"
  "Status\"\004\300\301\030\006\022p\n\032UnregisterForNotificatio"
  "ns\0225.uprotocol.core.usubscription.v3.Not"
  "ificationsRequest\032\025.uprotocol.v1.UStatus"
  "\"\004\300\301\030\007\022\215\001\n\020FetchSubscribers\0228.uprotocol."
  "core.usubscription.v3.FetchSubscribersRe"
  "quest\0329.uprotocol.core.usubscription.v3."
  "FetchSubscribersResponse\"\004\300\301\030\010\022S\n\005Reset\022"
  "-.uprotocol.core.usubscription.v3.ResetR"
  "equest\032\025.uprotocol.v1.UStatus\"\004\300\301\030\t\032\"\242\273\030"
  "\022core.usubscription\250\273\030\003\260\273\030\000\270\273\030\000BC\n+org.e"
  "clipse.uprotocol.core.usubscription.v3B\022"
  "USubscriptionProtoP\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_core_2fusubscription_2fv3_2fusubscription_2eproto_deps[5] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_uprotocol_5foptions_2eproto,
  &::descriptor_table_uri_2eproto,
  &::descriptor_table_ustatus_2eproto,
};
static ::_pbi::once_flag descriptor_table_core_2fusubscription_2fv3_2fusubscription_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_core_2fusubscription_2fv3_2fusubscription_2eproto = {
    false, false, 4548, descriptor_table_protodef_core_2fusubscription_2fv3_2fusubscription_2eproto,
    "core/usubscription/v3/usubscription.proto",
    &descriptor_table_core_2fusubscription_2fv3_2fusubscription_2eproto_once, descriptor_table_core_2fusubscription_2fv3_2fusubscription_2eproto_deps, 5, 21,
    schemas, file_default_instances, TableStruct_core_2fusubscription_2fv3_2fusubscription_2eproto::offsets,
    file_level_metadata_core_2fusubscription_2fv3_2fusubscription_2eproto, file_level_enum_descriptors_core_2fusubscription_2fv3_2fusubscription_2eproto,
    file_level_service_descriptors_core_2fusubscription_2fv3_2fusubscription_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_core_2fusubscription_2fv3_2fusubscription_2eproto_getter() {
  return &descriptor_table_core_2fusubscription_2fv3_2fusubscription_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_core_2fusubscription_2fv3_2fusubscription_2eproto(&descriptor_table_core_2fusubscription_2fv3_2fusubscription_2eproto);
namespace uprotocol {
namespace core {
namespace usubscription {
namespace v3 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SubscriptionStatus_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_core_2fusubscription_2fv3_2fusubscription_2eproto);
  return file_level_enum_descriptors_core_2fusubscription_2fv3_2fusubscription_2eproto[0];
}
bool SubscriptionStatus_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SubscriptionStatus_State SubscriptionStatus::UNSUBSCRIBED;
constexpr SubscriptionStatus_State SubscriptionStatus::SUBSCRIBE_PENDING;
constexpr SubscriptionStatus_State SubscriptionStatus::SUBSCRIBED;
constexpr SubscriptionStatus_State SubscriptionStatus::UNSUBSCRIBE_PENDING;
constexpr SubscriptionStatus_State SubscriptionStatus::State_MIN;
constexpr SubscriptionStatus_State SubscriptionStatus::State_MAX;
constexpr int SubscriptionStatus::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Update_Resources_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_core_2fusubscription_2fv3_2fusubscription_2eproto);
  return file_level_enum_descriptors_core_2fusubscription_2fv3_2fusubscription_2eproto[1];
}
bool Update_Resources_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Update_Resources Update::subscriptions;
constexpr Update_Resources Update::Resources_MIN;
constexpr Update_Resources Update::Resources_MAX;
constexpr int Update::Resources_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResetRequest_Reason_Code_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_core_2fusubscription_2fv3_2fusubscription_2eproto);
  return file_level_enum_descriptors_core_2fusubscription_2fv3_2fusubscription_2eproto[2];
}
bool ResetRequest_Reason_Code_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ResetRequest_Reason_Code ResetRequest_Reason::UNSPECIFIED;
constexpr ResetRequest_Reason_Code ResetRequest_Reason::FACTORY_RESET;
constexpr ResetRequest_Reason_Code ResetRequest_Reason::CORRUPTED_DATA;
constexpr ResetRequest_Reason_Code ResetRequest_Reason::Code_MIN;
constexpr ResetRequest_Reason_Code ResetRequest_Reason::Code_MAX;
constexpr int ResetRequest_Reason::Code_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class SubscribeAttributes::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& expire(const SubscribeAttributes* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
SubscribeAttributes::_Internal::expire(const SubscribeAttributes* msg) {
  return *msg->_impl_.expire_;
}
void SubscribeAttributes::clear_expire() {
  if (GetArenaForAllocation() == nullptr && _impl_.expire_ != nullptr) {
    delete _impl_.expire_;
  }
  _impl_.expire_ = nullptr;
}
void SubscribeAttributes::clear_details() {
  _impl_.details_.Clear();
}
SubscribeAttributes::SubscribeAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:uprotocol.core.usubscription.v3.SubscribeAttributes)
}
SubscribeAttributes::SubscribeAttributes(const SubscribeAttributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubscribeAttributes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.details_){from._impl_.details_}
    , decltype(_impl_.expire_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_expire()) {
    _this->_impl_.expire_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.expire_);
  }
  // @@protoc_insertion_point(copy_constructor:uprotocol.core.usubscription.v3.SubscribeAttributes)
}

inline void SubscribeAttributes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.details_){arena}
    , decltype(_impl_.expire_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SubscribeAttributes::~SubscribeAttributes() {
  // @@protoc_insertion_point(destructor:uprotocol.core.usubscription.v3.SubscribeAttributes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubscribeAttributes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.details_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.expire_;
}

void SubscribeAttributes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubscribeAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:uprotocol.core.usubscription.v3.SubscribeAttributes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.details_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.expire_ != nullptr) {
    delete _impl_.expire_;
  }
  _impl_.expire_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeAttributes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp expire = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_expire(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .google.protobuf.Any details = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_details(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscribeAttributes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uprotocol.core.usubscription.v3.SubscribeAttributes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp expire = 1;
  if (this->_internal_has_expire()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::expire(this),
        _Internal::expire(this).GetCachedSize(), target, stream);
  }

  // repeated .google.protobuf.Any details = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_details_size()); i < n; i++) {
    const auto& repfield = this->_internal_details(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uprotocol.core.usubscription.v3.SubscribeAttributes)
  return target;
}

size_t SubscribeAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uprotocol.core.usubscription.v3.SubscribeAttributes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Any details = 2;
  total_size += 1UL * this->_internal_details_size();
  for (const auto& msg : this->_impl_.details_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.Timestamp expire = 1;
  if (this->_internal_has_expire()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.expire_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribeAttributes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubscribeAttributes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribeAttributes::GetClassData() const { return &_class_data_; }


void SubscribeAttributes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubscribeAttributes*>(&to_msg);
  auto& from = static_cast<const SubscribeAttributes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:uprotocol.core.usubscription.v3.SubscribeAttributes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.details_.MergeFrom(from._impl_.details_);
  if (from._internal_has_expire()) {
    _this->_internal_mutable_expire()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_expire());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscribeAttributes::CopyFrom(const SubscribeAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uprotocol.core.usubscription.v3.SubscribeAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeAttributes::IsInitialized() const {
  return true;
}

void SubscribeAttributes::InternalSwap(SubscribeAttributes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.details_.InternalSwap(&other->_impl_.details_);
  swap(_impl_.expire_, other->_impl_.expire_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeAttributes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_core_2fusubscription_2fv3_2fusubscription_2eproto_getter, &descriptor_table_core_2fusubscription_2fv3_2fusubscription_2eproto_once,
      file_level_metadata_core_2fusubscription_2fv3_2fusubscription_2eproto[0]);
}

// ===================================================================

class SubscriberInfo::_Internal {
 public:
  static const ::uprotocol::v1::UUri& uri(const SubscriberInfo* msg);
};

const ::uprotocol::v1::UUri&
SubscriberInfo::_Internal::uri(const SubscriberInfo* msg) {
  return *msg->_impl_.uri_;
}
void SubscriberInfo::clear_uri() {
  if (GetArenaForAllocation() == nullptr && _impl_.uri_ != nullptr) {
    delete _impl_.uri_;
  }
  _impl_.uri_ = nullptr;
}
void SubscriberInfo::clear_details() {
  _impl_.details_.Clear();
}
SubscriberInfo::SubscriberInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:uprotocol.core.usubscription.v3.SubscriberInfo)
}
SubscriberInfo::SubscriberInfo(const SubscriberInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubscriberInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.details_){from._impl_.details_}
    , decltype(_impl_.uri_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_uri()) {
    _this->_impl_.uri_ = new ::uprotocol::v1::UUri(*from._impl_.uri_);
  }
  // @@protoc_insertion_point(copy_constructor:uprotocol.core.usubscription.v3.SubscriberInfo)
}

inline void SubscriberInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.details_){arena}
    , decltype(_impl_.uri_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SubscriberInfo::~SubscriberInfo() {
  // @@protoc_insertion_point(destructor:uprotocol.core.usubscription.v3.SubscriberInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubscriberInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.details_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.uri_;
}

void SubscriberInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubscriberInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:uprotocol.core.usubscription.v3.SubscriberInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.details_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.uri_ != nullptr) {
    delete _impl_.uri_;
  }
  _impl_.uri_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscriberInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .uprotocol.v1.UUri uri = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_uri(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .google.protobuf.Any details = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_details(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscriberInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uprotocol.core.usubscription.v3.SubscriberInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .uprotocol.v1.UUri uri = 1;
  if (this->_internal_has_uri()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::uri(this),
        _Internal::uri(this).GetCachedSize(), target, stream);
  }

  // repeated .google.protobuf.Any details = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_details_size()); i < n; i++) {
    const auto& repfield = this->_internal_details(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uprotocol.core.usubscription.v3.SubscriberInfo)
  return target;
}

size_t SubscriberInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uprotocol.core.usubscription.v3.SubscriberInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Any details = 2;
  total_size += 1UL * this->_internal_details_size();
  for (const auto& msg : this->_impl_.details_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .uprotocol.v1.UUri uri = 1;
  if (this->_internal_has_uri()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.uri_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscriberInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubscriberInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscriberInfo::GetClassData() const { return &_class_data_; }


void SubscriberInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubscriberInfo*>(&to_msg);
  auto& from = static_cast<const SubscriberInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:uprotocol.core.usubscription.v3.SubscriberInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.details_.MergeFrom(from._impl_.details_);
  if (from._internal_has_uri()) {
    _this->_internal_mutable_uri()->::uprotocol::v1::UUri::MergeFrom(
        from._internal_uri());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscriberInfo::CopyFrom(const SubscriberInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uprotocol.core.usubscription.v3.SubscriberInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriberInfo::IsInitialized() const {
  return true;
}

void SubscriberInfo::InternalSwap(SubscriberInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.details_.InternalSwap(&other->_impl_.details_);
  swap(_impl_.uri_, other->_impl_.uri_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscriberInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_core_2fusubscription_2fv3_2fusubscription_2eproto_getter, &descriptor_table_core_2fusubscription_2fv3_2fusubscription_2eproto_once,
      file_level_metadata_core_2fusubscription_2fv3_2fusubscription_2eproto[1]);
}

// ===================================================================

class SubscriptionStatus::_Internal {
 public:
};

SubscriptionStatus::SubscriptionStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:uprotocol.core.usubscription.v3.SubscriptionStatus)
}
SubscriptionStatus::SubscriptionStatus(const SubscriptionStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubscriptionStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.state_){}
    , decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.state_, &from._impl_.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.code_) -
    reinterpret_cast<char*>(&_impl_.state_)) + sizeof(_impl_.code_));
  // @@protoc_insertion_point(copy_constructor:uprotocol.core.usubscription.v3.SubscriptionStatus)
}

inline void SubscriptionStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.state_){0}
    , decltype(_impl_.code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SubscriptionStatus::~SubscriptionStatus() {
  // @@protoc_insertion_point(destructor:uprotocol.core.usubscription.v3.SubscriptionStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubscriptionStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void SubscriptionStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubscriptionStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:uprotocol.core.usubscription.v3.SubscriptionStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  ::memset(&_impl_.state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.code_) -
      reinterpret_cast<char*>(&_impl_.state_)) + sizeof(_impl_.code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscriptionStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .uprotocol.core.usubscription.v3.SubscriptionStatus.State state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::uprotocol::core::usubscription::v3::SubscriptionStatus_State>(val));
        } else
          goto handle_unusual;
        continue;
      // .uprotocol.v1.UCode code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_code(static_cast<::uprotocol::v1::UCode>(val));
        } else
          goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "uprotocol.core.usubscription.v3.SubscriptionStatus.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscriptionStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uprotocol.core.usubscription.v3.SubscriptionStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .uprotocol.core.usubscription.v3.SubscriptionStatus.State state = 1;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_state(), target);
  }

  // .uprotocol.v1.UCode code = 2;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_code(), target);
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "uprotocol.core.usubscription.v3.SubscriptionStatus.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uprotocol.core.usubscription.v3.SubscriptionStatus)
  return target;
}

size_t SubscriptionStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uprotocol.core.usubscription.v3.SubscriptionStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 3;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .uprotocol.core.usubscription.v3.SubscriptionStatus.State state = 1;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  // .uprotocol.v1.UCode code = 2;
  if (this->_internal_code() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscriptionStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubscriptionStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscriptionStatus::GetClassData() const { return &_class_data_; }


void SubscriptionStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubscriptionStatus*>(&to_msg);
  auto& from = static_cast<const SubscriptionStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:uprotocol.core.usubscription.v3.SubscriptionStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscriptionStatus::CopyFrom(const SubscriptionStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uprotocol.core.usubscription.v3.SubscriptionStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriptionStatus::IsInitialized() const {
  return true;
}

void SubscriptionStatus::InternalSwap(SubscriptionStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubscriptionStatus, _impl_.code_)
      + sizeof(SubscriptionStatus::_impl_.code_)
      - PROTOBUF_FIELD_OFFSET(SubscriptionStatus, _impl_.state_)>(
          reinterpret_cast<char*>(&_impl_.state_),
          reinterpret_cast<char*>(&other->_impl_.state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscriptionStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_core_2fusubscription_2fv3_2fusubscription_2eproto_getter, &descriptor_table_core_2fusubscription_2fv3_2fusubscription_2eproto_once,
      file_level_metadata_core_2fusubscription_2fv3_2fusubscription_2eproto[2]);
}

// ===================================================================

EventDeliveryConfig_AttributesEntry_DoNotUse::EventDeliveryConfig_AttributesEntry_DoNotUse() {}
EventDeliveryConfig_AttributesEntry_DoNotUse::EventDeliveryConfig_AttributesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void EventDeliveryConfig_AttributesEntry_DoNotUse::MergeFrom(const EventDeliveryConfig_AttributesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata EventDeliveryConfig_AttributesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_core_2fusubscription_2fv3_2fusubscription_2eproto_getter, &descriptor_table_core_2fusubscription_2fv3_2fusubscription_2eproto_once,
      file_level_metadata_core_2fusubscription_2fv3_2fusubscription_2eproto[3]);
}

// ===================================================================

class EventDeliveryConfig::_Internal {
 public:
};

void EventDeliveryConfig::clear_attributes() {
  _impl_.attributes_.Clear();
}
EventDeliveryConfig::EventDeliveryConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &EventDeliveryConfig::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:uprotocol.core.usubscription.v3.EventDeliveryConfig)
}
EventDeliveryConfig::EventDeliveryConfig(const EventDeliveryConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EventDeliveryConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.attributes_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:uprotocol.core.usubscription.v3.EventDeliveryConfig)
}

inline void EventDeliveryConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.attributes_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.id_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EventDeliveryConfig::~EventDeliveryConfig() {
  // @@protoc_insertion_point(destructor:uprotocol.core.usubscription.v3.EventDeliveryConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void EventDeliveryConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attributes_.Destruct();
  _impl_.attributes_.~MapField();
  _impl_.id_.Destroy();
  _impl_.type_.Destroy();
}

void EventDeliveryConfig::ArenaDtor(void* object) {
  EventDeliveryConfig* _this = reinterpret_cast< EventDeliveryConfig* >(object);
  _this->_impl_.attributes_.Destruct();
}
void EventDeliveryConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventDeliveryConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:uprotocol.core.usubscription.v3.EventDeliveryConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attributes_.Clear();
  _impl_.id_.ClearToEmpty();
  _impl_.type_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventDeliveryConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "uprotocol.core.usubscription.v3.EventDeliveryConfig.id"));
        } else
          goto handle_unusual;
        continue;
      // string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "uprotocol.core.usubscription.v3.EventDeliveryConfig.type"));
        } else
          goto handle_unusual;
        continue;
      // map<string, .google.protobuf.Any> attributes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.attributes_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EventDeliveryConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uprotocol.core.usubscription.v3.EventDeliveryConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "uprotocol.core.usubscription.v3.EventDeliveryConfig.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string type = 2;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "uprotocol.core.usubscription.v3.EventDeliveryConfig.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  // map<string, .google.protobuf.Any> attributes = 3;
  if (!this->_internal_attributes().empty()) {
    using MapType = ::_pb::Map<std::string, ::PROTOBUF_NAMESPACE_ID::Any>;
    using WireHelper = EventDeliveryConfig_AttributesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_attributes();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "uprotocol.core.usubscription.v3.EventDeliveryConfig.AttributesEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uprotocol.core.usubscription.v3.EventDeliveryConfig)
  return target;
}

size_t EventDeliveryConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uprotocol.core.usubscription.v3.EventDeliveryConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .google.protobuf.Any> attributes = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_attributes_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::Any >::const_iterator
      it = this->_internal_attributes().begin();
      it != this->_internal_attributes().end(); ++it) {
    total_size += EventDeliveryConfig_AttributesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string type = 2;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventDeliveryConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventDeliveryConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventDeliveryConfig::GetClassData() const { return &_class_data_; }


void EventDeliveryConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventDeliveryConfig*>(&to_msg);
  auto& from = static_cast<const EventDeliveryConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:uprotocol.core.usubscription.v3.EventDeliveryConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventDeliveryConfig::CopyFrom(const EventDeliveryConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uprotocol.core.usubscription.v3.EventDeliveryConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventDeliveryConfig::IsInitialized() const {
  return true;
}

void EventDeliveryConfig::InternalSwap(EventDeliveryConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.attributes_.InternalSwap(&other->_impl_.attributes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata EventDeliveryConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_core_2fusubscription_2fv3_2fusubscription_2eproto_getter, &descriptor_table_core_2fusubscription_2fv3_2fusubscription_2eproto_once,
      file_level_metadata_core_2fusubscription_2fv3_2fusubscription_2eproto[4]);
}

// ===================================================================

class SubscriptionRequest::_Internal {
 public:
  static const ::uprotocol::v1::UUri& topic(const SubscriptionRequest* msg);
  static const ::uprotocol::core::usubscription::v3::SubscriberInfo& subscriber(const SubscriptionRequest* msg);
  static const ::uprotocol::core::usubscription::v3::SubscribeAttributes& attributes(const SubscriptionRequest* msg);
};

const ::uprotocol::v1::UUri&
SubscriptionRequest::_Internal::topic(const SubscriptionRequest* msg) {
  return *msg->_impl_.topic_;
}
const ::uprotocol::core::usubscription::v3::SubscriberInfo&
SubscriptionRequest::_Internal::subscriber(const SubscriptionRequest* msg) {
  return *msg->_impl_.subscriber_;
}
const ::uprotocol::core::usubscription::v3::SubscribeAttributes&
SubscriptionRequest::_Internal::attributes(const SubscriptionRequest* msg) {
  return *msg->_impl_.attributes_;
}
void SubscriptionRequest::clear_topic() {
  if (GetArenaForAllocation() == nullptr && _impl_.topic_ != nullptr) {
    delete _impl_.topic_;
  }
  _impl_.topic_ = nullptr;
}
SubscriptionRequest::SubscriptionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:uprotocol.core.usubscription.v3.SubscriptionRequest)
}
SubscriptionRequest::SubscriptionRequest(const SubscriptionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubscriptionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.topic_){nullptr}
    , decltype(_impl_.subscriber_){nullptr}
    , decltype(_impl_.attributes_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_topic()) {
    _this->_impl_.topic_ = new ::uprotocol::v1::UUri(*from._impl_.topic_);
  }
  if (from._internal_has_subscriber()) {
    _this->_impl_.subscriber_ = new ::uprotocol::core::usubscription::v3::SubscriberInfo(*from._impl_.subscriber_);
  }
  if (from._internal_has_attributes()) {
    _this->_impl_.attributes_ = new ::uprotocol::core::usubscription::v3::SubscribeAttributes(*from._impl_.attributes_);
  }
  // @@protoc_insertion_point(copy_constructor:uprotocol.core.usubscription.v3.SubscriptionRequest)
}

inline void SubscriptionRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.topic_){nullptr}
    , decltype(_impl_.subscriber_){nullptr}
    , decltype(_impl_.attributes_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SubscriptionRequest::~SubscriptionRequest() {
  // @@protoc_insertion_point(destructor:uprotocol.core.usubscription.v3.SubscriptionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubscriptionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.topic_;
  if (this != internal_default_instance()) delete _impl_.subscriber_;
  if (this != internal_default_instance()) delete _impl_.attributes_;
}

void SubscriptionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubscriptionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:uprotocol.core.usubscription.v3.SubscriptionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.topic_ != nullptr) {
    delete _impl_.topic_;
  }
  _impl_.topic_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.subscriber_ != nullptr) {
    delete _impl_.subscriber_;
  }
  _impl_.subscriber_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.attributes_ != nullptr) {
    delete _impl_.attributes_;
  }
  _impl_.attributes_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscriptionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .uprotocol.v1.UUri topic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_topic(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .uprotocol.core.usubscription.v3.SubscriberInfo subscriber = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscriber(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .uprotocol.core.usubscription.v3.SubscribeAttributes attributes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_attributes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscriptionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uprotocol.core.usubscription.v3.SubscriptionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .uprotocol.v1.UUri topic = 1;
  if (this->_internal_has_topic()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::topic(this),
        _Internal::topic(this).GetCachedSize(), target, stream);
  }

  // .uprotocol.core.usubscription.v3.SubscriberInfo subscriber = 2;
  if (this->_internal_has_subscriber()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::subscriber(this),
        _Internal::subscriber(this).GetCachedSize(), target, stream);
  }

  // .uprotocol.core.usubscription.v3.SubscribeAttributes attributes = 3;
  if (this->_internal_has_attributes()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::attributes(this),
        _Internal::attributes(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uprotocol.core.usubscription.v3.SubscriptionRequest)
  return target;
}

size_t SubscriptionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uprotocol.core.usubscription.v3.SubscriptionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .uprotocol.v1.UUri topic = 1;
  if (this->_internal_has_topic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.topic_);
  }

  // .uprotocol.core.usubscription.v3.SubscriberInfo subscriber = 2;
  if (this->_internal_has_subscriber()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.subscriber_);
  }

  // .uprotocol.core.usubscription.v3.SubscribeAttributes attributes = 3;
  if (this->_internal_has_attributes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.attributes_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscriptionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubscriptionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscriptionRequest::GetClassData() const { return &_class_data_; }


void SubscriptionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubscriptionRequest*>(&to_msg);
  auto& from = static_cast<const SubscriptionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:uprotocol.core.usubscription.v3.SubscriptionRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_topic()) {
    _this->_internal_mutable_topic()->::uprotocol::v1::UUri::MergeFrom(
        from._internal_topic());
  }
  if (from._internal_has_subscriber()) {
    _this->_internal_mutable_subscriber()->::uprotocol::core::usubscription::v3::SubscriberInfo::MergeFrom(
        from._internal_subscriber());
  }
  if (from._internal_has_attributes()) {
    _this->_internal_mutable_attributes()->::uprotocol::core::usubscription::v3::SubscribeAttributes::MergeFrom(
        from._internal_attributes());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscriptionRequest::CopyFrom(const SubscriptionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uprotocol.core.usubscription.v3.SubscriptionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriptionRequest::IsInitialized() const {
  return true;
}

void SubscriptionRequest::InternalSwap(SubscriptionRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubscriptionRequest, _impl_.attributes_)
      + sizeof(SubscriptionRequest::_impl_.attributes_)
      - PROTOBUF_FIELD_OFFSET(SubscriptionRequest, _impl_.topic_)>(
          reinterpret_cast<char*>(&_impl_.topic_),
          reinterpret_cast<char*>(&other->_impl_.topic_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscriptionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_core_2fusubscription_2fv3_2fusubscription_2eproto_getter, &descriptor_table_core_2fusubscription_2fv3_2fusubscription_2eproto_once,
      file_level_metadata_core_2fusubscription_2fv3_2fusubscription_2eproto[5]);
}

// ===================================================================

class SubscriptionResponse::_Internal {
 public:
  static const ::uprotocol::core::usubscription::v3::SubscriptionStatus& status(const SubscriptionResponse* msg);
  static const ::uprotocol::core::usubscription::v3::EventDeliveryConfig& config(const SubscriptionResponse* msg);
  static const ::uprotocol::v1::UUri& topic(const SubscriptionResponse* msg);
};

const ::uprotocol::core::usubscription::v3::SubscriptionStatus&
SubscriptionResponse::_Internal::status(const SubscriptionResponse* msg) {
  return *msg->_impl_.status_;
}
const ::uprotocol::core::usubscription::v3::EventDeliveryConfig&
SubscriptionResponse::_Internal::config(const SubscriptionResponse* msg) {
  return *msg->_impl_.config_;
}
const ::uprotocol::v1::UUri&
SubscriptionResponse::_Internal::topic(const SubscriptionResponse* msg) {
  return *msg->_impl_.topic_;
}
void SubscriptionResponse::clear_topic() {
  if (GetArenaForAllocation() == nullptr && _impl_.topic_ != nullptr) {
    delete _impl_.topic_;
  }
  _impl_.topic_ = nullptr;
}
SubscriptionResponse::SubscriptionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:uprotocol.core.usubscription.v3.SubscriptionResponse)
}
SubscriptionResponse::SubscriptionResponse(const SubscriptionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubscriptionResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.config_){nullptr}
    , decltype(_impl_.topic_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::uprotocol::core::usubscription::v3::SubscriptionStatus(*from._impl_.status_);
  }
  if (from._internal_has_config()) {
    _this->_impl_.config_ = new ::uprotocol::core::usubscription::v3::EventDeliveryConfig(*from._impl_.config_);
  }
  if (from._internal_has_topic()) {
    _this->_impl_.topic_ = new ::uprotocol::v1::UUri(*from._impl_.topic_);
  }
  // @@protoc_insertion_point(copy_constructor:uprotocol.core.usubscription.v3.SubscriptionResponse)
}

inline void SubscriptionResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.config_){nullptr}
    , decltype(_impl_.topic_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SubscriptionResponse::~SubscriptionResponse() {
  // @@protoc_insertion_point(destructor:uprotocol.core.usubscription.v3.SubscriptionResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubscriptionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.config_;
  if (this != internal_default_instance()) delete _impl_.topic_;
}

void SubscriptionResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubscriptionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:uprotocol.core.usubscription.v3.SubscriptionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.config_ != nullptr) {
    delete _impl_.config_;
  }
  _impl_.config_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.topic_ != nullptr) {
    delete _impl_.topic_;
  }
  _impl_.topic_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscriptionResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .uprotocol.core.usubscription.v3.SubscriptionStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .uprotocol.core.usubscription.v3.EventDeliveryConfig config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .uprotocol.v1.UUri topic = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_topic(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscriptionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uprotocol.core.usubscription.v3.SubscriptionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .uprotocol.core.usubscription.v3.SubscriptionStatus status = 1;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .uprotocol.core.usubscription.v3.EventDeliveryConfig config = 2;
  if (this->_internal_has_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::config(this),
        _Internal::config(this).GetCachedSize(), target, stream);
  }

  // .uprotocol.v1.UUri topic = 3;
  if (this->_internal_has_topic()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::topic(this),
        _Internal::topic(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uprotocol.core.usubscription.v3.SubscriptionResponse)
  return target;
}

size_t SubscriptionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uprotocol.core.usubscription.v3.SubscriptionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .uprotocol.core.usubscription.v3.SubscriptionStatus status = 1;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .uprotocol.core.usubscription.v3.EventDeliveryConfig config = 2;
  if (this->_internal_has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.config_);
  }

  // .uprotocol.v1.UUri topic = 3;
  if (this->_internal_has_topic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.topic_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscriptionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubscriptionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscriptionResponse::GetClassData() const { return &_class_data_; }


void SubscriptionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubscriptionResponse*>(&to_msg);
  auto& from = static_cast<const SubscriptionResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:uprotocol.core.usubscription.v3.SubscriptionResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::uprotocol::core::usubscription::v3::SubscriptionStatus::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_config()) {
    _this->_internal_mutable_config()->::uprotocol::core::usubscription::v3::EventDeliveryConfig::MergeFrom(
        from._internal_config());
  }
  if (from._internal_has_topic()) {
    _this->_internal_mutable_topic()->::uprotocol::v1::UUri::MergeFrom(
        from._internal_topic());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscriptionResponse::CopyFrom(const SubscriptionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uprotocol.core.usubscription.v3.SubscriptionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriptionResponse::IsInitialized() const {
  return true;
}

void SubscriptionResponse::InternalSwap(SubscriptionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubscriptionResponse, _impl_.topic_)
      + sizeof(SubscriptionResponse::_impl_.topic_)
      - PROTOBUF_FIELD_OFFSET(SubscriptionResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscriptionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_core_2fusubscription_2fv3_2fusubscription_2eproto_getter, &descriptor_table_core_2fusubscription_2fv3_2fusubscription_2eproto_once,
      file_level_metadata_core_2fusubscription_2fv3_2fusubscription_2eproto[6]);
}

// ===================================================================

class UnsubscribeRequest::_Internal {
 public:
  static const ::uprotocol::v1::UUri& topic(const UnsubscribeRequest* msg);
  static const ::uprotocol::core::usubscription::v3::SubscriberInfo& subscriber(const UnsubscribeRequest* msg);
};

const ::uprotocol::v1::UUri&
UnsubscribeRequest::_Internal::topic(const UnsubscribeRequest* msg) {
  return *msg->_impl_.topic_;
}
const ::uprotocol::core::usubscription::v3::SubscriberInfo&
UnsubscribeRequest::_Internal::subscriber(const UnsubscribeRequest* msg) {
  return *msg->_impl_.subscriber_;
}
void UnsubscribeRequest::clear_topic() {
  if (GetArenaForAllocation() == nullptr && _impl_.topic_ != nullptr) {
    delete _impl_.topic_;
  }
  _impl_.topic_ = nullptr;
}
UnsubscribeRequest::UnsubscribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:uprotocol.core.usubscription.v3.UnsubscribeRequest)
}
UnsubscribeRequest::UnsubscribeRequest(const UnsubscribeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnsubscribeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.topic_){nullptr}
    , decltype(_impl_.subscriber_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_topic()) {
    _this->_impl_.topic_ = new ::uprotocol::v1::UUri(*from._impl_.topic_);
  }
  if (from._internal_has_subscriber()) {
    _this->_impl_.subscriber_ = new ::uprotocol::core::usubscription::v3::SubscriberInfo(*from._impl_.subscriber_);
  }
  // @@protoc_insertion_point(copy_constructor:uprotocol.core.usubscription.v3.UnsubscribeRequest)
}

inline void UnsubscribeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.topic_){nullptr}
    , decltype(_impl_.subscriber_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UnsubscribeRequest::~UnsubscribeRequest() {
  // @@protoc_insertion_point(destructor:uprotocol.core.usubscription.v3.UnsubscribeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnsubscribeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.topic_;
  if (this != internal_default_instance()) delete _impl_.subscriber_;
}

void UnsubscribeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnsubscribeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:uprotocol.core.usubscription.v3.UnsubscribeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.topic_ != nullptr) {
    delete _impl_.topic_;
  }
  _impl_.topic_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.subscriber_ != nullptr) {
    delete _impl_.subscriber_;
  }
  _impl_.subscriber_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnsubscribeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .uprotocol.v1.UUri topic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_topic(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .uprotocol.core.usubscription.v3.SubscriberInfo subscriber = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscriber(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnsubscribeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uprotocol.core.usubscription.v3.UnsubscribeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .uprotocol.v1.UUri topic = 1;
  if (this->_internal_has_topic()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::topic(this),
        _Internal::topic(this).GetCachedSize(), target, stream);
  }

  // .uprotocol.core.usubscription.v3.SubscriberInfo subscriber = 2;
  if (this->_internal_has_subscriber()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::subscriber(this),
        _Internal::subscriber(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uprotocol.core.usubscription.v3.UnsubscribeRequest)
  return target;
}

size_t UnsubscribeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uprotocol.core.usubscription.v3.UnsubscribeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .uprotocol.v1.UUri topic = 1;
  if (this->_internal_has_topic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.topic_);
  }

  // .uprotocol.core.usubscription.v3.SubscriberInfo subscriber = 2;
  if (this->_internal_has_subscriber()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.subscriber_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnsubscribeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnsubscribeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnsubscribeRequest::GetClassData() const { return &_class_data_; }


void UnsubscribeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnsubscribeRequest*>(&to_msg);
  auto& from = static_cast<const UnsubscribeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:uprotocol.core.usubscription.v3.UnsubscribeRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_topic()) {
    _this->_internal_mutable_topic()->::uprotocol::v1::UUri::MergeFrom(
        from._internal_topic());
  }
  if (from._internal_has_subscriber()) {
    _this->_internal_mutable_subscriber()->::uprotocol::core::usubscription::v3::SubscriberInfo::MergeFrom(
        from._internal_subscriber());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnsubscribeRequest::CopyFrom(const UnsubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uprotocol.core.usubscription.v3.UnsubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsubscribeRequest::IsInitialized() const {
  return true;
}

void UnsubscribeRequest::InternalSwap(UnsubscribeRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnsubscribeRequest, _impl_.subscriber_)
      + sizeof(UnsubscribeRequest::_impl_.subscriber_)
      - PROTOBUF_FIELD_OFFSET(UnsubscribeRequest, _impl_.topic_)>(
          reinterpret_cast<char*>(&_impl_.topic_),
          reinterpret_cast<char*>(&other->_impl_.topic_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnsubscribeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_core_2fusubscription_2fv3_2fusubscription_2eproto_getter, &descriptor_table_core_2fusubscription_2fv3_2fusubscription_2eproto_once,
      file_level_metadata_core_2fusubscription_2fv3_2fusubscription_2eproto[7]);
}

// ===================================================================

class FetchSubscribersRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<FetchSubscribersRequest>()._impl_._has_bits_);
  static const ::uprotocol::v1::UUri& topic(const FetchSubscribersRequest* msg);
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::uprotocol::v1::UUri&
FetchSubscribersRequest::_Internal::topic(const FetchSubscribersRequest* msg) {
  return *msg->_impl_.topic_;
}
void FetchSubscribersRequest::clear_topic() {
  if (GetArenaForAllocation() == nullptr && _impl_.topic_ != nullptr) {
    delete _impl_.topic_;
  }
  _impl_.topic_ = nullptr;
}
FetchSubscribersRequest::FetchSubscribersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:uprotocol.core.usubscription.v3.FetchSubscribersRequest)
}
FetchSubscribersRequest::FetchSubscribersRequest(const FetchSubscribersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FetchSubscribersRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.topic_){nullptr}
    , decltype(_impl_.offset_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_topic()) {
    _this->_impl_.topic_ = new ::uprotocol::v1::UUri(*from._impl_.topic_);
  }
  _this->_impl_.offset_ = from._impl_.offset_;
  // @@protoc_insertion_point(copy_constructor:uprotocol.core.usubscription.v3.FetchSubscribersRequest)
}

inline void FetchSubscribersRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.topic_){nullptr}
    , decltype(_impl_.offset_){0u}
  };
}

FetchSubscribersRequest::~FetchSubscribersRequest() {
  // @@protoc_insertion_point(destructor:uprotocol.core.usubscription.v3.FetchSubscribersRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FetchSubscribersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.topic_;
}

void FetchSubscribersRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FetchSubscribersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:uprotocol.core.usubscription.v3.FetchSubscribersRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.topic_ != nullptr) {
    delete _impl_.topic_;
  }
  _impl_.topic_ = nullptr;
  _impl_.offset_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchSubscribersRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .uprotocol.v1.UUri topic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_topic(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_offset(&has_bits);
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FetchSubscribersRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uprotocol.core.usubscription.v3.FetchSubscribersRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .uprotocol.v1.UUri topic = 1;
  if (this->_internal_has_topic()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::topic(this),
        _Internal::topic(this).GetCachedSize(), target, stream);
  }

  // optional uint32 offset = 2;
  if (_internal_has_offset()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uprotocol.core.usubscription.v3.FetchSubscribersRequest)
  return target;
}

size_t FetchSubscribersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uprotocol.core.usubscription.v3.FetchSubscribersRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .uprotocol.v1.UUri topic = 1;
  if (this->_internal_has_topic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.topic_);
  }

  // optional uint32 offset = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_offset());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FetchSubscribersRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FetchSubscribersRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FetchSubscribersRequest::GetClassData() const { return &_class_data_; }


void FetchSubscribersRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FetchSubscribersRequest*>(&to_msg);
  auto& from = static_cast<const FetchSubscribersRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:uprotocol.core.usubscription.v3.FetchSubscribersRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_topic()) {
    _this->_internal_mutable_topic()->::uprotocol::v1::UUri::MergeFrom(
        from._internal_topic());
  }
  if (from._internal_has_offset()) {
    _this->_internal_set_offset(from._internal_offset());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FetchSubscribersRequest::CopyFrom(const FetchSubscribersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uprotocol.core.usubscription.v3.FetchSubscribersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchSubscribersRequest::IsInitialized() const {
  return true;
}

void FetchSubscribersRequest::InternalSwap(FetchSubscribersRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FetchSubscribersRequest, _impl_.offset_)
      + sizeof(FetchSubscribersRequest::_impl_.offset_)
      - PROTOBUF_FIELD_OFFSET(FetchSubscribersRequest, _impl_.topic_)>(
          reinterpret_cast<char*>(&_impl_.topic_),
          reinterpret_cast<char*>(&other->_impl_.topic_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchSubscribersRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_core_2fusubscription_2fv3_2fusubscription_2eproto_getter, &descriptor_table_core_2fusubscription_2fv3_2fusubscription_2eproto_once,
      file_level_metadata_core_2fusubscription_2fv3_2fusubscription_2eproto[8]);
}

// ===================================================================

class FetchSubscribersResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<FetchSubscribersResponse>()._impl_._has_bits_);
  static void set_has_has_more_records(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::uprotocol::v1::UStatus& status(const FetchSubscribersResponse* msg);
};

const ::uprotocol::v1::UStatus&
FetchSubscribersResponse::_Internal::status(const FetchSubscribersResponse* msg) {
  return *msg->_impl_.status_;
}
void FetchSubscribersResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
FetchSubscribersResponse::FetchSubscribersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:uprotocol.core.usubscription.v3.FetchSubscribersResponse)
}
FetchSubscribersResponse::FetchSubscribersResponse(const FetchSubscribersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FetchSubscribersResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.subscribers_){from._impl_.subscribers_}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.has_more_records_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::uprotocol::v1::UStatus(*from._impl_.status_);
  }
  _this->_impl_.has_more_records_ = from._impl_.has_more_records_;
  // @@protoc_insertion_point(copy_constructor:uprotocol.core.usubscription.v3.FetchSubscribersResponse)
}

inline void FetchSubscribersResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.subscribers_){arena}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.has_more_records_){false}
  };
}

FetchSubscribersResponse::~FetchSubscribersResponse() {
  // @@protoc_insertion_point(destructor:uprotocol.core.usubscription.v3.FetchSubscribersResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FetchSubscribersResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.subscribers_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void FetchSubscribersResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FetchSubscribersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:uprotocol.core.usubscription.v3.FetchSubscribersResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.subscribers_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _impl_.has_more_records_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchSubscribersResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .uprotocol.core.usubscription.v3.SubscriberInfo subscribers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subscribers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool has_more_records = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_has_more_records(&has_bits);
          _impl_.has_more_records_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .uprotocol.v1.UStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FetchSubscribersResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uprotocol.core.usubscription.v3.FetchSubscribersResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .uprotocol.core.usubscription.v3.SubscriberInfo subscribers = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_subscribers_size()); i < n; i++) {
    const auto& repfield = this->_internal_subscribers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool has_more_records = 2;
  if (_internal_has_has_more_records()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_has_more_records(), target);
  }

  // .uprotocol.v1.UStatus status = 3;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uprotocol.core.usubscription.v3.FetchSubscribersResponse)
  return target;
}

size_t FetchSubscribersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uprotocol.core.usubscription.v3.FetchSubscribersResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .uprotocol.core.usubscription.v3.SubscriberInfo subscribers = 1;
  total_size += 1UL * this->_internal_subscribers_size();
  for (const auto& msg : this->_impl_.subscribers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .uprotocol.v1.UStatus status = 3;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // optional bool has_more_records = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FetchSubscribersResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FetchSubscribersResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FetchSubscribersResponse::GetClassData() const { return &_class_data_; }


void FetchSubscribersResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FetchSubscribersResponse*>(&to_msg);
  auto& from = static_cast<const FetchSubscribersResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:uprotocol.core.usubscription.v3.FetchSubscribersResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.subscribers_.MergeFrom(from._impl_.subscribers_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::uprotocol::v1::UStatus::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_has_more_records()) {
    _this->_internal_set_has_more_records(from._internal_has_more_records());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FetchSubscribersResponse::CopyFrom(const FetchSubscribersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uprotocol.core.usubscription.v3.FetchSubscribersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchSubscribersResponse::IsInitialized() const {
  return true;
}

void FetchSubscribersResponse::InternalSwap(FetchSubscribersResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.subscribers_.InternalSwap(&other->_impl_.subscribers_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FetchSubscribersResponse, _impl_.has_more_records_)
      + sizeof(FetchSubscribersResponse::_impl_.has_more_records_)
      - PROTOBUF_FIELD_OFFSET(FetchSubscribersResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchSubscribersResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_core_2fusubscription_2fv3_2fusubscription_2eproto_getter, &descriptor_table_core_2fusubscription_2fv3_2fusubscription_2eproto_once,
      file_level_metadata_core_2fusubscription_2fv3_2fusubscription_2eproto[9]);
}

// ===================================================================

class Subscription::_Internal {
 public:
  static const ::uprotocol::v1::UUri& topic(const Subscription* msg);
  static const ::uprotocol::core::usubscription::v3::SubscriberInfo& subscriber(const Subscription* msg);
  static const ::uprotocol::core::usubscription::v3::SubscriptionStatus& status(const Subscription* msg);
  static const ::uprotocol::core::usubscription::v3::SubscribeAttributes& attributes(const Subscription* msg);
  static const ::uprotocol::core::usubscription::v3::EventDeliveryConfig& config(const Subscription* msg);
};

const ::uprotocol::v1::UUri&
Subscription::_Internal::topic(const Subscription* msg) {
  return *msg->_impl_.topic_;
}
const ::uprotocol::core::usubscription::v3::SubscriberInfo&
Subscription::_Internal::subscriber(const Subscription* msg) {
  return *msg->_impl_.subscriber_;
}
const ::uprotocol::core::usubscription::v3::SubscriptionStatus&
Subscription::_Internal::status(const Subscription* msg) {
  return *msg->_impl_.status_;
}
const ::uprotocol::core::usubscription::v3::SubscribeAttributes&
Subscription::_Internal::attributes(const Subscription* msg) {
  return *msg->_impl_.attributes_;
}
const ::uprotocol::core::usubscription::v3::EventDeliveryConfig&
Subscription::_Internal::config(const Subscription* msg) {
  return *msg->_impl_.config_;
}
void Subscription::clear_topic() {
  if (GetArenaForAllocation() == nullptr && _impl_.topic_ != nullptr) {
    delete _impl_.topic_;
  }
  _impl_.topic_ = nullptr;
}
Subscription::Subscription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:uprotocol.core.usubscription.v3.Subscription)
}
Subscription::Subscription(const Subscription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Subscription* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.topic_){nullptr}
    , decltype(_impl_.subscriber_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.attributes_){nullptr}
    , decltype(_impl_.config_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_topic()) {
    _this->_impl_.topic_ = new ::uprotocol::v1::UUri(*from._impl_.topic_);
  }
  if (from._internal_has_subscriber()) {
    _this->_impl_.subscriber_ = new ::uprotocol::core::usubscription::v3::SubscriberInfo(*from._impl_.subscriber_);
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::uprotocol::core::usubscription::v3::SubscriptionStatus(*from._impl_.status_);
  }
  if (from._internal_has_attributes()) {
    _this->_impl_.attributes_ = new ::uprotocol::core::usubscription::v3::SubscribeAttributes(*from._impl_.attributes_);
  }
  if (from._internal_has_config()) {
    _this->_impl_.config_ = new ::uprotocol::core::usubscription::v3::EventDeliveryConfig(*from._impl_.config_);
  }
  // @@protoc_insertion_point(copy_constructor:uprotocol.core.usubscription.v3.Subscription)
}

inline void Subscription::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.topic_){nullptr}
    , decltype(_impl_.subscriber_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.attributes_){nullptr}
    , decltype(_impl_.config_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Subscription::~Subscription() {
  // @@protoc_insertion_point(destructor:uprotocol.core.usubscription.v3.Subscription)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Subscription::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.topic_;
  if (this != internal_default_instance()) delete _impl_.subscriber_;
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.attributes_;
  if (this != internal_default_instance()) delete _impl_.config_;
}

void Subscription::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Subscription::Clear() {
// @@protoc_insertion_point(message_clear_start:uprotocol.core.usubscription.v3.Subscription)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.topic_ != nullptr) {
    delete _impl_.topic_;
  }
  _impl_.topic_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.subscriber_ != nullptr) {
    delete _impl_.subscriber_;
  }
  _impl_.subscriber_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.attributes_ != nullptr) {
    delete _impl_.attributes_;
  }
  _impl_.attributes_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.config_ != nullptr) {
    delete _impl_.config_;
  }
  _impl_.config_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Subscription::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .uprotocol.v1.UUri topic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_topic(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .uprotocol.core.usubscription.v3.SubscriberInfo subscriber = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscriber(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .uprotocol.core.usubscription.v3.SubscriptionStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .uprotocol.core.usubscription.v3.SubscribeAttributes attributes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_attributes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .uprotocol.core.usubscription.v3.EventDeliveryConfig config = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Subscription::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uprotocol.core.usubscription.v3.Subscription)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .uprotocol.v1.UUri topic = 1;
  if (this->_internal_has_topic()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::topic(this),
        _Internal::topic(this).GetCachedSize(), target, stream);
  }

  // .uprotocol.core.usubscription.v3.SubscriberInfo subscriber = 2;
  if (this->_internal_has_subscriber()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::subscriber(this),
        _Internal::subscriber(this).GetCachedSize(), target, stream);
  }

  // .uprotocol.core.usubscription.v3.SubscriptionStatus status = 3;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .uprotocol.core.usubscription.v3.SubscribeAttributes attributes = 4;
  if (this->_internal_has_attributes()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::attributes(this),
        _Internal::attributes(this).GetCachedSize(), target, stream);
  }

  // .uprotocol.core.usubscription.v3.EventDeliveryConfig config = 5;
  if (this->_internal_has_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::config(this),
        _Internal::config(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uprotocol.core.usubscription.v3.Subscription)
  return target;
}

size_t Subscription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uprotocol.core.usubscription.v3.Subscription)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .uprotocol.v1.UUri topic = 1;
  if (this->_internal_has_topic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.topic_);
  }

  // .uprotocol.core.usubscription.v3.SubscriberInfo subscriber = 2;
  if (this->_internal_has_subscriber()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.subscriber_);
  }

  // .uprotocol.core.usubscription.v3.SubscriptionStatus status = 3;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .uprotocol.core.usubscription.v3.SubscribeAttributes attributes = 4;
  if (this->_internal_has_attributes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.attributes_);
  }

  // .uprotocol.core.usubscription.v3.EventDeliveryConfig config = 5;
  if (this->_internal_has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.config_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Subscription::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Subscription::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Subscription::GetClassData() const { return &_class_data_; }


void Subscription::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Subscription*>(&to_msg);
  auto& from = static_cast<const Subscription&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:uprotocol.core.usubscription.v3.Subscription)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_topic()) {
    _this->_internal_mutable_topic()->::uprotocol::v1::UUri::MergeFrom(
        from._internal_topic());
  }
  if (from._internal_has_subscriber()) {
    _this->_internal_mutable_subscriber()->::uprotocol::core::usubscription::v3::SubscriberInfo::MergeFrom(
        from._internal_subscriber());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::uprotocol::core::usubscription::v3::SubscriptionStatus::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_attributes()) {
    _this->_internal_mutable_attributes()->::uprotocol::core::usubscription::v3::SubscribeAttributes::MergeFrom(
        from._internal_attributes());
  }
  if (from._internal_has_config()) {
    _this->_internal_mutable_config()->::uprotocol::core::usubscription::v3::EventDeliveryConfig::MergeFrom(
        from._internal_config());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Subscription::CopyFrom(const Subscription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uprotocol.core.usubscription.v3.Subscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Subscription::IsInitialized() const {
  return true;
}

void Subscription::InternalSwap(Subscription* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Subscription, _impl_.config_)
      + sizeof(Subscription::_impl_.config_)
      - PROTOBUF_FIELD_OFFSET(Subscription, _impl_.topic_)>(
          reinterpret_cast<char*>(&_impl_.topic_),
          reinterpret_cast<char*>(&other->_impl_.topic_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Subscription::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_core_2fusubscription_2fv3_2fusubscription_2eproto_getter, &descriptor_table_core_2fusubscription_2fv3_2fusubscription_2eproto_once,
      file_level_metadata_core_2fusubscription_2fv3_2fusubscription_2eproto[10]);
}

// ===================================================================

class FetchSubscriptionsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<FetchSubscriptionsRequest>()._impl_._has_bits_);
  static const ::uprotocol::v1::UUri& topic(const FetchSubscriptionsRequest* msg);
  static const ::uprotocol::core::usubscription::v3::SubscriberInfo& subscriber(const FetchSubscriptionsRequest* msg);
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::uprotocol::v1::UUri&
FetchSubscriptionsRequest::_Internal::topic(const FetchSubscriptionsRequest* msg) {
  return *msg->_impl_.request_.topic_;
}
const ::uprotocol::core::usubscription::v3::SubscriberInfo&
FetchSubscriptionsRequest::_Internal::subscriber(const FetchSubscriptionsRequest* msg) {
  return *msg->_impl_.request_.subscriber_;
}
void FetchSubscriptionsRequest::set_allocated_topic(::uprotocol::v1::UUri* topic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (topic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(topic));
    if (message_arena != submessage_arena) {
      topic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topic, submessage_arena);
    }
    set_has_topic();
    _impl_.request_.topic_ = topic;
  }
  // @@protoc_insertion_point(field_set_allocated:uprotocol.core.usubscription.v3.FetchSubscriptionsRequest.topic)
}
void FetchSubscriptionsRequest::clear_topic() {
  if (_internal_has_topic()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.request_.topic_;
    }
    clear_has_request();
  }
}
void FetchSubscriptionsRequest::set_allocated_subscriber(::uprotocol::core::usubscription::v3::SubscriberInfo* subscriber) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (subscriber) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(subscriber);
    if (message_arena != submessage_arena) {
      subscriber = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subscriber, submessage_arena);
    }
    set_has_subscriber();
    _impl_.request_.subscriber_ = subscriber;
  }
  // @@protoc_insertion_point(field_set_allocated:uprotocol.core.usubscription.v3.FetchSubscriptionsRequest.subscriber)
}
FetchSubscriptionsRequest::FetchSubscriptionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:uprotocol.core.usubscription.v3.FetchSubscriptionsRequest)
}
FetchSubscriptionsRequest::FetchSubscriptionsRequest(const FetchSubscriptionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FetchSubscriptionsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.offset_){}
    , decltype(_impl_.request_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.offset_ = from._impl_.offset_;
  clear_has_request();
  switch (from.request_case()) {
    case kTopic: {
      _this->_internal_mutable_topic()->::uprotocol::v1::UUri::MergeFrom(
          from._internal_topic());
      break;
    }
    case kSubscriber: {
      _this->_internal_mutable_subscriber()->::uprotocol::core::usubscription::v3::SubscriberInfo::MergeFrom(
          from._internal_subscriber());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:uprotocol.core.usubscription.v3.FetchSubscriptionsRequest)
}

inline void FetchSubscriptionsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.offset_){0u}
    , decltype(_impl_.request_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_request();
}

FetchSubscriptionsRequest::~FetchSubscriptionsRequest() {
  // @@protoc_insertion_point(destructor:uprotocol.core.usubscription.v3.FetchSubscriptionsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FetchSubscriptionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_request()) {
    clear_request();
  }
}

void FetchSubscriptionsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FetchSubscriptionsRequest::clear_request() {
// @@protoc_insertion_point(one_of_clear_start:uprotocol.core.usubscription.v3.FetchSubscriptionsRequest)
  switch (request_case()) {
    case kTopic: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.topic_;
      }
      break;
    }
    case kSubscriber: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.subscriber_;
      }
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = REQUEST_NOT_SET;
}


void FetchSubscriptionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:uprotocol.core.usubscription.v3.FetchSubscriptionsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.offset_ = 0u;
  clear_request();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchSubscriptionsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .uprotocol.v1.UUri topic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_topic(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .uprotocol.core.usubscription.v3.SubscriberInfo subscriber = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscriber(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_offset(&has_bits);
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FetchSubscriptionsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uprotocol.core.usubscription.v3.FetchSubscriptionsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .uprotocol.v1.UUri topic = 1;
  if (_internal_has_topic()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::topic(this),
        _Internal::topic(this).GetCachedSize(), target, stream);
  }

  // .uprotocol.core.usubscription.v3.SubscriberInfo subscriber = 2;
  if (_internal_has_subscriber()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::subscriber(this),
        _Internal::subscriber(this).GetCachedSize(), target, stream);
  }

  // optional uint32 offset = 3;
  if (_internal_has_offset()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uprotocol.core.usubscription.v3.FetchSubscriptionsRequest)
  return target;
}

size_t FetchSubscriptionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uprotocol.core.usubscription.v3.FetchSubscriptionsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 offset = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_offset());
  }

  switch (request_case()) {
    // .uprotocol.v1.UUri topic = 1;
    case kTopic: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.topic_);
      break;
    }
    // .uprotocol.core.usubscription.v3.SubscriberInfo subscriber = 2;
    case kSubscriber: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.subscriber_);
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FetchSubscriptionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FetchSubscriptionsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FetchSubscriptionsRequest::GetClassData() const { return &_class_data_; }


void FetchSubscriptionsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FetchSubscriptionsRequest*>(&to_msg);
  auto& from = static_cast<const FetchSubscriptionsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:uprotocol.core.usubscription.v3.FetchSubscriptionsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_offset()) {
    _this->_internal_set_offset(from._internal_offset());
  }
  switch (from.request_case()) {
    case kTopic: {
      _this->_internal_mutable_topic()->::uprotocol::v1::UUri::MergeFrom(
          from._internal_topic());
      break;
    }
    case kSubscriber: {
      _this->_internal_mutable_subscriber()->::uprotocol::core::usubscription::v3::SubscriberInfo::MergeFrom(
          from._internal_subscriber());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FetchSubscriptionsRequest::CopyFrom(const FetchSubscriptionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uprotocol.core.usubscription.v3.FetchSubscriptionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchSubscriptionsRequest::IsInitialized() const {
  return true;
}

void FetchSubscriptionsRequest::InternalSwap(FetchSubscriptionsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.offset_, other->_impl_.offset_);
  swap(_impl_.request_, other->_impl_.request_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchSubscriptionsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_core_2fusubscription_2fv3_2fusubscription_2eproto_getter, &descriptor_table_core_2fusubscription_2fv3_2fusubscription_2eproto_once,
      file_level_metadata_core_2fusubscription_2fv3_2fusubscription_2eproto[11]);
}

// ===================================================================

class FetchSubscriptionsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<FetchSubscriptionsResponse>()._impl_._has_bits_);
  static void set_has_has_more_records(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::uprotocol::v1::UStatus& status(const FetchSubscriptionsResponse* msg);
};

const ::uprotocol::v1::UStatus&
FetchSubscriptionsResponse::_Internal::status(const FetchSubscriptionsResponse* msg) {
  return *msg->_impl_.status_;
}
void FetchSubscriptionsResponse::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
FetchSubscriptionsResponse::FetchSubscriptionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:uprotocol.core.usubscription.v3.FetchSubscriptionsResponse)
}
FetchSubscriptionsResponse::FetchSubscriptionsResponse(const FetchSubscriptionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FetchSubscriptionsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.subscriptions_){from._impl_.subscriptions_}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.has_more_records_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::uprotocol::v1::UStatus(*from._impl_.status_);
  }
  _this->_impl_.has_more_records_ = from._impl_.has_more_records_;
  // @@protoc_insertion_point(copy_constructor:uprotocol.core.usubscription.v3.FetchSubscriptionsResponse)
}

inline void FetchSubscriptionsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.subscriptions_){arena}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.has_more_records_){false}
  };
}

FetchSubscriptionsResponse::~FetchSubscriptionsResponse() {
  // @@protoc_insertion_point(destructor:uprotocol.core.usubscription.v3.FetchSubscriptionsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FetchSubscriptionsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.subscriptions_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.status_;
}

void FetchSubscriptionsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FetchSubscriptionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:uprotocol.core.usubscription.v3.FetchSubscriptionsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.subscriptions_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _impl_.has_more_records_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchSubscriptionsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .uprotocol.core.usubscription.v3.Subscription subscriptions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subscriptions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool has_more_records = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_has_more_records(&has_bits);
          _impl_.has_more_records_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .uprotocol.v1.UStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FetchSubscriptionsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uprotocol.core.usubscription.v3.FetchSubscriptionsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .uprotocol.core.usubscription.v3.Subscription subscriptions = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_subscriptions_size()); i < n; i++) {
    const auto& repfield = this->_internal_subscriptions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool has_more_records = 2;
  if (_internal_has_has_more_records()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_has_more_records(), target);
  }

  // .uprotocol.v1.UStatus status = 3;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uprotocol.core.usubscription.v3.FetchSubscriptionsResponse)
  return target;
}

size_t FetchSubscriptionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uprotocol.core.usubscription.v3.FetchSubscriptionsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .uprotocol.core.usubscription.v3.Subscription subscriptions = 1;
  total_size += 1UL * this->_internal_subscriptions_size();
  for (const auto& msg : this->_impl_.subscriptions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .uprotocol.v1.UStatus status = 3;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // optional bool has_more_records = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FetchSubscriptionsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FetchSubscriptionsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FetchSubscriptionsResponse::GetClassData() const { return &_class_data_; }


void FetchSubscriptionsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FetchSubscriptionsResponse*>(&to_msg);
  auto& from = static_cast<const FetchSubscriptionsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:uprotocol.core.usubscription.v3.FetchSubscriptionsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.subscriptions_.MergeFrom(from._impl_.subscriptions_);
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::uprotocol::v1::UStatus::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_has_more_records()) {
    _this->_internal_set_has_more_records(from._internal_has_more_records());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FetchSubscriptionsResponse::CopyFrom(const FetchSubscriptionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uprotocol.core.usubscription.v3.FetchSubscriptionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchSubscriptionsResponse::IsInitialized() const {
  return true;
}

void FetchSubscriptionsResponse::InternalSwap(FetchSubscriptionsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.subscriptions_.InternalSwap(&other->_impl_.subscriptions_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FetchSubscriptionsResponse, _impl_.has_more_records_)
      + sizeof(FetchSubscriptionsResponse::_impl_.has_more_records_)
      - PROTOBUF_FIELD_OFFSET(FetchSubscriptionsResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchSubscriptionsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_core_2fusubscription_2fv3_2fusubscription_2eproto_getter, &descriptor_table_core_2fusubscription_2fv3_2fusubscription_2eproto_once,
      file_level_metadata_core_2fusubscription_2fv3_2fusubscription_2eproto[12]);
}

// ===================================================================

class NotificationsRequest::_Internal {
 public:
  static const ::uprotocol::v1::UUri& topic(const NotificationsRequest* msg);
  static const ::uprotocol::core::usubscription::v3::SubscriberInfo& subscriber(const NotificationsRequest* msg);
};

const ::uprotocol::v1::UUri&
NotificationsRequest::_Internal::topic(const NotificationsRequest* msg) {
  return *msg->_impl_.topic_;
}
const ::uprotocol::core::usubscription::v3::SubscriberInfo&
NotificationsRequest::_Internal::subscriber(const NotificationsRequest* msg) {
  return *msg->_impl_.subscriber_;
}
void NotificationsRequest::clear_topic() {
  if (GetArenaForAllocation() == nullptr && _impl_.topic_ != nullptr) {
    delete _impl_.topic_;
  }
  _impl_.topic_ = nullptr;
}
NotificationsRequest::NotificationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:uprotocol.core.usubscription.v3.NotificationsRequest)
}
NotificationsRequest::NotificationsRequest(const NotificationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NotificationsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.topic_){nullptr}
    , decltype(_impl_.subscriber_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_topic()) {
    _this->_impl_.topic_ = new ::uprotocol::v1::UUri(*from._impl_.topic_);
  }
  if (from._internal_has_subscriber()) {
    _this->_impl_.subscriber_ = new ::uprotocol::core::usubscription::v3::SubscriberInfo(*from._impl_.subscriber_);
  }
  // @@protoc_insertion_point(copy_constructor:uprotocol.core.usubscription.v3.NotificationsRequest)
}

inline void NotificationsRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.topic_){nullptr}
    , decltype(_impl_.subscriber_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NotificationsRequest::~NotificationsRequest() {
  // @@protoc_insertion_point(destructor:uprotocol.core.usubscription.v3.NotificationsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NotificationsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.topic_;
  if (this != internal_default_instance()) delete _impl_.subscriber_;
}

void NotificationsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NotificationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:uprotocol.core.usubscription.v3.NotificationsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.topic_ != nullptr) {
    delete _impl_.topic_;
  }
  _impl_.topic_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.subscriber_ != nullptr) {
    delete _impl_.subscriber_;
  }
  _impl_.subscriber_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NotificationsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .uprotocol.v1.UUri topic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_topic(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .uprotocol.core.usubscription.v3.SubscriberInfo subscriber = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscriber(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NotificationsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uprotocol.core.usubscription.v3.NotificationsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .uprotocol.v1.UUri topic = 1;
  if (this->_internal_has_topic()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::topic(this),
        _Internal::topic(this).GetCachedSize(), target, stream);
  }

  // .uprotocol.core.usubscription.v3.SubscriberInfo subscriber = 2;
  if (this->_internal_has_subscriber()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::subscriber(this),
        _Internal::subscriber(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uprotocol.core.usubscription.v3.NotificationsRequest)
  return target;
}

size_t NotificationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uprotocol.core.usubscription.v3.NotificationsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .uprotocol.v1.UUri topic = 1;
  if (this->_internal_has_topic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.topic_);
  }

  // .uprotocol.core.usubscription.v3.SubscriberInfo subscriber = 2;
  if (this->_internal_has_subscriber()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.subscriber_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NotificationsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NotificationsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NotificationsRequest::GetClassData() const { return &_class_data_; }


void NotificationsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NotificationsRequest*>(&to_msg);
  auto& from = static_cast<const NotificationsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:uprotocol.core.usubscription.v3.NotificationsRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_topic()) {
    _this->_internal_mutable_topic()->::uprotocol::v1::UUri::MergeFrom(
        from._internal_topic());
  }
  if (from._internal_has_subscriber()) {
    _this->_internal_mutable_subscriber()->::uprotocol::core::usubscription::v3::SubscriberInfo::MergeFrom(
        from._internal_subscriber());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NotificationsRequest::CopyFrom(const NotificationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uprotocol.core.usubscription.v3.NotificationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotificationsRequest::IsInitialized() const {
  return true;
}

void NotificationsRequest::InternalSwap(NotificationsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NotificationsRequest, _impl_.subscriber_)
      + sizeof(NotificationsRequest::_impl_.subscriber_)
      - PROTOBUF_FIELD_OFFSET(NotificationsRequest, _impl_.topic_)>(
          reinterpret_cast<char*>(&_impl_.topic_),
          reinterpret_cast<char*>(&other->_impl_.topic_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NotificationsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_core_2fusubscription_2fv3_2fusubscription_2eproto_getter, &descriptor_table_core_2fusubscription_2fv3_2fusubscription_2eproto_once,
      file_level_metadata_core_2fusubscription_2fv3_2fusubscription_2eproto[13]);
}

// ===================================================================

class CreateTopicRequest::_Internal {
 public:
  static const ::uprotocol::v1::UUri& topic(const CreateTopicRequest* msg);
};

const ::uprotocol::v1::UUri&
CreateTopicRequest::_Internal::topic(const CreateTopicRequest* msg) {
  return *msg->_impl_.topic_;
}
void CreateTopicRequest::clear_topic() {
  if (GetArenaForAllocation() == nullptr && _impl_.topic_ != nullptr) {
    delete _impl_.topic_;
  }
  _impl_.topic_ = nullptr;
}
CreateTopicRequest::CreateTopicRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:uprotocol.core.usubscription.v3.CreateTopicRequest)
}
CreateTopicRequest::CreateTopicRequest(const CreateTopicRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateTopicRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.topic_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_topic()) {
    _this->_impl_.topic_ = new ::uprotocol::v1::UUri(*from._impl_.topic_);
  }
  // @@protoc_insertion_point(copy_constructor:uprotocol.core.usubscription.v3.CreateTopicRequest)
}

inline void CreateTopicRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.topic_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CreateTopicRequest::~CreateTopicRequest() {
  // @@protoc_insertion_point(destructor:uprotocol.core.usubscription.v3.CreateTopicRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateTopicRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.topic_;
}

void CreateTopicRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateTopicRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:uprotocol.core.usubscription.v3.CreateTopicRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.topic_ != nullptr) {
    delete _impl_.topic_;
  }
  _impl_.topic_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateTopicRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .uprotocol.v1.UUri topic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_topic(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateTopicRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uprotocol.core.usubscription.v3.CreateTopicRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .uprotocol.v1.UUri topic = 1;
  if (this->_internal_has_topic()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::topic(this),
        _Internal::topic(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uprotocol.core.usubscription.v3.CreateTopicRequest)
  return target;
}

size_t CreateTopicRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uprotocol.core.usubscription.v3.CreateTopicRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .uprotocol.v1.UUri topic = 1;
  if (this->_internal_has_topic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.topic_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateTopicRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateTopicRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateTopicRequest::GetClassData() const { return &_class_data_; }


void CreateTopicRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateTopicRequest*>(&to_msg);
  auto& from = static_cast<const CreateTopicRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:uprotocol.core.usubscription.v3.CreateTopicRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_topic()) {
    _this->_internal_mutable_topic()->::uprotocol::v1::UUri::MergeFrom(
        from._internal_topic());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateTopicRequest::CopyFrom(const CreateTopicRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uprotocol.core.usubscription.v3.CreateTopicRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTopicRequest::IsInitialized() const {
  return true;
}

void CreateTopicRequest::InternalSwap(CreateTopicRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.topic_, other->_impl_.topic_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateTopicRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_core_2fusubscription_2fv3_2fusubscription_2eproto_getter, &descriptor_table_core_2fusubscription_2fv3_2fusubscription_2eproto_once,
      file_level_metadata_core_2fusubscription_2fv3_2fusubscription_2eproto[14]);
}

// ===================================================================

class DeprecateTopicRequest::_Internal {
 public:
  static const ::uprotocol::v1::UUri& topic(const DeprecateTopicRequest* msg);
};

const ::uprotocol::v1::UUri&
DeprecateTopicRequest::_Internal::topic(const DeprecateTopicRequest* msg) {
  return *msg->_impl_.topic_;
}
void DeprecateTopicRequest::clear_topic() {
  if (GetArenaForAllocation() == nullptr && _impl_.topic_ != nullptr) {
    delete _impl_.topic_;
  }
  _impl_.topic_ = nullptr;
}
DeprecateTopicRequest::DeprecateTopicRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:uprotocol.core.usubscription.v3.DeprecateTopicRequest)
}
DeprecateTopicRequest::DeprecateTopicRequest(const DeprecateTopicRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeprecateTopicRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.topic_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_topic()) {
    _this->_impl_.topic_ = new ::uprotocol::v1::UUri(*from._impl_.topic_);
  }
  // @@protoc_insertion_point(copy_constructor:uprotocol.core.usubscription.v3.DeprecateTopicRequest)
}

inline void DeprecateTopicRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.topic_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeprecateTopicRequest::~DeprecateTopicRequest() {
  // @@protoc_insertion_point(destructor:uprotocol.core.usubscription.v3.DeprecateTopicRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeprecateTopicRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.topic_;
}

void DeprecateTopicRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeprecateTopicRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:uprotocol.core.usubscription.v3.DeprecateTopicRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.topic_ != nullptr) {
    delete _impl_.topic_;
  }
  _impl_.topic_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeprecateTopicRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .uprotocol.v1.UUri topic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_topic(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeprecateTopicRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uprotocol.core.usubscription.v3.DeprecateTopicRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .uprotocol.v1.UUri topic = 1;
  if (this->_internal_has_topic()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::topic(this),
        _Internal::topic(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uprotocol.core.usubscription.v3.DeprecateTopicRequest)
  return target;
}

size_t DeprecateTopicRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uprotocol.core.usubscription.v3.DeprecateTopicRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .uprotocol.v1.UUri topic = 1;
  if (this->_internal_has_topic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.topic_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeprecateTopicRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeprecateTopicRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeprecateTopicRequest::GetClassData() const { return &_class_data_; }


void DeprecateTopicRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeprecateTopicRequest*>(&to_msg);
  auto& from = static_cast<const DeprecateTopicRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:uprotocol.core.usubscription.v3.DeprecateTopicRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_topic()) {
    _this->_internal_mutable_topic()->::uprotocol::v1::UUri::MergeFrom(
        from._internal_topic());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeprecateTopicRequest::CopyFrom(const DeprecateTopicRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uprotocol.core.usubscription.v3.DeprecateTopicRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeprecateTopicRequest::IsInitialized() const {
  return true;
}

void DeprecateTopicRequest::InternalSwap(DeprecateTopicRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.topic_, other->_impl_.topic_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeprecateTopicRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_core_2fusubscription_2fv3_2fusubscription_2eproto_getter, &descriptor_table_core_2fusubscription_2fv3_2fusubscription_2eproto_once,
      file_level_metadata_core_2fusubscription_2fv3_2fusubscription_2eproto[15]);
}

// ===================================================================

class Update::_Internal {
 public:
  static const ::uprotocol::v1::UUri& topic(const Update* msg);
  static const ::uprotocol::core::usubscription::v3::SubscriberInfo& subscriber(const Update* msg);
  static const ::uprotocol::core::usubscription::v3::SubscriptionStatus& status(const Update* msg);
  static const ::uprotocol::core::usubscription::v3::SubscribeAttributes& attributes(const Update* msg);
};

const ::uprotocol::v1::UUri&
Update::_Internal::topic(const Update* msg) {
  return *msg->_impl_.topic_;
}
const ::uprotocol::core::usubscription::v3::SubscriberInfo&
Update::_Internal::subscriber(const Update* msg) {
  return *msg->_impl_.subscriber_;
}
const ::uprotocol::core::usubscription::v3::SubscriptionStatus&
Update::_Internal::status(const Update* msg) {
  return *msg->_impl_.status_;
}
const ::uprotocol::core::usubscription::v3::SubscribeAttributes&
Update::_Internal::attributes(const Update* msg) {
  return *msg->_impl_.attributes_;
}
void Update::clear_topic() {
  if (GetArenaForAllocation() == nullptr && _impl_.topic_ != nullptr) {
    delete _impl_.topic_;
  }
  _impl_.topic_ = nullptr;
}
Update::Update(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:uprotocol.core.usubscription.v3.Update)
}
Update::Update(const Update& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Update* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.topic_){nullptr}
    , decltype(_impl_.subscriber_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.attributes_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_topic()) {
    _this->_impl_.topic_ = new ::uprotocol::v1::UUri(*from._impl_.topic_);
  }
  if (from._internal_has_subscriber()) {
    _this->_impl_.subscriber_ = new ::uprotocol::core::usubscription::v3::SubscriberInfo(*from._impl_.subscriber_);
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::uprotocol::core::usubscription::v3::SubscriptionStatus(*from._impl_.status_);
  }
  if (from._internal_has_attributes()) {
    _this->_impl_.attributes_ = new ::uprotocol::core::usubscription::v3::SubscribeAttributes(*from._impl_.attributes_);
  }
  // @@protoc_insertion_point(copy_constructor:uprotocol.core.usubscription.v3.Update)
}

inline void Update::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.topic_){nullptr}
    , decltype(_impl_.subscriber_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , decltype(_impl_.attributes_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Update::~Update() {
  // @@protoc_insertion_point(destructor:uprotocol.core.usubscription.v3.Update)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Update::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.topic_;
  if (this != internal_default_instance()) delete _impl_.subscriber_;
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.attributes_;
}

void Update::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Update::Clear() {
// @@protoc_insertion_point(message_clear_start:uprotocol.core.usubscription.v3.Update)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.topic_ != nullptr) {
    delete _impl_.topic_;
  }
  _impl_.topic_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.subscriber_ != nullptr) {
    delete _impl_.subscriber_;
  }
  _impl_.subscriber_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.attributes_ != nullptr) {
    delete _impl_.attributes_;
  }
  _impl_.attributes_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Update::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .uprotocol.v1.UUri topic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_topic(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .uprotocol.core.usubscription.v3.SubscriberInfo subscriber = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscriber(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .uprotocol.core.usubscription.v3.SubscriptionStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .uprotocol.core.usubscription.v3.SubscribeAttributes attributes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_attributes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Update::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uprotocol.core.usubscription.v3.Update)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .uprotocol.v1.UUri topic = 1;
  if (this->_internal_has_topic()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::topic(this),
        _Internal::topic(this).GetCachedSize(), target, stream);
  }

  // .uprotocol.core.usubscription.v3.SubscriberInfo subscriber = 2;
  if (this->_internal_has_subscriber()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::subscriber(this),
        _Internal::subscriber(this).GetCachedSize(), target, stream);
  }

  // .uprotocol.core.usubscription.v3.SubscriptionStatus status = 3;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .uprotocol.core.usubscription.v3.SubscribeAttributes attributes = 4;
  if (this->_internal_has_attributes()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::attributes(this),
        _Internal::attributes(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uprotocol.core.usubscription.v3.Update)
  return target;
}

size_t Update::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uprotocol.core.usubscription.v3.Update)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .uprotocol.v1.UUri topic = 1;
  if (this->_internal_has_topic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.topic_);
  }

  // .uprotocol.core.usubscription.v3.SubscriberInfo subscriber = 2;
  if (this->_internal_has_subscriber()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.subscriber_);
  }

  // .uprotocol.core.usubscription.v3.SubscriptionStatus status = 3;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .uprotocol.core.usubscription.v3.SubscribeAttributes attributes = 4;
  if (this->_internal_has_attributes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.attributes_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Update::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Update::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Update::GetClassData() const { return &_class_data_; }


void Update::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Update*>(&to_msg);
  auto& from = static_cast<const Update&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:uprotocol.core.usubscription.v3.Update)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_topic()) {
    _this->_internal_mutable_topic()->::uprotocol::v1::UUri::MergeFrom(
        from._internal_topic());
  }
  if (from._internal_has_subscriber()) {
    _this->_internal_mutable_subscriber()->::uprotocol::core::usubscription::v3::SubscriberInfo::MergeFrom(
        from._internal_subscriber());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::uprotocol::core::usubscription::v3::SubscriptionStatus::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_attributes()) {
    _this->_internal_mutable_attributes()->::uprotocol::core::usubscription::v3::SubscribeAttributes::MergeFrom(
        from._internal_attributes());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Update::CopyFrom(const Update& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uprotocol.core.usubscription.v3.Update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Update::IsInitialized() const {
  return true;
}

void Update::InternalSwap(Update* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Update, _impl_.attributes_)
      + sizeof(Update::_impl_.attributes_)
      - PROTOBUF_FIELD_OFFSET(Update, _impl_.topic_)>(
          reinterpret_cast<char*>(&_impl_.topic_),
          reinterpret_cast<char*>(&other->_impl_.topic_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Update::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_core_2fusubscription_2fv3_2fusubscription_2eproto_getter, &descriptor_table_core_2fusubscription_2fv3_2fusubscription_2eproto_once,
      file_level_metadata_core_2fusubscription_2fv3_2fusubscription_2eproto[16]);
}

// ===================================================================

class SubscriptionChangeNotification::_Internal {
 public:
};

SubscriptionChangeNotification::SubscriptionChangeNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:uprotocol.core.usubscription.v3.SubscriptionChangeNotification)
}
SubscriptionChangeNotification::SubscriptionChangeNotification(const SubscriptionChangeNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubscriptionChangeNotification* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.resource_name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.resource_name_ = from._impl_.resource_name_;
  // @@protoc_insertion_point(copy_constructor:uprotocol.core.usubscription.v3.SubscriptionChangeNotification)
}

inline void SubscriptionChangeNotification::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.resource_name_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SubscriptionChangeNotification::~SubscriptionChangeNotification() {
  // @@protoc_insertion_point(destructor:uprotocol.core.usubscription.v3.SubscriptionChangeNotification)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubscriptionChangeNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SubscriptionChangeNotification::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubscriptionChangeNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:uprotocol.core.usubscription.v3.SubscriptionChangeNotification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.resource_name_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscriptionChangeNotification::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .uprotocol.core.usubscription.v3.Update.Resources resource_name = 1 [(.uprotocol.resource_name_mask) = "*"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_resource_name(static_cast<::uprotocol::core::usubscription::v3::Update_Resources>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscriptionChangeNotification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uprotocol.core.usubscription.v3.SubscriptionChangeNotification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .uprotocol.core.usubscription.v3.Update.Resources resource_name = 1 [(.uprotocol.resource_name_mask) = "*"];
  if (this->_internal_resource_name() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_resource_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uprotocol.core.usubscription.v3.SubscriptionChangeNotification)
  return target;
}

size_t SubscriptionChangeNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uprotocol.core.usubscription.v3.SubscriptionChangeNotification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .uprotocol.core.usubscription.v3.Update.Resources resource_name = 1 [(.uprotocol.resource_name_mask) = "*"];
  if (this->_internal_resource_name() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_resource_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscriptionChangeNotification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubscriptionChangeNotification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscriptionChangeNotification::GetClassData() const { return &_class_data_; }


void SubscriptionChangeNotification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubscriptionChangeNotification*>(&to_msg);
  auto& from = static_cast<const SubscriptionChangeNotification&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:uprotocol.core.usubscription.v3.SubscriptionChangeNotification)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_resource_name() != 0) {
    _this->_internal_set_resource_name(from._internal_resource_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscriptionChangeNotification::CopyFrom(const SubscriptionChangeNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uprotocol.core.usubscription.v3.SubscriptionChangeNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriptionChangeNotification::IsInitialized() const {
  return true;
}

void SubscriptionChangeNotification::InternalSwap(SubscriptionChangeNotification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.resource_name_, other->_impl_.resource_name_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscriptionChangeNotification::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_core_2fusubscription_2fv3_2fusubscription_2eproto_getter, &descriptor_table_core_2fusubscription_2fv3_2fusubscription_2eproto_once,
      file_level_metadata_core_2fusubscription_2fv3_2fusubscription_2eproto[17]);
}

// ===================================================================

class PassiveMode::_Internal {
 public:
};

PassiveMode::PassiveMode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:uprotocol.core.usubscription.v3.PassiveMode)
}
PassiveMode::PassiveMode(const PassiveMode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PassiveMode* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.enable_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.enable_ = from._impl_.enable_;
  // @@protoc_insertion_point(copy_constructor:uprotocol.core.usubscription.v3.PassiveMode)
}

inline void PassiveMode::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.enable_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PassiveMode::~PassiveMode() {
  // @@protoc_insertion_point(destructor:uprotocol.core.usubscription.v3.PassiveMode)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PassiveMode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PassiveMode::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PassiveMode::Clear() {
// @@protoc_insertion_point(message_clear_start:uprotocol.core.usubscription.v3.PassiveMode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.enable_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PassiveMode::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PassiveMode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uprotocol.core.usubscription.v3.PassiveMode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->_internal_enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_enable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uprotocol.core.usubscription.v3.PassiveMode)
  return target;
}

size_t PassiveMode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uprotocol.core.usubscription.v3.PassiveMode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->_internal_enable() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PassiveMode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PassiveMode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PassiveMode::GetClassData() const { return &_class_data_; }


void PassiveMode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PassiveMode*>(&to_msg);
  auto& from = static_cast<const PassiveMode&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:uprotocol.core.usubscription.v3.PassiveMode)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_enable() != 0) {
    _this->_internal_set_enable(from._internal_enable());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PassiveMode::CopyFrom(const PassiveMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uprotocol.core.usubscription.v3.PassiveMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PassiveMode::IsInitialized() const {
  return true;
}

void PassiveMode::InternalSwap(PassiveMode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.enable_, other->_impl_.enable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PassiveMode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_core_2fusubscription_2fv3_2fusubscription_2eproto_getter, &descriptor_table_core_2fusubscription_2fv3_2fusubscription_2eproto_once,
      file_level_metadata_core_2fusubscription_2fv3_2fusubscription_2eproto[18]);
}

// ===================================================================

class ResetRequest_Reason::_Internal {
 public:
  using HasBits = decltype(std::declval<ResetRequest_Reason>()._impl_._has_bits_);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ResetRequest_Reason::ResetRequest_Reason(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:uprotocol.core.usubscription.v3.ResetRequest.Reason)
}
ResetRequest_Reason::ResetRequest_Reason(const ResetRequest_Reason& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResetRequest_Reason* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_){}
    , decltype(_impl_.code_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.code_ = from._impl_.code_;
  // @@protoc_insertion_point(copy_constructor:uprotocol.core.usubscription.v3.ResetRequest.Reason)
}

inline void ResetRequest_Reason::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_){}
    , decltype(_impl_.code_){0}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResetRequest_Reason::~ResetRequest_Reason() {
  // @@protoc_insertion_point(destructor:uprotocol.core.usubscription.v3.ResetRequest.Reason)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResetRequest_Reason::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void ResetRequest_Reason::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResetRequest_Reason::Clear() {
// @@protoc_insertion_point(message_clear_start:uprotocol.core.usubscription.v3.ResetRequest.Reason)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.message_.ClearNonDefaultToEmpty();
  }
  _impl_.code_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResetRequest_Reason::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .uprotocol.core.usubscription.v3.ResetRequest.Reason.Code code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_code(static_cast<::uprotocol::core::usubscription::v3::ResetRequest_Reason_Code>(val));
        } else
          goto handle_unusual;
        continue;
      // optional string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "uprotocol.core.usubscription.v3.ResetRequest.Reason.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResetRequest_Reason::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uprotocol.core.usubscription.v3.ResetRequest.Reason)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .uprotocol.core.usubscription.v3.ResetRequest.Reason.Code code = 1;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  // optional string message = 2;
  if (_internal_has_message()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "uprotocol.core.usubscription.v3.ResetRequest.Reason.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uprotocol.core.usubscription.v3.ResetRequest.Reason)
  return target;
}

size_t ResetRequest_Reason::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uprotocol.core.usubscription.v3.ResetRequest.Reason)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string message = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .uprotocol.core.usubscription.v3.ResetRequest.Reason.Code code = 1;
  if (this->_internal_code() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResetRequest_Reason::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResetRequest_Reason::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResetRequest_Reason::GetClassData() const { return &_class_data_; }


void ResetRequest_Reason::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResetRequest_Reason*>(&to_msg);
  auto& from = static_cast<const ResetRequest_Reason&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:uprotocol.core.usubscription.v3.ResetRequest.Reason)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_message()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResetRequest_Reason::CopyFrom(const ResetRequest_Reason& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uprotocol.core.usubscription.v3.ResetRequest.Reason)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetRequest_Reason::IsInitialized() const {
  return true;
}

void ResetRequest_Reason::InternalSwap(ResetRequest_Reason* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.code_, other->_impl_.code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResetRequest_Reason::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_core_2fusubscription_2fv3_2fusubscription_2eproto_getter, &descriptor_table_core_2fusubscription_2fv3_2fusubscription_2eproto_once,
      file_level_metadata_core_2fusubscription_2fv3_2fusubscription_2eproto[19]);
}

// ===================================================================

class ResetRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ResetRequest>()._impl_._has_bits_);
  static const ::uprotocol::core::usubscription::v3::ResetRequest_Reason& reason(const ResetRequest* msg);
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& before(const ResetRequest* msg);
  static void set_has_before(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::uprotocol::core::usubscription::v3::ResetRequest_Reason&
ResetRequest::_Internal::reason(const ResetRequest* msg) {
  return *msg->_impl_.reason_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ResetRequest::_Internal::before(const ResetRequest* msg) {
  return *msg->_impl_.before_;
}
void ResetRequest::clear_before() {
  if (_impl_.before_ != nullptr) _impl_.before_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ResetRequest::ResetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:uprotocol.core.usubscription.v3.ResetRequest)
}
ResetRequest::ResetRequest(const ResetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResetRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reason_){nullptr}
    , decltype(_impl_.before_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_reason()) {
    _this->_impl_.reason_ = new ::uprotocol::core::usubscription::v3::ResetRequest_Reason(*from._impl_.reason_);
  }
  if (from._internal_has_before()) {
    _this->_impl_.before_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.before_);
  }
  // @@protoc_insertion_point(copy_constructor:uprotocol.core.usubscription.v3.ResetRequest)
}

inline void ResetRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reason_){nullptr}
    , decltype(_impl_.before_){nullptr}
  };
}

ResetRequest::~ResetRequest() {
  // @@protoc_insertion_point(destructor:uprotocol.core.usubscription.v3.ResetRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.reason_;
  if (this != internal_default_instance()) delete _impl_.before_;
}

void ResetRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:uprotocol.core.usubscription.v3.ResetRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.reason_ != nullptr);
      _impl_.reason_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.before_ != nullptr);
      _impl_.before_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResetRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .uprotocol.core.usubscription.v3.ResetRequest.Reason reason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reason(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp before = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_before(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResetRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uprotocol.core.usubscription.v3.ResetRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .uprotocol.core.usubscription.v3.ResetRequest.Reason reason = 1;
  if (_internal_has_reason()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::reason(this),
        _Internal::reason(this).GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.Timestamp before = 2;
  if (_internal_has_before()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::before(this),
        _Internal::before(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uprotocol.core.usubscription.v3.ResetRequest)
  return target;
}

size_t ResetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uprotocol.core.usubscription.v3.ResetRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .uprotocol.core.usubscription.v3.ResetRequest.Reason reason = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.reason_);
    }

    // optional .google.protobuf.Timestamp before = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.before_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResetRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResetRequest::GetClassData() const { return &_class_data_; }


void ResetRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResetRequest*>(&to_msg);
  auto& from = static_cast<const ResetRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:uprotocol.core.usubscription.v3.ResetRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_reason()->::uprotocol::core::usubscription::v3::ResetRequest_Reason::MergeFrom(
          from._internal_reason());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_before()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_before());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResetRequest::CopyFrom(const ResetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uprotocol.core.usubscription.v3.ResetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetRequest::IsInitialized() const {
  return true;
}

void ResetRequest::InternalSwap(ResetRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResetRequest, _impl_.before_)
      + sizeof(ResetRequest::_impl_.before_)
      - PROTOBUF_FIELD_OFFSET(ResetRequest, _impl_.reason_)>(
          reinterpret_cast<char*>(&_impl_.reason_),
          reinterpret_cast<char*>(&other->_impl_.reason_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResetRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_core_2fusubscription_2fv3_2fusubscription_2eproto_getter, &descriptor_table_core_2fusubscription_2fv3_2fusubscription_2eproto_once,
      file_level_metadata_core_2fusubscription_2fv3_2fusubscription_2eproto[20]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v3
}  // namespace usubscription
}  // namespace core
}  // namespace uprotocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::uprotocol::core::usubscription::v3::SubscribeAttributes*
Arena::CreateMaybeMessage< ::uprotocol::core::usubscription::v3::SubscribeAttributes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uprotocol::core::usubscription::v3::SubscribeAttributes >(arena);
}
template<> PROTOBUF_NOINLINE ::uprotocol::core::usubscription::v3::SubscriberInfo*
Arena::CreateMaybeMessage< ::uprotocol::core::usubscription::v3::SubscriberInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uprotocol::core::usubscription::v3::SubscriberInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::uprotocol::core::usubscription::v3::SubscriptionStatus*
Arena::CreateMaybeMessage< ::uprotocol::core::usubscription::v3::SubscriptionStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uprotocol::core::usubscription::v3::SubscriptionStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::uprotocol::core::usubscription::v3::EventDeliveryConfig_AttributesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::uprotocol::core::usubscription::v3::EventDeliveryConfig_AttributesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uprotocol::core::usubscription::v3::EventDeliveryConfig_AttributesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::uprotocol::core::usubscription::v3::EventDeliveryConfig*
Arena::CreateMaybeMessage< ::uprotocol::core::usubscription::v3::EventDeliveryConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uprotocol::core::usubscription::v3::EventDeliveryConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::uprotocol::core::usubscription::v3::SubscriptionRequest*
Arena::CreateMaybeMessage< ::uprotocol::core::usubscription::v3::SubscriptionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uprotocol::core::usubscription::v3::SubscriptionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::uprotocol::core::usubscription::v3::SubscriptionResponse*
Arena::CreateMaybeMessage< ::uprotocol::core::usubscription::v3::SubscriptionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uprotocol::core::usubscription::v3::SubscriptionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::uprotocol::core::usubscription::v3::UnsubscribeRequest*
Arena::CreateMaybeMessage< ::uprotocol::core::usubscription::v3::UnsubscribeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uprotocol::core::usubscription::v3::UnsubscribeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::uprotocol::core::usubscription::v3::FetchSubscribersRequest*
Arena::CreateMaybeMessage< ::uprotocol::core::usubscription::v3::FetchSubscribersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uprotocol::core::usubscription::v3::FetchSubscribersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::uprotocol::core::usubscription::v3::FetchSubscribersResponse*
Arena::CreateMaybeMessage< ::uprotocol::core::usubscription::v3::FetchSubscribersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uprotocol::core::usubscription::v3::FetchSubscribersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::uprotocol::core::usubscription::v3::Subscription*
Arena::CreateMaybeMessage< ::uprotocol::core::usubscription::v3::Subscription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uprotocol::core::usubscription::v3::Subscription >(arena);
}
template<> PROTOBUF_NOINLINE ::uprotocol::core::usubscription::v3::FetchSubscriptionsRequest*
Arena::CreateMaybeMessage< ::uprotocol::core::usubscription::v3::FetchSubscriptionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uprotocol::core::usubscription::v3::FetchSubscriptionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::uprotocol::core::usubscription::v3::FetchSubscriptionsResponse*
Arena::CreateMaybeMessage< ::uprotocol::core::usubscription::v3::FetchSubscriptionsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uprotocol::core::usubscription::v3::FetchSubscriptionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::uprotocol::core::usubscription::v3::NotificationsRequest*
Arena::CreateMaybeMessage< ::uprotocol::core::usubscription::v3::NotificationsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uprotocol::core::usubscription::v3::NotificationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::uprotocol::core::usubscription::v3::CreateTopicRequest*
Arena::CreateMaybeMessage< ::uprotocol::core::usubscription::v3::CreateTopicRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uprotocol::core::usubscription::v3::CreateTopicRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::uprotocol::core::usubscription::v3::DeprecateTopicRequest*
Arena::CreateMaybeMessage< ::uprotocol::core::usubscription::v3::DeprecateTopicRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uprotocol::core::usubscription::v3::DeprecateTopicRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::uprotocol::core::usubscription::v3::Update*
Arena::CreateMaybeMessage< ::uprotocol::core::usubscription::v3::Update >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uprotocol::core::usubscription::v3::Update >(arena);
}
template<> PROTOBUF_NOINLINE ::uprotocol::core::usubscription::v3::SubscriptionChangeNotification*
Arena::CreateMaybeMessage< ::uprotocol::core::usubscription::v3::SubscriptionChangeNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uprotocol::core::usubscription::v3::SubscriptionChangeNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::uprotocol::core::usubscription::v3::PassiveMode*
Arena::CreateMaybeMessage< ::uprotocol::core::usubscription::v3::PassiveMode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uprotocol::core::usubscription::v3::PassiveMode >(arena);
}
template<> PROTOBUF_NOINLINE ::uprotocol::core::usubscription::v3::ResetRequest_Reason*
Arena::CreateMaybeMessage< ::uprotocol::core::usubscription::v3::ResetRequest_Reason >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uprotocol::core::usubscription::v3::ResetRequest_Reason >(arena);
}
template<> PROTOBUF_NOINLINE ::uprotocol::core::usubscription::v3::ResetRequest*
Arena::CreateMaybeMessage< ::uprotocol::core::usubscription::v3::ResetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uprotocol::core::usubscription::v3::ResetRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
