// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/udiscovery/v3/udiscovery.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_core_2fudiscovery_2fv3_2fudiscovery_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_core_2fudiscovery_2fv3_2fudiscovery_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include "uprotocol_options.pb.h"
#include "uri.pb.h"
#include "ustatus.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_core_2fudiscovery_2fv3_2fudiscovery_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_core_2fudiscovery_2fv3_2fudiscovery_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_core_2fudiscovery_2fv3_2fudiscovery_2eproto;
namespace uprotocol {
namespace core {
namespace udiscovery {
namespace v3 {
class AddNodesRequest;
struct AddNodesRequestDefaultTypeInternal;
extern AddNodesRequestDefaultTypeInternal _AddNodesRequest_default_instance_;
class DeleteNodesRequest;
struct DeleteNodesRequestDefaultTypeInternal;
extern DeleteNodesRequestDefaultTypeInternal _DeleteNodesRequest_default_instance_;
class FindNodePropertiesRequest;
struct FindNodePropertiesRequestDefaultTypeInternal;
extern FindNodePropertiesRequestDefaultTypeInternal _FindNodePropertiesRequest_default_instance_;
class FindNodePropertiesResponse;
struct FindNodePropertiesResponseDefaultTypeInternal;
extern FindNodePropertiesResponseDefaultTypeInternal _FindNodePropertiesResponse_default_instance_;
class FindNodePropertiesResponse_PropertiesEntry_DoNotUse;
struct FindNodePropertiesResponse_PropertiesEntry_DoNotUseDefaultTypeInternal;
extern FindNodePropertiesResponse_PropertiesEntry_DoNotUseDefaultTypeInternal _FindNodePropertiesResponse_PropertiesEntry_DoNotUse_default_instance_;
class FindNodesRequest;
struct FindNodesRequestDefaultTypeInternal;
extern FindNodesRequestDefaultTypeInternal _FindNodesRequest_default_instance_;
class FindNodesResponse;
struct FindNodesResponseDefaultTypeInternal;
extern FindNodesResponseDefaultTypeInternal _FindNodesResponse_default_instance_;
class LookupUriResponse;
struct LookupUriResponseDefaultTypeInternal;
extern LookupUriResponseDefaultTypeInternal _LookupUriResponse_default_instance_;
class Node;
struct NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
class NodeNotificationTopic;
struct NodeNotificationTopicDefaultTypeInternal;
extern NodeNotificationTopicDefaultTypeInternal _NodeNotificationTopic_default_instance_;
class Node_PropertiesEntry_DoNotUse;
struct Node_PropertiesEntry_DoNotUseDefaultTypeInternal;
extern Node_PropertiesEntry_DoNotUseDefaultTypeInternal _Node_PropertiesEntry_DoNotUse_default_instance_;
class Notification;
struct NotificationDefaultTypeInternal;
extern NotificationDefaultTypeInternal _Notification_default_instance_;
class NotificationsRequest;
struct NotificationsRequestDefaultTypeInternal;
extern NotificationsRequestDefaultTypeInternal _NotificationsRequest_default_instance_;
class ObserverInfo;
struct ObserverInfoDefaultTypeInternal;
extern ObserverInfoDefaultTypeInternal _ObserverInfo_default_instance_;
class PropertyValue;
struct PropertyValueDefaultTypeInternal;
extern PropertyValueDefaultTypeInternal _PropertyValue_default_instance_;
class ResolveUriRequest;
struct ResolveUriRequestDefaultTypeInternal;
extern ResolveUriRequestDefaultTypeInternal _ResolveUriRequest_default_instance_;
class ResolveUriResponse;
struct ResolveUriResponseDefaultTypeInternal;
extern ResolveUriResponseDefaultTypeInternal _ResolveUriResponse_default_instance_;
class UpdateNodeRequest;
struct UpdateNodeRequestDefaultTypeInternal;
extern UpdateNodeRequestDefaultTypeInternal _UpdateNodeRequest_default_instance_;
class UpdatePropertyRequest;
struct UpdatePropertyRequestDefaultTypeInternal;
extern UpdatePropertyRequestDefaultTypeInternal _UpdatePropertyRequest_default_instance_;
}  // namespace v3
}  // namespace udiscovery
}  // namespace core
}  // namespace uprotocol
PROTOBUF_NAMESPACE_OPEN
template<> ::uprotocol::core::udiscovery::v3::AddNodesRequest* Arena::CreateMaybeMessage<::uprotocol::core::udiscovery::v3::AddNodesRequest>(Arena*);
template<> ::uprotocol::core::udiscovery::v3::DeleteNodesRequest* Arena::CreateMaybeMessage<::uprotocol::core::udiscovery::v3::DeleteNodesRequest>(Arena*);
template<> ::uprotocol::core::udiscovery::v3::FindNodePropertiesRequest* Arena::CreateMaybeMessage<::uprotocol::core::udiscovery::v3::FindNodePropertiesRequest>(Arena*);
template<> ::uprotocol::core::udiscovery::v3::FindNodePropertiesResponse* Arena::CreateMaybeMessage<::uprotocol::core::udiscovery::v3::FindNodePropertiesResponse>(Arena*);
template<> ::uprotocol::core::udiscovery::v3::FindNodePropertiesResponse_PropertiesEntry_DoNotUse* Arena::CreateMaybeMessage<::uprotocol::core::udiscovery::v3::FindNodePropertiesResponse_PropertiesEntry_DoNotUse>(Arena*);
template<> ::uprotocol::core::udiscovery::v3::FindNodesRequest* Arena::CreateMaybeMessage<::uprotocol::core::udiscovery::v3::FindNodesRequest>(Arena*);
template<> ::uprotocol::core::udiscovery::v3::FindNodesResponse* Arena::CreateMaybeMessage<::uprotocol::core::udiscovery::v3::FindNodesResponse>(Arena*);
template<> ::uprotocol::core::udiscovery::v3::LookupUriResponse* Arena::CreateMaybeMessage<::uprotocol::core::udiscovery::v3::LookupUriResponse>(Arena*);
template<> ::uprotocol::core::udiscovery::v3::Node* Arena::CreateMaybeMessage<::uprotocol::core::udiscovery::v3::Node>(Arena*);
template<> ::uprotocol::core::udiscovery::v3::NodeNotificationTopic* Arena::CreateMaybeMessage<::uprotocol::core::udiscovery::v3::NodeNotificationTopic>(Arena*);
template<> ::uprotocol::core::udiscovery::v3::Node_PropertiesEntry_DoNotUse* Arena::CreateMaybeMessage<::uprotocol::core::udiscovery::v3::Node_PropertiesEntry_DoNotUse>(Arena*);
template<> ::uprotocol::core::udiscovery::v3::Notification* Arena::CreateMaybeMessage<::uprotocol::core::udiscovery::v3::Notification>(Arena*);
template<> ::uprotocol::core::udiscovery::v3::NotificationsRequest* Arena::CreateMaybeMessage<::uprotocol::core::udiscovery::v3::NotificationsRequest>(Arena*);
template<> ::uprotocol::core::udiscovery::v3::ObserverInfo* Arena::CreateMaybeMessage<::uprotocol::core::udiscovery::v3::ObserverInfo>(Arena*);
template<> ::uprotocol::core::udiscovery::v3::PropertyValue* Arena::CreateMaybeMessage<::uprotocol::core::udiscovery::v3::PropertyValue>(Arena*);
template<> ::uprotocol::core::udiscovery::v3::ResolveUriRequest* Arena::CreateMaybeMessage<::uprotocol::core::udiscovery::v3::ResolveUriRequest>(Arena*);
template<> ::uprotocol::core::udiscovery::v3::ResolveUriResponse* Arena::CreateMaybeMessage<::uprotocol::core::udiscovery::v3::ResolveUriResponse>(Arena*);
template<> ::uprotocol::core::udiscovery::v3::UpdateNodeRequest* Arena::CreateMaybeMessage<::uprotocol::core::udiscovery::v3::UpdateNodeRequest>(Arena*);
template<> ::uprotocol::core::udiscovery::v3::UpdatePropertyRequest* Arena::CreateMaybeMessage<::uprotocol::core::udiscovery::v3::UpdatePropertyRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace uprotocol {
namespace core {
namespace udiscovery {
namespace v3 {

enum Node_Type : int {
  Node_Type_UNSPECIFIED = 0,
  Node_Type_DOMAIN = 1,
  Node_Type_DEVICE = 2,
  Node_Type_ENTITY = 3,
  Node_Type_VERSION = 9,
  Node_Type_TOPIC = 4,
  Node_Type_METHOD = 5,
  Node_Type_MESSAGE = 6,
  Node_Type_RESOURCE = 7,
  Node_Type_USER = 8,
  Node_Type_Node_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Node_Type_Node_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Node_Type_IsValid(int value);
constexpr Node_Type Node_Type_Type_MIN = Node_Type_UNSPECIFIED;
constexpr Node_Type Node_Type_Type_MAX = Node_Type_VERSION;
constexpr int Node_Type_Type_ARRAYSIZE = Node_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Node_Type_descriptor();
template<typename T>
inline const std::string& Node_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Node_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Node_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Node_Type_descriptor(), enum_t_value);
}
inline bool Node_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Node_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Node_Type>(
    Node_Type_descriptor(), name, value);
}
enum Notification_Operation : int {
  Notification_Operation_INVALID = 0,
  Notification_Operation_UPDATE = 1,
  Notification_Operation_ADD = 2,
  Notification_Operation_REMOVE = 3,
  Notification_Operation_Notification_Operation_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Notification_Operation_Notification_Operation_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Notification_Operation_IsValid(int value);
constexpr Notification_Operation Notification_Operation_Operation_MIN = Notification_Operation_INVALID;
constexpr Notification_Operation Notification_Operation_Operation_MAX = Notification_Operation_REMOVE;
constexpr int Notification_Operation_Operation_ARRAYSIZE = Notification_Operation_Operation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Notification_Operation_descriptor();
template<typename T>
inline const std::string& Notification_Operation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Notification_Operation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Notification_Operation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Notification_Operation_descriptor(), enum_t_value);
}
inline bool Notification_Operation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Notification_Operation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Notification_Operation>(
    Notification_Operation_descriptor(), name, value);
}
enum Notification_Resources : int {
  Notification_Resources_nodes = 0,
  Notification_Resources_Notification_Resources_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Notification_Resources_Notification_Resources_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Notification_Resources_IsValid(int value);
constexpr Notification_Resources Notification_Resources_Resources_MIN = Notification_Resources_nodes;
constexpr Notification_Resources Notification_Resources_Resources_MAX = Notification_Resources_nodes;
constexpr int Notification_Resources_Resources_ARRAYSIZE = Notification_Resources_Resources_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Notification_Resources_descriptor();
template<typename T>
inline const std::string& Notification_Resources_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Notification_Resources>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Notification_Resources_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Notification_Resources_descriptor(), enum_t_value);
}
inline bool Notification_Resources_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Notification_Resources* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Notification_Resources>(
    Notification_Resources_descriptor(), name, value);
}
// ===================================================================

class PropertyValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:uprotocol.core.udiscovery.v3.PropertyValue) */ {
 public:
  inline PropertyValue() : PropertyValue(nullptr) {}
  ~PropertyValue() override;
  explicit PROTOBUF_CONSTEXPR PropertyValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PropertyValue(const PropertyValue& from);
  PropertyValue(PropertyValue&& from) noexcept
    : PropertyValue() {
    *this = ::std::move(from);
  }

  inline PropertyValue& operator=(const PropertyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropertyValue& operator=(PropertyValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PropertyValue& default_instance() {
    return *internal_default_instance();
  }
  enum AttrCase {
    kUBoolean = 1,
    kUInteger = 2,
    kUString = 3,
    kUBytes = 4,
    kUUri = 5,
    kUTimestamp = 6,
    kUDouble = 7,
    kUInteger64 = 8,
    ATTR_NOT_SET = 0,
  };

  static inline const PropertyValue* internal_default_instance() {
    return reinterpret_cast<const PropertyValue*>(
               &_PropertyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PropertyValue& a, PropertyValue& b) {
    a.Swap(&b);
  }
  inline void Swap(PropertyValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PropertyValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PropertyValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PropertyValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PropertyValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PropertyValue& from) {
    PropertyValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PropertyValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "uprotocol.core.udiscovery.v3.PropertyValue";
  }
  protected:
  explicit PropertyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUBooleanFieldNumber = 1,
    kUIntegerFieldNumber = 2,
    kUStringFieldNumber = 3,
    kUBytesFieldNumber = 4,
    kUUriFieldNumber = 5,
    kUTimestampFieldNumber = 6,
    kUDoubleFieldNumber = 7,
    kUInteger64FieldNumber = 8,
  };
  // bool u_boolean = 1;
  bool has_u_boolean() const;
  private:
  bool _internal_has_u_boolean() const;
  public:
  void clear_u_boolean();
  bool u_boolean() const;
  void set_u_boolean(bool value);
  private:
  bool _internal_u_boolean() const;
  void _internal_set_u_boolean(bool value);
  public:

  // int32 u_integer = 2;
  bool has_u_integer() const;
  private:
  bool _internal_has_u_integer() const;
  public:
  void clear_u_integer();
  int32_t u_integer() const;
  void set_u_integer(int32_t value);
  private:
  int32_t _internal_u_integer() const;
  void _internal_set_u_integer(int32_t value);
  public:

  // string u_string = 3;
  bool has_u_string() const;
  private:
  bool _internal_has_u_string() const;
  public:
  void clear_u_string();
  const std::string& u_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_u_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_u_string();
  PROTOBUF_NODISCARD std::string* release_u_string();
  void set_allocated_u_string(std::string* u_string);
  private:
  const std::string& _internal_u_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_u_string(const std::string& value);
  std::string* _internal_mutable_u_string();
  public:

  // bytes u_bytes = 4;
  bool has_u_bytes() const;
  private:
  bool _internal_has_u_bytes() const;
  public:
  void clear_u_bytes();
  const std::string& u_bytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_u_bytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_u_bytes();
  PROTOBUF_NODISCARD std::string* release_u_bytes();
  void set_allocated_u_bytes(std::string* u_bytes);
  private:
  const std::string& _internal_u_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_u_bytes(const std::string& value);
  std::string* _internal_mutable_u_bytes();
  public:

  // string u_uri = 5;
  bool has_u_uri() const;
  private:
  bool _internal_has_u_uri() const;
  public:
  void clear_u_uri();
  const std::string& u_uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_u_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_u_uri();
  PROTOBUF_NODISCARD std::string* release_u_uri();
  void set_allocated_u_uri(std::string* u_uri);
  private:
  const std::string& _internal_u_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_u_uri(const std::string& value);
  std::string* _internal_mutable_u_uri();
  public:

  // .google.protobuf.Timestamp u_timestamp = 6;
  bool has_u_timestamp() const;
  private:
  bool _internal_has_u_timestamp() const;
  public:
  void clear_u_timestamp();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& u_timestamp() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_u_timestamp();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_u_timestamp();
  void set_allocated_u_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* u_timestamp);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_u_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_u_timestamp();
  public:
  void unsafe_arena_set_allocated_u_timestamp(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* u_timestamp);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_u_timestamp();

  // double u_double = 7;
  bool has_u_double() const;
  private:
  bool _internal_has_u_double() const;
  public:
  void clear_u_double();
  double u_double() const;
  void set_u_double(double value);
  private:
  double _internal_u_double() const;
  void _internal_set_u_double(double value);
  public:

  // int64 u_integer_64 = 8;
  bool has_u_integer_64() const;
  private:
  bool _internal_has_u_integer_64() const;
  public:
  void clear_u_integer_64();
  int64_t u_integer_64() const;
  void set_u_integer_64(int64_t value);
  private:
  int64_t _internal_u_integer_64() const;
  void _internal_set_u_integer_64(int64_t value);
  public:

  void clear_attr();
  AttrCase attr_case() const;
  // @@protoc_insertion_point(class_scope:uprotocol.core.udiscovery.v3.PropertyValue)
 private:
  class _Internal;
  void set_has_u_boolean();
  void set_has_u_integer();
  void set_has_u_string();
  void set_has_u_bytes();
  void set_has_u_uri();
  void set_has_u_timestamp();
  void set_has_u_double();
  void set_has_u_integer_64();

  inline bool has_attr() const;
  inline void clear_has_attr();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union AttrUnion {
      constexpr AttrUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      bool u_boolean_;
      int32_t u_integer_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr u_string_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr u_bytes_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr u_uri_;
      ::PROTOBUF_NAMESPACE_ID::Timestamp* u_timestamp_;
      double u_double_;
      int64_t u_integer_64_;
    } attr_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_core_2fudiscovery_2fv3_2fudiscovery_2eproto;
};
// -------------------------------------------------------------------

class Node_PropertiesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Node_PropertiesEntry_DoNotUse, 
    std::string, ::uprotocol::core::udiscovery::v3::PropertyValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Node_PropertiesEntry_DoNotUse, 
    std::string, ::uprotocol::core::udiscovery::v3::PropertyValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  Node_PropertiesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Node_PropertiesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Node_PropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Node_PropertiesEntry_DoNotUse& other);
  static const Node_PropertiesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Node_PropertiesEntry_DoNotUse*>(&_Node_PropertiesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "uprotocol.core.udiscovery.v3.Node.PropertiesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_core_2fudiscovery_2fv3_2fudiscovery_2eproto;
};

// -------------------------------------------------------------------

class Node final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:uprotocol.core.udiscovery.v3.Node) */ {
 public:
  inline Node() : Node(nullptr) {}
  ~Node() override;
  explicit PROTOBUF_CONSTEXPR Node(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Node(const Node& from);
  Node(Node&& from) noexcept
    : Node() {
    *this = ::std::move(from);
  }

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  inline Node& operator=(Node&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Node& default_instance() {
    return *internal_default_instance();
  }
  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
               &_Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Node& a, Node& b) {
    a.Swap(&b);
  }
  inline void Swap(Node* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Node* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Node* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Node>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Node& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Node& from) {
    Node::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Node* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "uprotocol.core.udiscovery.v3.Node";
  }
  protected:
  explicit Node(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  typedef Node_Type Type;
  static constexpr Type UNSPECIFIED =
    Node_Type_UNSPECIFIED;
  static constexpr Type DOMAIN =
    Node_Type_DOMAIN;
  static constexpr Type DEVICE =
    Node_Type_DEVICE;
  static constexpr Type ENTITY =
    Node_Type_ENTITY;
  static constexpr Type VERSION =
    Node_Type_VERSION;
  static constexpr Type TOPIC =
    Node_Type_TOPIC;
  static constexpr Type METHOD =
    Node_Type_METHOD;
  static constexpr Type MESSAGE =
    Node_Type_MESSAGE;
  static constexpr Type RESOURCE =
    Node_Type_RESOURCE;
  static constexpr Type USER =
    Node_Type_USER;
  static inline bool Type_IsValid(int value) {
    return Node_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Node_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Node_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Node_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Node_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Node_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return Node_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 2,
    kPropertiesFieldNumber = 3,
    kUriFieldNumber = 1,
    kTypeFieldNumber = 4,
  };
  // repeated .uprotocol.core.udiscovery.v3.Node nodes = 2;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;
  public:
  void clear_nodes();
  ::uprotocol::core::udiscovery::v3::Node* mutable_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::uprotocol::core::udiscovery::v3::Node >*
      mutable_nodes();
  private:
  const ::uprotocol::core::udiscovery::v3::Node& _internal_nodes(int index) const;
  ::uprotocol::core::udiscovery::v3::Node* _internal_add_nodes();
  public:
  const ::uprotocol::core::udiscovery::v3::Node& nodes(int index) const;
  ::uprotocol::core::udiscovery::v3::Node* add_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::uprotocol::core::udiscovery::v3::Node >&
      nodes() const;

  // map<string, .uprotocol.core.udiscovery.v3.PropertyValue> properties = 3;
  int properties_size() const;
  private:
  int _internal_properties_size() const;
  public:
  void clear_properties();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::uprotocol::core::udiscovery::v3::PropertyValue >&
      _internal_properties() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::uprotocol::core::udiscovery::v3::PropertyValue >*
      _internal_mutable_properties();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::uprotocol::core::udiscovery::v3::PropertyValue >&
      properties() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::uprotocol::core::udiscovery::v3::PropertyValue >*
      mutable_properties();

  // string uri = 1;
  void clear_uri();
  const std::string& uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uri();
  PROTOBUF_NODISCARD std::string* release_uri();
  void set_allocated_uri(std::string* uri);
  private:
  const std::string& _internal_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uri(const std::string& value);
  std::string* _internal_mutable_uri();
  public:

  // .uprotocol.core.udiscovery.v3.Node.Type type = 4;
  void clear_type();
  ::uprotocol::core::udiscovery::v3::Node_Type type() const;
  void set_type(::uprotocol::core::udiscovery::v3::Node_Type value);
  private:
  ::uprotocol::core::udiscovery::v3::Node_Type _internal_type() const;
  void _internal_set_type(::uprotocol::core::udiscovery::v3::Node_Type value);
  public:

  // @@protoc_insertion_point(class_scope:uprotocol.core.udiscovery.v3.Node)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::uprotocol::core::udiscovery::v3::Node > nodes_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Node_PropertiesEntry_DoNotUse,
        std::string, ::uprotocol::core::udiscovery::v3::PropertyValue,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> properties_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_core_2fudiscovery_2fv3_2fudiscovery_2eproto;
};
// -------------------------------------------------------------------

class UpdateNodeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:uprotocol.core.udiscovery.v3.UpdateNodeRequest) */ {
 public:
  inline UpdateNodeRequest() : UpdateNodeRequest(nullptr) {}
  ~UpdateNodeRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateNodeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateNodeRequest(const UpdateNodeRequest& from);
  UpdateNodeRequest(UpdateNodeRequest&& from) noexcept
    : UpdateNodeRequest() {
    *this = ::std::move(from);
  }

  inline UpdateNodeRequest& operator=(const UpdateNodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateNodeRequest& operator=(UpdateNodeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateNodeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateNodeRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateNodeRequest*>(
               &_UpdateNodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UpdateNodeRequest& a, UpdateNodeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateNodeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateNodeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateNodeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateNodeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateNodeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateNodeRequest& from) {
    UpdateNodeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateNodeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "uprotocol.core.udiscovery.v3.UpdateNodeRequest";
  }
  protected:
  explicit UpdateNodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeFieldNumber = 1,
    kTtlFieldNumber = 3,
  };
  // .uprotocol.core.udiscovery.v3.Node node = 1;
  bool has_node() const;
  private:
  bool _internal_has_node() const;
  public:
  void clear_node();
  const ::uprotocol::core::udiscovery::v3::Node& node() const;
  PROTOBUF_NODISCARD ::uprotocol::core::udiscovery::v3::Node* release_node();
  ::uprotocol::core::udiscovery::v3::Node* mutable_node();
  void set_allocated_node(::uprotocol::core::udiscovery::v3::Node* node);
  private:
  const ::uprotocol::core::udiscovery::v3::Node& _internal_node() const;
  ::uprotocol::core::udiscovery::v3::Node* _internal_mutable_node();
  public:
  void unsafe_arena_set_allocated_node(
      ::uprotocol::core::udiscovery::v3::Node* node);
  ::uprotocol::core::udiscovery::v3::Node* unsafe_arena_release_node();

  // optional int32 ttl = 3;
  bool has_ttl() const;
  private:
  bool _internal_has_ttl() const;
  public:
  void clear_ttl();
  int32_t ttl() const;
  void set_ttl(int32_t value);
  private:
  int32_t _internal_ttl() const;
  void _internal_set_ttl(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:uprotocol.core.udiscovery.v3.UpdateNodeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uprotocol::core::udiscovery::v3::Node* node_;
    int32_t ttl_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_core_2fudiscovery_2fv3_2fudiscovery_2eproto;
};
// -------------------------------------------------------------------

class DeleteNodesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:uprotocol.core.udiscovery.v3.DeleteNodesRequest) */ {
 public:
  inline DeleteNodesRequest() : DeleteNodesRequest(nullptr) {}
  ~DeleteNodesRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteNodesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteNodesRequest(const DeleteNodesRequest& from);
  DeleteNodesRequest(DeleteNodesRequest&& from) noexcept
    : DeleteNodesRequest() {
    *this = ::std::move(from);
  }

  inline DeleteNodesRequest& operator=(const DeleteNodesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteNodesRequest& operator=(DeleteNodesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteNodesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteNodesRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteNodesRequest*>(
               &_DeleteNodesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DeleteNodesRequest& a, DeleteNodesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteNodesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteNodesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteNodesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteNodesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteNodesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteNodesRequest& from) {
    DeleteNodesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteNodesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "uprotocol.core.udiscovery.v3.DeleteNodesRequest";
  }
  protected:
  explicit DeleteNodesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrisFieldNumber = 1,
  };
  // repeated string uris = 1;
  int uris_size() const;
  private:
  int _internal_uris_size() const;
  public:
  void clear_uris();
  const std::string& uris(int index) const;
  std::string* mutable_uris(int index);
  void set_uris(int index, const std::string& value);
  void set_uris(int index, std::string&& value);
  void set_uris(int index, const char* value);
  void set_uris(int index, const char* value, size_t size);
  std::string* add_uris();
  void add_uris(const std::string& value);
  void add_uris(std::string&& value);
  void add_uris(const char* value);
  void add_uris(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& uris() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_uris();
  private:
  const std::string& _internal_uris(int index) const;
  std::string* _internal_add_uris();
  public:

  // @@protoc_insertion_point(class_scope:uprotocol.core.udiscovery.v3.DeleteNodesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> uris_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_core_2fudiscovery_2fv3_2fudiscovery_2eproto;
};
// -------------------------------------------------------------------

class FindNodesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:uprotocol.core.udiscovery.v3.FindNodesRequest) */ {
 public:
  inline FindNodesRequest() : FindNodesRequest(nullptr) {}
  ~FindNodesRequest() override;
  explicit PROTOBUF_CONSTEXPR FindNodesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindNodesRequest(const FindNodesRequest& from);
  FindNodesRequest(FindNodesRequest&& from) noexcept
    : FindNodesRequest() {
    *this = ::std::move(from);
  }

  inline FindNodesRequest& operator=(const FindNodesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindNodesRequest& operator=(FindNodesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindNodesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindNodesRequest* internal_default_instance() {
    return reinterpret_cast<const FindNodesRequest*>(
               &_FindNodesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FindNodesRequest& a, FindNodesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FindNodesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindNodesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FindNodesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FindNodesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FindNodesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FindNodesRequest& from) {
    FindNodesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindNodesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "uprotocol.core.udiscovery.v3.FindNodesRequest";
  }
  protected:
  explicit FindNodesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUriFieldNumber = 1,
    kDepthFieldNumber = 2,
  };
  // string uri = 1;
  void clear_uri();
  const std::string& uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uri();
  PROTOBUF_NODISCARD std::string* release_uri();
  void set_allocated_uri(std::string* uri);
  private:
  const std::string& _internal_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uri(const std::string& value);
  std::string* _internal_mutable_uri();
  public:

  // optional int32 depth = 2;
  bool has_depth() const;
  private:
  bool _internal_has_depth() const;
  public:
  void clear_depth();
  int32_t depth() const;
  void set_depth(int32_t value);
  private:
  int32_t _internal_depth() const;
  void _internal_set_depth(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:uprotocol.core.udiscovery.v3.FindNodesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
    int32_t depth_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_core_2fudiscovery_2fv3_2fudiscovery_2eproto;
};
// -------------------------------------------------------------------

class FindNodesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:uprotocol.core.udiscovery.v3.FindNodesResponse) */ {
 public:
  inline FindNodesResponse() : FindNodesResponse(nullptr) {}
  ~FindNodesResponse() override;
  explicit PROTOBUF_CONSTEXPR FindNodesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindNodesResponse(const FindNodesResponse& from);
  FindNodesResponse(FindNodesResponse&& from) noexcept
    : FindNodesResponse() {
    *this = ::std::move(from);
  }

  inline FindNodesResponse& operator=(const FindNodesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindNodesResponse& operator=(FindNodesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindNodesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindNodesResponse* internal_default_instance() {
    return reinterpret_cast<const FindNodesResponse*>(
               &_FindNodesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(FindNodesResponse& a, FindNodesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FindNodesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindNodesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FindNodesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FindNodesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FindNodesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FindNodesResponse& from) {
    FindNodesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindNodesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "uprotocol.core.udiscovery.v3.FindNodesResponse";
  }
  protected:
  explicit FindNodesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 1,
    kStatusFieldNumber = 2,
    kTtlFieldNumber = 3,
  };
  // repeated .uprotocol.core.udiscovery.v3.Node nodes = 1;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;
  public:
  void clear_nodes();
  ::uprotocol::core::udiscovery::v3::Node* mutable_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::uprotocol::core::udiscovery::v3::Node >*
      mutable_nodes();
  private:
  const ::uprotocol::core::udiscovery::v3::Node& _internal_nodes(int index) const;
  ::uprotocol::core::udiscovery::v3::Node* _internal_add_nodes();
  public:
  const ::uprotocol::core::udiscovery::v3::Node& nodes(int index) const;
  ::uprotocol::core::udiscovery::v3::Node* add_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::uprotocol::core::udiscovery::v3::Node >&
      nodes() const;

  // .uprotocol.v1.UStatus status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::uprotocol::v1::UStatus& status() const;
  PROTOBUF_NODISCARD ::uprotocol::v1::UStatus* release_status();
  ::uprotocol::v1::UStatus* mutable_status();
  void set_allocated_status(::uprotocol::v1::UStatus* status);
  private:
  const ::uprotocol::v1::UStatus& _internal_status() const;
  ::uprotocol::v1::UStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::uprotocol::v1::UStatus* status);
  ::uprotocol::v1::UStatus* unsafe_arena_release_status();

  // optional int32 ttl = 3;
  bool has_ttl() const;
  private:
  bool _internal_has_ttl() const;
  public:
  void clear_ttl();
  int32_t ttl() const;
  void set_ttl(int32_t value);
  private:
  int32_t _internal_ttl() const;
  void _internal_set_ttl(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:uprotocol.core.udiscovery.v3.FindNodesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::uprotocol::core::udiscovery::v3::Node > nodes_;
    ::uprotocol::v1::UStatus* status_;
    int32_t ttl_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_core_2fudiscovery_2fv3_2fudiscovery_2eproto;
};
// -------------------------------------------------------------------

class FindNodePropertiesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:uprotocol.core.udiscovery.v3.FindNodePropertiesRequest) */ {
 public:
  inline FindNodePropertiesRequest() : FindNodePropertiesRequest(nullptr) {}
  ~FindNodePropertiesRequest() override;
  explicit PROTOBUF_CONSTEXPR FindNodePropertiesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindNodePropertiesRequest(const FindNodePropertiesRequest& from);
  FindNodePropertiesRequest(FindNodePropertiesRequest&& from) noexcept
    : FindNodePropertiesRequest() {
    *this = ::std::move(from);
  }

  inline FindNodePropertiesRequest& operator=(const FindNodePropertiesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindNodePropertiesRequest& operator=(FindNodePropertiesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindNodePropertiesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindNodePropertiesRequest* internal_default_instance() {
    return reinterpret_cast<const FindNodePropertiesRequest*>(
               &_FindNodePropertiesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(FindNodePropertiesRequest& a, FindNodePropertiesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FindNodePropertiesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindNodePropertiesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FindNodePropertiesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FindNodePropertiesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FindNodePropertiesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FindNodePropertiesRequest& from) {
    FindNodePropertiesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindNodePropertiesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "uprotocol.core.udiscovery.v3.FindNodePropertiesRequest";
  }
  protected:
  explicit FindNodePropertiesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertiesFieldNumber = 2,
    kUriFieldNumber = 1,
  };
  // repeated string properties = 2;
  int properties_size() const;
  private:
  int _internal_properties_size() const;
  public:
  void clear_properties();
  const std::string& properties(int index) const;
  std::string* mutable_properties(int index);
  void set_properties(int index, const std::string& value);
  void set_properties(int index, std::string&& value);
  void set_properties(int index, const char* value);
  void set_properties(int index, const char* value, size_t size);
  std::string* add_properties();
  void add_properties(const std::string& value);
  void add_properties(std::string&& value);
  void add_properties(const char* value);
  void add_properties(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& properties() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_properties();
  private:
  const std::string& _internal_properties(int index) const;
  std::string* _internal_add_properties();
  public:

  // string uri = 1;
  void clear_uri();
  const std::string& uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uri();
  PROTOBUF_NODISCARD std::string* release_uri();
  void set_allocated_uri(std::string* uri);
  private:
  const std::string& _internal_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uri(const std::string& value);
  std::string* _internal_mutable_uri();
  public:

  // @@protoc_insertion_point(class_scope:uprotocol.core.udiscovery.v3.FindNodePropertiesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> properties_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_core_2fudiscovery_2fv3_2fudiscovery_2eproto;
};
// -------------------------------------------------------------------

class FindNodePropertiesResponse_PropertiesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FindNodePropertiesResponse_PropertiesEntry_DoNotUse, 
    std::string, ::uprotocol::core::udiscovery::v3::PropertyValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<FindNodePropertiesResponse_PropertiesEntry_DoNotUse, 
    std::string, ::uprotocol::core::udiscovery::v3::PropertyValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  FindNodePropertiesResponse_PropertiesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR FindNodePropertiesResponse_PropertiesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit FindNodePropertiesResponse_PropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const FindNodePropertiesResponse_PropertiesEntry_DoNotUse& other);
  static const FindNodePropertiesResponse_PropertiesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const FindNodePropertiesResponse_PropertiesEntry_DoNotUse*>(&_FindNodePropertiesResponse_PropertiesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "uprotocol.core.udiscovery.v3.FindNodePropertiesResponse.PropertiesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_core_2fudiscovery_2fv3_2fudiscovery_2eproto;
};

// -------------------------------------------------------------------

class FindNodePropertiesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:uprotocol.core.udiscovery.v3.FindNodePropertiesResponse) */ {
 public:
  inline FindNodePropertiesResponse() : FindNodePropertiesResponse(nullptr) {}
  ~FindNodePropertiesResponse() override;
  explicit PROTOBUF_CONSTEXPR FindNodePropertiesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindNodePropertiesResponse(const FindNodePropertiesResponse& from);
  FindNodePropertiesResponse(FindNodePropertiesResponse&& from) noexcept
    : FindNodePropertiesResponse() {
    *this = ::std::move(from);
  }

  inline FindNodePropertiesResponse& operator=(const FindNodePropertiesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindNodePropertiesResponse& operator=(FindNodePropertiesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindNodePropertiesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindNodePropertiesResponse* internal_default_instance() {
    return reinterpret_cast<const FindNodePropertiesResponse*>(
               &_FindNodePropertiesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(FindNodePropertiesResponse& a, FindNodePropertiesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FindNodePropertiesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindNodePropertiesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FindNodePropertiesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FindNodePropertiesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FindNodePropertiesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FindNodePropertiesResponse& from) {
    FindNodePropertiesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindNodePropertiesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "uprotocol.core.udiscovery.v3.FindNodePropertiesResponse";
  }
  protected:
  explicit FindNodePropertiesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kPropertiesFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // map<string, .uprotocol.core.udiscovery.v3.PropertyValue> properties = 1;
  int properties_size() const;
  private:
  int _internal_properties_size() const;
  public:
  void clear_properties();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::uprotocol::core::udiscovery::v3::PropertyValue >&
      _internal_properties() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::uprotocol::core::udiscovery::v3::PropertyValue >*
      _internal_mutable_properties();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::uprotocol::core::udiscovery::v3::PropertyValue >&
      properties() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::uprotocol::core::udiscovery::v3::PropertyValue >*
      mutable_properties();

  // .uprotocol.v1.UStatus status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::uprotocol::v1::UStatus& status() const;
  PROTOBUF_NODISCARD ::uprotocol::v1::UStatus* release_status();
  ::uprotocol::v1::UStatus* mutable_status();
  void set_allocated_status(::uprotocol::v1::UStatus* status);
  private:
  const ::uprotocol::v1::UStatus& _internal_status() const;
  ::uprotocol::v1::UStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::uprotocol::v1::UStatus* status);
  ::uprotocol::v1::UStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:uprotocol.core.udiscovery.v3.FindNodePropertiesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        FindNodePropertiesResponse_PropertiesEntry_DoNotUse,
        std::string, ::uprotocol::core::udiscovery::v3::PropertyValue,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> properties_;
    ::uprotocol::v1::UStatus* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_core_2fudiscovery_2fv3_2fudiscovery_2eproto;
};
// -------------------------------------------------------------------

class AddNodesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:uprotocol.core.udiscovery.v3.AddNodesRequest) */ {
 public:
  inline AddNodesRequest() : AddNodesRequest(nullptr) {}
  ~AddNodesRequest() override;
  explicit PROTOBUF_CONSTEXPR AddNodesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddNodesRequest(const AddNodesRequest& from);
  AddNodesRequest(AddNodesRequest&& from) noexcept
    : AddNodesRequest() {
    *this = ::std::move(from);
  }

  inline AddNodesRequest& operator=(const AddNodesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddNodesRequest& operator=(AddNodesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddNodesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddNodesRequest* internal_default_instance() {
    return reinterpret_cast<const AddNodesRequest*>(
               &_AddNodesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(AddNodesRequest& a, AddNodesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddNodesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddNodesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddNodesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddNodesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddNodesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddNodesRequest& from) {
    AddNodesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddNodesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "uprotocol.core.udiscovery.v3.AddNodesRequest";
  }
  protected:
  explicit AddNodesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 2,
    kParentUriFieldNumber = 1,
  };
  // repeated .uprotocol.core.udiscovery.v3.Node nodes = 2;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;
  public:
  void clear_nodes();
  ::uprotocol::core::udiscovery::v3::Node* mutable_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::uprotocol::core::udiscovery::v3::Node >*
      mutable_nodes();
  private:
  const ::uprotocol::core::udiscovery::v3::Node& _internal_nodes(int index) const;
  ::uprotocol::core::udiscovery::v3::Node* _internal_add_nodes();
  public:
  const ::uprotocol::core::udiscovery::v3::Node& nodes(int index) const;
  ::uprotocol::core::udiscovery::v3::Node* add_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::uprotocol::core::udiscovery::v3::Node >&
      nodes() const;

  // string parent_uri = 1;
  void clear_parent_uri();
  const std::string& parent_uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent_uri();
  PROTOBUF_NODISCARD std::string* release_parent_uri();
  void set_allocated_parent_uri(std::string* parent_uri);
  private:
  const std::string& _internal_parent_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent_uri(const std::string& value);
  std::string* _internal_mutable_parent_uri();
  public:

  // @@protoc_insertion_point(class_scope:uprotocol.core.udiscovery.v3.AddNodesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::uprotocol::core::udiscovery::v3::Node > nodes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_uri_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_core_2fudiscovery_2fv3_2fudiscovery_2eproto;
};
// -------------------------------------------------------------------

class UpdatePropertyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:uprotocol.core.udiscovery.v3.UpdatePropertyRequest) */ {
 public:
  inline UpdatePropertyRequest() : UpdatePropertyRequest(nullptr) {}
  ~UpdatePropertyRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdatePropertyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdatePropertyRequest(const UpdatePropertyRequest& from);
  UpdatePropertyRequest(UpdatePropertyRequest&& from) noexcept
    : UpdatePropertyRequest() {
    *this = ::std::move(from);
  }

  inline UpdatePropertyRequest& operator=(const UpdatePropertyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdatePropertyRequest& operator=(UpdatePropertyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdatePropertyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdatePropertyRequest* internal_default_instance() {
    return reinterpret_cast<const UpdatePropertyRequest*>(
               &_UpdatePropertyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(UpdatePropertyRequest& a, UpdatePropertyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdatePropertyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdatePropertyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdatePropertyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdatePropertyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdatePropertyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdatePropertyRequest& from) {
    UpdatePropertyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdatePropertyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "uprotocol.core.udiscovery.v3.UpdatePropertyRequest";
  }
  protected:
  explicit UpdatePropertyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUriFieldNumber = 1,
    kPropertyFieldNumber = 2,
    kValueFieldNumber = 3,
  };
  // string uri = 1;
  void clear_uri();
  const std::string& uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uri();
  PROTOBUF_NODISCARD std::string* release_uri();
  void set_allocated_uri(std::string* uri);
  private:
  const std::string& _internal_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uri(const std::string& value);
  std::string* _internal_mutable_uri();
  public:

  // string property = 2;
  void clear_property();
  const std::string& property() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_property(ArgT0&& arg0, ArgT... args);
  std::string* mutable_property();
  PROTOBUF_NODISCARD std::string* release_property();
  void set_allocated_property(std::string* property);
  private:
  const std::string& _internal_property() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property(const std::string& value);
  std::string* _internal_mutable_property();
  public:

  // .uprotocol.core.udiscovery.v3.PropertyValue value = 3;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::uprotocol::core::udiscovery::v3::PropertyValue& value() const;
  PROTOBUF_NODISCARD ::uprotocol::core::udiscovery::v3::PropertyValue* release_value();
  ::uprotocol::core::udiscovery::v3::PropertyValue* mutable_value();
  void set_allocated_value(::uprotocol::core::udiscovery::v3::PropertyValue* value);
  private:
  const ::uprotocol::core::udiscovery::v3::PropertyValue& _internal_value() const;
  ::uprotocol::core::udiscovery::v3::PropertyValue* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::uprotocol::core::udiscovery::v3::PropertyValue* value);
  ::uprotocol::core::udiscovery::v3::PropertyValue* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:uprotocol.core.udiscovery.v3.UpdatePropertyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr property_;
    ::uprotocol::core::udiscovery::v3::PropertyValue* value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_core_2fudiscovery_2fv3_2fudiscovery_2eproto;
};
// -------------------------------------------------------------------

class Notification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:uprotocol.core.udiscovery.v3.Notification) */ {
 public:
  inline Notification() : Notification(nullptr) {}
  ~Notification() override;
  explicit PROTOBUF_CONSTEXPR Notification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Notification(const Notification& from);
  Notification(Notification&& from) noexcept
    : Notification() {
    *this = ::std::move(from);
  }

  inline Notification& operator=(const Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline Notification& operator=(Notification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Notification& default_instance() {
    return *internal_default_instance();
  }
  static inline const Notification* internal_default_instance() {
    return reinterpret_cast<const Notification*>(
               &_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Notification& a, Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(Notification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Notification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Notification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Notification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Notification& from) {
    Notification::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Notification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "uprotocol.core.udiscovery.v3.Notification";
  }
  protected:
  explicit Notification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Notification_Operation Operation;
  static constexpr Operation INVALID =
    Notification_Operation_INVALID;
  static constexpr Operation UPDATE =
    Notification_Operation_UPDATE;
  static constexpr Operation ADD =
    Notification_Operation_ADD;
  static constexpr Operation REMOVE =
    Notification_Operation_REMOVE;
  static inline bool Operation_IsValid(int value) {
    return Notification_Operation_IsValid(value);
  }
  static constexpr Operation Operation_MIN =
    Notification_Operation_Operation_MIN;
  static constexpr Operation Operation_MAX =
    Notification_Operation_Operation_MAX;
  static constexpr int Operation_ARRAYSIZE =
    Notification_Operation_Operation_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Operation_descriptor() {
    return Notification_Operation_descriptor();
  }
  template<typename T>
  static inline const std::string& Operation_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Operation>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Operation_Name.");
    return Notification_Operation_Name(enum_t_value);
  }
  static inline bool Operation_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Operation* value) {
    return Notification_Operation_Parse(name, value);
  }

  typedef Notification_Resources Resources;
  static constexpr Resources nodes =
    Notification_Resources_nodes;
  static inline bool Resources_IsValid(int value) {
    return Notification_Resources_IsValid(value);
  }
  static constexpr Resources Resources_MIN =
    Notification_Resources_Resources_MIN;
  static constexpr Resources Resources_MAX =
    Notification_Resources_Resources_MAX;
  static constexpr int Resources_ARRAYSIZE =
    Notification_Resources_Resources_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Resources_descriptor() {
    return Notification_Resources_descriptor();
  }
  template<typename T>
  static inline const std::string& Resources_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Resources>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Resources_Name.");
    return Notification_Resources_Name(enum_t_value);
  }
  static inline bool Resources_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Resources* value) {
    return Notification_Resources_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUriFieldNumber = 1,
    kParentUriFieldNumber = 2,
    kOperationFieldNumber = 3,
    kTtlFieldNumber = 4,
  };
  // string uri = 1;
  void clear_uri();
  const std::string& uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uri();
  PROTOBUF_NODISCARD std::string* release_uri();
  void set_allocated_uri(std::string* uri);
  private:
  const std::string& _internal_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uri(const std::string& value);
  std::string* _internal_mutable_uri();
  public:

  // optional string parent_uri = 2;
  bool has_parent_uri() const;
  private:
  bool _internal_has_parent_uri() const;
  public:
  void clear_parent_uri();
  const std::string& parent_uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent_uri();
  PROTOBUF_NODISCARD std::string* release_parent_uri();
  void set_allocated_parent_uri(std::string* parent_uri);
  private:
  const std::string& _internal_parent_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent_uri(const std::string& value);
  std::string* _internal_mutable_parent_uri();
  public:

  // .uprotocol.core.udiscovery.v3.Notification.Operation operation = 3;
  void clear_operation();
  ::uprotocol::core::udiscovery::v3::Notification_Operation operation() const;
  void set_operation(::uprotocol::core::udiscovery::v3::Notification_Operation value);
  private:
  ::uprotocol::core::udiscovery::v3::Notification_Operation _internal_operation() const;
  void _internal_set_operation(::uprotocol::core::udiscovery::v3::Notification_Operation value);
  public:

  // optional int32 ttl = 4;
  bool has_ttl() const;
  private:
  bool _internal_has_ttl() const;
  public:
  void clear_ttl();
  int32_t ttl() const;
  void set_ttl(int32_t value);
  private:
  int32_t _internal_ttl() const;
  void _internal_set_ttl(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:uprotocol.core.udiscovery.v3.Notification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_uri_;
    int operation_;
    int32_t ttl_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_core_2fudiscovery_2fv3_2fudiscovery_2eproto;
};
// -------------------------------------------------------------------

class ObserverInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:uprotocol.core.udiscovery.v3.ObserverInfo) */ {
 public:
  inline ObserverInfo() : ObserverInfo(nullptr) {}
  ~ObserverInfo() override;
  explicit PROTOBUF_CONSTEXPR ObserverInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObserverInfo(const ObserverInfo& from);
  ObserverInfo(ObserverInfo&& from) noexcept
    : ObserverInfo() {
    *this = ::std::move(from);
  }

  inline ObserverInfo& operator=(const ObserverInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObserverInfo& operator=(ObserverInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObserverInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObserverInfo* internal_default_instance() {
    return reinterpret_cast<const ObserverInfo*>(
               &_ObserverInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ObserverInfo& a, ObserverInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ObserverInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObserverInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObserverInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObserverInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObserverInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ObserverInfo& from) {
    ObserverInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObserverInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "uprotocol.core.udiscovery.v3.ObserverInfo";
  }
  protected:
  explicit ObserverInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUriFieldNumber = 1,
  };
  // string uri = 1;
  void clear_uri();
  const std::string& uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uri();
  PROTOBUF_NODISCARD std::string* release_uri();
  void set_allocated_uri(std::string* uri);
  private:
  const std::string& _internal_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uri(const std::string& value);
  std::string* _internal_mutable_uri();
  public:

  // @@protoc_insertion_point(class_scope:uprotocol.core.udiscovery.v3.ObserverInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_core_2fudiscovery_2fv3_2fudiscovery_2eproto;
};
// -------------------------------------------------------------------

class NotificationsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:uprotocol.core.udiscovery.v3.NotificationsRequest) */ {
 public:
  inline NotificationsRequest() : NotificationsRequest(nullptr) {}
  ~NotificationsRequest() override;
  explicit PROTOBUF_CONSTEXPR NotificationsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NotificationsRequest(const NotificationsRequest& from);
  NotificationsRequest(NotificationsRequest&& from) noexcept
    : NotificationsRequest() {
    *this = ::std::move(from);
  }

  inline NotificationsRequest& operator=(const NotificationsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotificationsRequest& operator=(NotificationsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NotificationsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotificationsRequest* internal_default_instance() {
    return reinterpret_cast<const NotificationsRequest*>(
               &_NotificationsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(NotificationsRequest& a, NotificationsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NotificationsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotificationsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NotificationsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NotificationsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NotificationsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NotificationsRequest& from) {
    NotificationsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotificationsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "uprotocol.core.udiscovery.v3.NotificationsRequest";
  }
  protected:
  explicit NotificationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrisFieldNumber = 1,
    kObserverFieldNumber = 2,
    kDepthFieldNumber = 3,
  };
  // repeated string uris = 1;
  int uris_size() const;
  private:
  int _internal_uris_size() const;
  public:
  void clear_uris();
  const std::string& uris(int index) const;
  std::string* mutable_uris(int index);
  void set_uris(int index, const std::string& value);
  void set_uris(int index, std::string&& value);
  void set_uris(int index, const char* value);
  void set_uris(int index, const char* value, size_t size);
  std::string* add_uris();
  void add_uris(const std::string& value);
  void add_uris(std::string&& value);
  void add_uris(const char* value);
  void add_uris(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& uris() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_uris();
  private:
  const std::string& _internal_uris(int index) const;
  std::string* _internal_add_uris();
  public:

  // .uprotocol.core.udiscovery.v3.ObserverInfo observer = 2;
  bool has_observer() const;
  private:
  bool _internal_has_observer() const;
  public:
  void clear_observer();
  const ::uprotocol::core::udiscovery::v3::ObserverInfo& observer() const;
  PROTOBUF_NODISCARD ::uprotocol::core::udiscovery::v3::ObserverInfo* release_observer();
  ::uprotocol::core::udiscovery::v3::ObserverInfo* mutable_observer();
  void set_allocated_observer(::uprotocol::core::udiscovery::v3::ObserverInfo* observer);
  private:
  const ::uprotocol::core::udiscovery::v3::ObserverInfo& _internal_observer() const;
  ::uprotocol::core::udiscovery::v3::ObserverInfo* _internal_mutable_observer();
  public:
  void unsafe_arena_set_allocated_observer(
      ::uprotocol::core::udiscovery::v3::ObserverInfo* observer);
  ::uprotocol::core::udiscovery::v3::ObserverInfo* unsafe_arena_release_observer();

  // optional int32 depth = 3;
  bool has_depth() const;
  private:
  bool _internal_has_depth() const;
  public:
  void clear_depth();
  int32_t depth() const;
  void set_depth(int32_t value);
  private:
  int32_t _internal_depth() const;
  void _internal_set_depth(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:uprotocol.core.udiscovery.v3.NotificationsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> uris_;
    ::uprotocol::core::udiscovery::v3::ObserverInfo* observer_;
    int32_t depth_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_core_2fudiscovery_2fv3_2fudiscovery_2eproto;
};
// -------------------------------------------------------------------

class ResolveUriRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:uprotocol.core.udiscovery.v3.ResolveUriRequest) */ {
 public:
  inline ResolveUriRequest() : ResolveUriRequest(nullptr) {}
  ~ResolveUriRequest() override;
  explicit PROTOBUF_CONSTEXPR ResolveUriRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResolveUriRequest(const ResolveUriRequest& from);
  ResolveUriRequest(ResolveUriRequest&& from) noexcept
    : ResolveUriRequest() {
    *this = ::std::move(from);
  }

  inline ResolveUriRequest& operator=(const ResolveUriRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResolveUriRequest& operator=(ResolveUriRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResolveUriRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResolveUriRequest* internal_default_instance() {
    return reinterpret_cast<const ResolveUriRequest*>(
               &_ResolveUriRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ResolveUriRequest& a, ResolveUriRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ResolveUriRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResolveUriRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResolveUriRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResolveUriRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResolveUriRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResolveUriRequest& from) {
    ResolveUriRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolveUriRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "uprotocol.core.udiscovery.v3.ResolveUriRequest";
  }
  protected:
  explicit ResolveUriRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUriFieldNumber = 1,
  };
  // .uprotocol.v1.UUri uri = 1;
  bool has_uri() const;
  private:
  bool _internal_has_uri() const;
  public:
  void clear_uri();
  const ::uprotocol::v1::UUri& uri() const;
  PROTOBUF_NODISCARD ::uprotocol::v1::UUri* release_uri();
  ::uprotocol::v1::UUri* mutable_uri();
  void set_allocated_uri(::uprotocol::v1::UUri* uri);
  private:
  const ::uprotocol::v1::UUri& _internal_uri() const;
  ::uprotocol::v1::UUri* _internal_mutable_uri();
  public:
  void unsafe_arena_set_allocated_uri(
      ::uprotocol::v1::UUri* uri);
  ::uprotocol::v1::UUri* unsafe_arena_release_uri();

  // @@protoc_insertion_point(class_scope:uprotocol.core.udiscovery.v3.ResolveUriRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uprotocol::v1::UUri* uri_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_core_2fudiscovery_2fv3_2fudiscovery_2eproto;
};
// -------------------------------------------------------------------

class ResolveUriResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:uprotocol.core.udiscovery.v3.ResolveUriResponse) */ {
 public:
  inline ResolveUriResponse() : ResolveUriResponse(nullptr) {}
  ~ResolveUriResponse() override;
  explicit PROTOBUF_CONSTEXPR ResolveUriResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResolveUriResponse(const ResolveUriResponse& from);
  ResolveUriResponse(ResolveUriResponse&& from) noexcept
    : ResolveUriResponse() {
    *this = ::std::move(from);
  }

  inline ResolveUriResponse& operator=(const ResolveUriResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResolveUriResponse& operator=(ResolveUriResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResolveUriResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResolveUriResponse* internal_default_instance() {
    return reinterpret_cast<const ResolveUriResponse*>(
               &_ResolveUriResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ResolveUriResponse& a, ResolveUriResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ResolveUriResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResolveUriResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResolveUriResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResolveUriResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResolveUriResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResolveUriResponse& from) {
    ResolveUriResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResolveUriResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "uprotocol.core.udiscovery.v3.ResolveUriResponse";
  }
  protected:
  explicit ResolveUriResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUriFieldNumber = 1,
    kStatusFieldNumber = 3,
  };
  // .uprotocol.v1.UUri uri = 1;
  bool has_uri() const;
  private:
  bool _internal_has_uri() const;
  public:
  void clear_uri();
  const ::uprotocol::v1::UUri& uri() const;
  PROTOBUF_NODISCARD ::uprotocol::v1::UUri* release_uri();
  ::uprotocol::v1::UUri* mutable_uri();
  void set_allocated_uri(::uprotocol::v1::UUri* uri);
  private:
  const ::uprotocol::v1::UUri& _internal_uri() const;
  ::uprotocol::v1::UUri* _internal_mutable_uri();
  public:
  void unsafe_arena_set_allocated_uri(
      ::uprotocol::v1::UUri* uri);
  ::uprotocol::v1::UUri* unsafe_arena_release_uri();

  // .uprotocol.v1.UStatus status = 3;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::uprotocol::v1::UStatus& status() const;
  PROTOBUF_NODISCARD ::uprotocol::v1::UStatus* release_status();
  ::uprotocol::v1::UStatus* mutable_status();
  void set_allocated_status(::uprotocol::v1::UStatus* status);
  private:
  const ::uprotocol::v1::UStatus& _internal_status() const;
  ::uprotocol::v1::UStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::uprotocol::v1::UStatus* status);
  ::uprotocol::v1::UStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:uprotocol.core.udiscovery.v3.ResolveUriResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uprotocol::v1::UUri* uri_;
    ::uprotocol::v1::UStatus* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_core_2fudiscovery_2fv3_2fudiscovery_2eproto;
};
// -------------------------------------------------------------------

class LookupUriResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:uprotocol.core.udiscovery.v3.LookupUriResponse) */ {
 public:
  inline LookupUriResponse() : LookupUriResponse(nullptr) {}
  ~LookupUriResponse() override;
  explicit PROTOBUF_CONSTEXPR LookupUriResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LookupUriResponse(const LookupUriResponse& from);
  LookupUriResponse(LookupUriResponse&& from) noexcept
    : LookupUriResponse() {
    *this = ::std::move(from);
  }

  inline LookupUriResponse& operator=(const LookupUriResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LookupUriResponse& operator=(LookupUriResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LookupUriResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LookupUriResponse* internal_default_instance() {
    return reinterpret_cast<const LookupUriResponse*>(
               &_LookupUriResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(LookupUriResponse& a, LookupUriResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LookupUriResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LookupUriResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LookupUriResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LookupUriResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LookupUriResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LookupUriResponse& from) {
    LookupUriResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LookupUriResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "uprotocol.core.udiscovery.v3.LookupUriResponse";
  }
  protected:
  explicit LookupUriResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrisFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // .uprotocol.v1.UUriBatch uris = 1;
  bool has_uris() const;
  private:
  bool _internal_has_uris() const;
  public:
  void clear_uris();
  const ::uprotocol::v1::UUriBatch& uris() const;
  PROTOBUF_NODISCARD ::uprotocol::v1::UUriBatch* release_uris();
  ::uprotocol::v1::UUriBatch* mutable_uris();
  void set_allocated_uris(::uprotocol::v1::UUriBatch* uris);
  private:
  const ::uprotocol::v1::UUriBatch& _internal_uris() const;
  ::uprotocol::v1::UUriBatch* _internal_mutable_uris();
  public:
  void unsafe_arena_set_allocated_uris(
      ::uprotocol::v1::UUriBatch* uris);
  ::uprotocol::v1::UUriBatch* unsafe_arena_release_uris();

  // .uprotocol.v1.UStatus status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::uprotocol::v1::UStatus& status() const;
  PROTOBUF_NODISCARD ::uprotocol::v1::UStatus* release_status();
  ::uprotocol::v1::UStatus* mutable_status();
  void set_allocated_status(::uprotocol::v1::UStatus* status);
  private:
  const ::uprotocol::v1::UStatus& _internal_status() const;
  ::uprotocol::v1::UStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::uprotocol::v1::UStatus* status);
  ::uprotocol::v1::UStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:uprotocol.core.udiscovery.v3.LookupUriResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uprotocol::v1::UUriBatch* uris_;
    ::uprotocol::v1::UStatus* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_core_2fudiscovery_2fv3_2fudiscovery_2eproto;
};
// -------------------------------------------------------------------

class NodeNotificationTopic final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:uprotocol.core.udiscovery.v3.NodeNotificationTopic) */ {
 public:
  inline NodeNotificationTopic() : NodeNotificationTopic(nullptr) {}
  ~NodeNotificationTopic() override;
  explicit PROTOBUF_CONSTEXPR NodeNotificationTopic(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NodeNotificationTopic(const NodeNotificationTopic& from);
  NodeNotificationTopic(NodeNotificationTopic&& from) noexcept
    : NodeNotificationTopic() {
    *this = ::std::move(from);
  }

  inline NodeNotificationTopic& operator=(const NodeNotificationTopic& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeNotificationTopic& operator=(NodeNotificationTopic&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NodeNotificationTopic& default_instance() {
    return *internal_default_instance();
  }
  static inline const NodeNotificationTopic* internal_default_instance() {
    return reinterpret_cast<const NodeNotificationTopic*>(
               &_NodeNotificationTopic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(NodeNotificationTopic& a, NodeNotificationTopic& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeNotificationTopic* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeNotificationTopic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NodeNotificationTopic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NodeNotificationTopic>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NodeNotificationTopic& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NodeNotificationTopic& from) {
    NodeNotificationTopic::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeNotificationTopic* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "uprotocol.core.udiscovery.v3.NodeNotificationTopic";
  }
  protected:
  explicit NodeNotificationTopic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceNameFieldNumber = 1,
  };
  // .uprotocol.core.udiscovery.v3.Notification.Resources resource_name = 1 [(.uprotocol.resource_name_mask) = "*"];
  void clear_resource_name();
  ::uprotocol::core::udiscovery::v3::Notification_Resources resource_name() const;
  void set_resource_name(::uprotocol::core::udiscovery::v3::Notification_Resources value);
  private:
  ::uprotocol::core::udiscovery::v3::Notification_Resources _internal_resource_name() const;
  void _internal_set_resource_name(::uprotocol::core::udiscovery::v3::Notification_Resources value);
  public:

  // @@protoc_insertion_point(class_scope:uprotocol.core.udiscovery.v3.NodeNotificationTopic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int resource_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_core_2fudiscovery_2fv3_2fudiscovery_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PropertyValue

// bool u_boolean = 1;
inline bool PropertyValue::_internal_has_u_boolean() const {
  return attr_case() == kUBoolean;
}
inline bool PropertyValue::has_u_boolean() const {
  return _internal_has_u_boolean();
}
inline void PropertyValue::set_has_u_boolean() {
  _impl_._oneof_case_[0] = kUBoolean;
}
inline void PropertyValue::clear_u_boolean() {
  if (_internal_has_u_boolean()) {
    _impl_.attr_.u_boolean_ = false;
    clear_has_attr();
  }
}
inline bool PropertyValue::_internal_u_boolean() const {
  if (_internal_has_u_boolean()) {
    return _impl_.attr_.u_boolean_;
  }
  return false;
}
inline void PropertyValue::_internal_set_u_boolean(bool value) {
  if (!_internal_has_u_boolean()) {
    clear_attr();
    set_has_u_boolean();
  }
  _impl_.attr_.u_boolean_ = value;
}
inline bool PropertyValue::u_boolean() const {
  // @@protoc_insertion_point(field_get:uprotocol.core.udiscovery.v3.PropertyValue.u_boolean)
  return _internal_u_boolean();
}
inline void PropertyValue::set_u_boolean(bool value) {
  _internal_set_u_boolean(value);
  // @@protoc_insertion_point(field_set:uprotocol.core.udiscovery.v3.PropertyValue.u_boolean)
}

// int32 u_integer = 2;
inline bool PropertyValue::_internal_has_u_integer() const {
  return attr_case() == kUInteger;
}
inline bool PropertyValue::has_u_integer() const {
  return _internal_has_u_integer();
}
inline void PropertyValue::set_has_u_integer() {
  _impl_._oneof_case_[0] = kUInteger;
}
inline void PropertyValue::clear_u_integer() {
  if (_internal_has_u_integer()) {
    _impl_.attr_.u_integer_ = 0;
    clear_has_attr();
  }
}
inline int32_t PropertyValue::_internal_u_integer() const {
  if (_internal_has_u_integer()) {
    return _impl_.attr_.u_integer_;
  }
  return 0;
}
inline void PropertyValue::_internal_set_u_integer(int32_t value) {
  if (!_internal_has_u_integer()) {
    clear_attr();
    set_has_u_integer();
  }
  _impl_.attr_.u_integer_ = value;
}
inline int32_t PropertyValue::u_integer() const {
  // @@protoc_insertion_point(field_get:uprotocol.core.udiscovery.v3.PropertyValue.u_integer)
  return _internal_u_integer();
}
inline void PropertyValue::set_u_integer(int32_t value) {
  _internal_set_u_integer(value);
  // @@protoc_insertion_point(field_set:uprotocol.core.udiscovery.v3.PropertyValue.u_integer)
}

// string u_string = 3;
inline bool PropertyValue::_internal_has_u_string() const {
  return attr_case() == kUString;
}
inline bool PropertyValue::has_u_string() const {
  return _internal_has_u_string();
}
inline void PropertyValue::set_has_u_string() {
  _impl_._oneof_case_[0] = kUString;
}
inline void PropertyValue::clear_u_string() {
  if (_internal_has_u_string()) {
    _impl_.attr_.u_string_.Destroy();
    clear_has_attr();
  }
}
inline const std::string& PropertyValue::u_string() const {
  // @@protoc_insertion_point(field_get:uprotocol.core.udiscovery.v3.PropertyValue.u_string)
  return _internal_u_string();
}
template <typename ArgT0, typename... ArgT>
inline void PropertyValue::set_u_string(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_u_string()) {
    clear_attr();
    set_has_u_string();
    _impl_.attr_.u_string_.InitDefault();
  }
  _impl_.attr_.u_string_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:uprotocol.core.udiscovery.v3.PropertyValue.u_string)
}
inline std::string* PropertyValue::mutable_u_string() {
  std::string* _s = _internal_mutable_u_string();
  // @@protoc_insertion_point(field_mutable:uprotocol.core.udiscovery.v3.PropertyValue.u_string)
  return _s;
}
inline const std::string& PropertyValue::_internal_u_string() const {
  if (_internal_has_u_string()) {
    return _impl_.attr_.u_string_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void PropertyValue::_internal_set_u_string(const std::string& value) {
  if (!_internal_has_u_string()) {
    clear_attr();
    set_has_u_string();
    _impl_.attr_.u_string_.InitDefault();
  }
  _impl_.attr_.u_string_.Set(value, GetArenaForAllocation());
}
inline std::string* PropertyValue::_internal_mutable_u_string() {
  if (!_internal_has_u_string()) {
    clear_attr();
    set_has_u_string();
    _impl_.attr_.u_string_.InitDefault();
  }
  return _impl_.attr_.u_string_.Mutable(      GetArenaForAllocation());
}
inline std::string* PropertyValue::release_u_string() {
  // @@protoc_insertion_point(field_release:uprotocol.core.udiscovery.v3.PropertyValue.u_string)
  if (_internal_has_u_string()) {
    clear_has_attr();
    return _impl_.attr_.u_string_.Release();
  } else {
    return nullptr;
  }
}
inline void PropertyValue::set_allocated_u_string(std::string* u_string) {
  if (has_attr()) {
    clear_attr();
  }
  if (u_string != nullptr) {
    set_has_u_string();
    _impl_.attr_.u_string_.InitAllocated(u_string, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:uprotocol.core.udiscovery.v3.PropertyValue.u_string)
}

// bytes u_bytes = 4;
inline bool PropertyValue::_internal_has_u_bytes() const {
  return attr_case() == kUBytes;
}
inline bool PropertyValue::has_u_bytes() const {
  return _internal_has_u_bytes();
}
inline void PropertyValue::set_has_u_bytes() {
  _impl_._oneof_case_[0] = kUBytes;
}
inline void PropertyValue::clear_u_bytes() {
  if (_internal_has_u_bytes()) {
    _impl_.attr_.u_bytes_.Destroy();
    clear_has_attr();
  }
}
inline const std::string& PropertyValue::u_bytes() const {
  // @@protoc_insertion_point(field_get:uprotocol.core.udiscovery.v3.PropertyValue.u_bytes)
  return _internal_u_bytes();
}
template <typename ArgT0, typename... ArgT>
inline void PropertyValue::set_u_bytes(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_u_bytes()) {
    clear_attr();
    set_has_u_bytes();
    _impl_.attr_.u_bytes_.InitDefault();
  }
  _impl_.attr_.u_bytes_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:uprotocol.core.udiscovery.v3.PropertyValue.u_bytes)
}
inline std::string* PropertyValue::mutable_u_bytes() {
  std::string* _s = _internal_mutable_u_bytes();
  // @@protoc_insertion_point(field_mutable:uprotocol.core.udiscovery.v3.PropertyValue.u_bytes)
  return _s;
}
inline const std::string& PropertyValue::_internal_u_bytes() const {
  if (_internal_has_u_bytes()) {
    return _impl_.attr_.u_bytes_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void PropertyValue::_internal_set_u_bytes(const std::string& value) {
  if (!_internal_has_u_bytes()) {
    clear_attr();
    set_has_u_bytes();
    _impl_.attr_.u_bytes_.InitDefault();
  }
  _impl_.attr_.u_bytes_.Set(value, GetArenaForAllocation());
}
inline std::string* PropertyValue::_internal_mutable_u_bytes() {
  if (!_internal_has_u_bytes()) {
    clear_attr();
    set_has_u_bytes();
    _impl_.attr_.u_bytes_.InitDefault();
  }
  return _impl_.attr_.u_bytes_.Mutable(      GetArenaForAllocation());
}
inline std::string* PropertyValue::release_u_bytes() {
  // @@protoc_insertion_point(field_release:uprotocol.core.udiscovery.v3.PropertyValue.u_bytes)
  if (_internal_has_u_bytes()) {
    clear_has_attr();
    return _impl_.attr_.u_bytes_.Release();
  } else {
    return nullptr;
  }
}
inline void PropertyValue::set_allocated_u_bytes(std::string* u_bytes) {
  if (has_attr()) {
    clear_attr();
  }
  if (u_bytes != nullptr) {
    set_has_u_bytes();
    _impl_.attr_.u_bytes_.InitAllocated(u_bytes, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:uprotocol.core.udiscovery.v3.PropertyValue.u_bytes)
}

// string u_uri = 5;
inline bool PropertyValue::_internal_has_u_uri() const {
  return attr_case() == kUUri;
}
inline bool PropertyValue::has_u_uri() const {
  return _internal_has_u_uri();
}
inline void PropertyValue::set_has_u_uri() {
  _impl_._oneof_case_[0] = kUUri;
}
inline void PropertyValue::clear_u_uri() {
  if (_internal_has_u_uri()) {
    _impl_.attr_.u_uri_.Destroy();
    clear_has_attr();
  }
}
inline const std::string& PropertyValue::u_uri() const {
  // @@protoc_insertion_point(field_get:uprotocol.core.udiscovery.v3.PropertyValue.u_uri)
  return _internal_u_uri();
}
template <typename ArgT0, typename... ArgT>
inline void PropertyValue::set_u_uri(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_u_uri()) {
    clear_attr();
    set_has_u_uri();
    _impl_.attr_.u_uri_.InitDefault();
  }
  _impl_.attr_.u_uri_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:uprotocol.core.udiscovery.v3.PropertyValue.u_uri)
}
inline std::string* PropertyValue::mutable_u_uri() {
  std::string* _s = _internal_mutable_u_uri();
  // @@protoc_insertion_point(field_mutable:uprotocol.core.udiscovery.v3.PropertyValue.u_uri)
  return _s;
}
inline const std::string& PropertyValue::_internal_u_uri() const {
  if (_internal_has_u_uri()) {
    return _impl_.attr_.u_uri_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void PropertyValue::_internal_set_u_uri(const std::string& value) {
  if (!_internal_has_u_uri()) {
    clear_attr();
    set_has_u_uri();
    _impl_.attr_.u_uri_.InitDefault();
  }
  _impl_.attr_.u_uri_.Set(value, GetArenaForAllocation());
}
inline std::string* PropertyValue::_internal_mutable_u_uri() {
  if (!_internal_has_u_uri()) {
    clear_attr();
    set_has_u_uri();
    _impl_.attr_.u_uri_.InitDefault();
  }
  return _impl_.attr_.u_uri_.Mutable(      GetArenaForAllocation());
}
inline std::string* PropertyValue::release_u_uri() {
  // @@protoc_insertion_point(field_release:uprotocol.core.udiscovery.v3.PropertyValue.u_uri)
  if (_internal_has_u_uri()) {
    clear_has_attr();
    return _impl_.attr_.u_uri_.Release();
  } else {
    return nullptr;
  }
}
inline void PropertyValue::set_allocated_u_uri(std::string* u_uri) {
  if (has_attr()) {
    clear_attr();
  }
  if (u_uri != nullptr) {
    set_has_u_uri();
    _impl_.attr_.u_uri_.InitAllocated(u_uri, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:uprotocol.core.udiscovery.v3.PropertyValue.u_uri)
}

// .google.protobuf.Timestamp u_timestamp = 6;
inline bool PropertyValue::_internal_has_u_timestamp() const {
  return attr_case() == kUTimestamp;
}
inline bool PropertyValue::has_u_timestamp() const {
  return _internal_has_u_timestamp();
}
inline void PropertyValue::set_has_u_timestamp() {
  _impl_._oneof_case_[0] = kUTimestamp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PropertyValue::release_u_timestamp() {
  // @@protoc_insertion_point(field_release:uprotocol.core.udiscovery.v3.PropertyValue.u_timestamp)
  if (_internal_has_u_timestamp()) {
    clear_has_attr();
    ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.attr_.u_timestamp_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.attr_.u_timestamp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& PropertyValue::_internal_u_timestamp() const {
  return _internal_has_u_timestamp()
      ? *_impl_.attr_.u_timestamp_
      : reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::Timestamp&>(::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& PropertyValue::u_timestamp() const {
  // @@protoc_insertion_point(field_get:uprotocol.core.udiscovery.v3.PropertyValue.u_timestamp)
  return _internal_u_timestamp();
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PropertyValue::unsafe_arena_release_u_timestamp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:uprotocol.core.udiscovery.v3.PropertyValue.u_timestamp)
  if (_internal_has_u_timestamp()) {
    clear_has_attr();
    ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.attr_.u_timestamp_;
    _impl_.attr_.u_timestamp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PropertyValue::unsafe_arena_set_allocated_u_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* u_timestamp) {
  clear_attr();
  if (u_timestamp) {
    set_has_u_timestamp();
    _impl_.attr_.u_timestamp_ = u_timestamp;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:uprotocol.core.udiscovery.v3.PropertyValue.u_timestamp)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PropertyValue::_internal_mutable_u_timestamp() {
  if (!_internal_has_u_timestamp()) {
    clear_attr();
    set_has_u_timestamp();
    _impl_.attr_.u_timestamp_ = CreateMaybeMessage< ::PROTOBUF_NAMESPACE_ID::Timestamp >(GetArenaForAllocation());
  }
  return _impl_.attr_.u_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* PropertyValue::mutable_u_timestamp() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_u_timestamp();
  // @@protoc_insertion_point(field_mutable:uprotocol.core.udiscovery.v3.PropertyValue.u_timestamp)
  return _msg;
}

// double u_double = 7;
inline bool PropertyValue::_internal_has_u_double() const {
  return attr_case() == kUDouble;
}
inline bool PropertyValue::has_u_double() const {
  return _internal_has_u_double();
}
inline void PropertyValue::set_has_u_double() {
  _impl_._oneof_case_[0] = kUDouble;
}
inline void PropertyValue::clear_u_double() {
  if (_internal_has_u_double()) {
    _impl_.attr_.u_double_ = 0;
    clear_has_attr();
  }
}
inline double PropertyValue::_internal_u_double() const {
  if (_internal_has_u_double()) {
    return _impl_.attr_.u_double_;
  }
  return 0;
}
inline void PropertyValue::_internal_set_u_double(double value) {
  if (!_internal_has_u_double()) {
    clear_attr();
    set_has_u_double();
  }
  _impl_.attr_.u_double_ = value;
}
inline double PropertyValue::u_double() const {
  // @@protoc_insertion_point(field_get:uprotocol.core.udiscovery.v3.PropertyValue.u_double)
  return _internal_u_double();
}
inline void PropertyValue::set_u_double(double value) {
  _internal_set_u_double(value);
  // @@protoc_insertion_point(field_set:uprotocol.core.udiscovery.v3.PropertyValue.u_double)
}

// int64 u_integer_64 = 8;
inline bool PropertyValue::_internal_has_u_integer_64() const {
  return attr_case() == kUInteger64;
}
inline bool PropertyValue::has_u_integer_64() const {
  return _internal_has_u_integer_64();
}
inline void PropertyValue::set_has_u_integer_64() {
  _impl_._oneof_case_[0] = kUInteger64;
}
inline void PropertyValue::clear_u_integer_64() {
  if (_internal_has_u_integer_64()) {
    _impl_.attr_.u_integer_64_ = int64_t{0};
    clear_has_attr();
  }
}
inline int64_t PropertyValue::_internal_u_integer_64() const {
  if (_internal_has_u_integer_64()) {
    return _impl_.attr_.u_integer_64_;
  }
  return int64_t{0};
}
inline void PropertyValue::_internal_set_u_integer_64(int64_t value) {
  if (!_internal_has_u_integer_64()) {
    clear_attr();
    set_has_u_integer_64();
  }
  _impl_.attr_.u_integer_64_ = value;
}
inline int64_t PropertyValue::u_integer_64() const {
  // @@protoc_insertion_point(field_get:uprotocol.core.udiscovery.v3.PropertyValue.u_integer_64)
  return _internal_u_integer_64();
}
inline void PropertyValue::set_u_integer_64(int64_t value) {
  _internal_set_u_integer_64(value);
  // @@protoc_insertion_point(field_set:uprotocol.core.udiscovery.v3.PropertyValue.u_integer_64)
}

inline bool PropertyValue::has_attr() const {
  return attr_case() != ATTR_NOT_SET;
}
inline void PropertyValue::clear_has_attr() {
  _impl_._oneof_case_[0] = ATTR_NOT_SET;
}
inline PropertyValue::AttrCase PropertyValue::attr_case() const {
  return PropertyValue::AttrCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Node

// string uri = 1;
inline void Node::clear_uri() {
  _impl_.uri_.ClearToEmpty();
}
inline const std::string& Node::uri() const {
  // @@protoc_insertion_point(field_get:uprotocol.core.udiscovery.v3.Node.uri)
  return _internal_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Node::set_uri(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uri_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:uprotocol.core.udiscovery.v3.Node.uri)
}
inline std::string* Node::mutable_uri() {
  std::string* _s = _internal_mutable_uri();
  // @@protoc_insertion_point(field_mutable:uprotocol.core.udiscovery.v3.Node.uri)
  return _s;
}
inline const std::string& Node::_internal_uri() const {
  return _impl_.uri_.Get();
}
inline void Node::_internal_set_uri(const std::string& value) {
  
  _impl_.uri_.Set(value, GetArenaForAllocation());
}
inline std::string* Node::_internal_mutable_uri() {
  
  return _impl_.uri_.Mutable(GetArenaForAllocation());
}
inline std::string* Node::release_uri() {
  // @@protoc_insertion_point(field_release:uprotocol.core.udiscovery.v3.Node.uri)
  return _impl_.uri_.Release();
}
inline void Node::set_allocated_uri(std::string* uri) {
  if (uri != nullptr) {
    
  } else {
    
  }
  _impl_.uri_.SetAllocated(uri, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uri_.IsDefault()) {
    _impl_.uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:uprotocol.core.udiscovery.v3.Node.uri)
}

// repeated .uprotocol.core.udiscovery.v3.Node nodes = 2;
inline int Node::_internal_nodes_size() const {
  return _impl_.nodes_.size();
}
inline int Node::nodes_size() const {
  return _internal_nodes_size();
}
inline void Node::clear_nodes() {
  _impl_.nodes_.Clear();
}
inline ::uprotocol::core::udiscovery::v3::Node* Node::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:uprotocol.core.udiscovery.v3.Node.nodes)
  return _impl_.nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::uprotocol::core::udiscovery::v3::Node >*
Node::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:uprotocol.core.udiscovery.v3.Node.nodes)
  return &_impl_.nodes_;
}
inline const ::uprotocol::core::udiscovery::v3::Node& Node::_internal_nodes(int index) const {
  return _impl_.nodes_.Get(index);
}
inline const ::uprotocol::core::udiscovery::v3::Node& Node::nodes(int index) const {
  // @@protoc_insertion_point(field_get:uprotocol.core.udiscovery.v3.Node.nodes)
  return _internal_nodes(index);
}
inline ::uprotocol::core::udiscovery::v3::Node* Node::_internal_add_nodes() {
  return _impl_.nodes_.Add();
}
inline ::uprotocol::core::udiscovery::v3::Node* Node::add_nodes() {
  ::uprotocol::core::udiscovery::v3::Node* _add = _internal_add_nodes();
  // @@protoc_insertion_point(field_add:uprotocol.core.udiscovery.v3.Node.nodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::uprotocol::core::udiscovery::v3::Node >&
Node::nodes() const {
  // @@protoc_insertion_point(field_list:uprotocol.core.udiscovery.v3.Node.nodes)
  return _impl_.nodes_;
}

// map<string, .uprotocol.core.udiscovery.v3.PropertyValue> properties = 3;
inline int Node::_internal_properties_size() const {
  return _impl_.properties_.size();
}
inline int Node::properties_size() const {
  return _internal_properties_size();
}
inline void Node::clear_properties() {
  _impl_.properties_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::uprotocol::core::udiscovery::v3::PropertyValue >&
Node::_internal_properties() const {
  return _impl_.properties_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::uprotocol::core::udiscovery::v3::PropertyValue >&
Node::properties() const {
  // @@protoc_insertion_point(field_map:uprotocol.core.udiscovery.v3.Node.properties)
  return _internal_properties();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::uprotocol::core::udiscovery::v3::PropertyValue >*
Node::_internal_mutable_properties() {
  return _impl_.properties_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::uprotocol::core::udiscovery::v3::PropertyValue >*
Node::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_map:uprotocol.core.udiscovery.v3.Node.properties)
  return _internal_mutable_properties();
}

// .uprotocol.core.udiscovery.v3.Node.Type type = 4;
inline void Node::clear_type() {
  _impl_.type_ = 0;
}
inline ::uprotocol::core::udiscovery::v3::Node_Type Node::_internal_type() const {
  return static_cast< ::uprotocol::core::udiscovery::v3::Node_Type >(_impl_.type_);
}
inline ::uprotocol::core::udiscovery::v3::Node_Type Node::type() const {
  // @@protoc_insertion_point(field_get:uprotocol.core.udiscovery.v3.Node.type)
  return _internal_type();
}
inline void Node::_internal_set_type(::uprotocol::core::udiscovery::v3::Node_Type value) {
  
  _impl_.type_ = value;
}
inline void Node::set_type(::uprotocol::core::udiscovery::v3::Node_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:uprotocol.core.udiscovery.v3.Node.type)
}

// -------------------------------------------------------------------

// UpdateNodeRequest

// .uprotocol.core.udiscovery.v3.Node node = 1;
inline bool UpdateNodeRequest::_internal_has_node() const {
  return this != internal_default_instance() && _impl_.node_ != nullptr;
}
inline bool UpdateNodeRequest::has_node() const {
  return _internal_has_node();
}
inline void UpdateNodeRequest::clear_node() {
  if (GetArenaForAllocation() == nullptr && _impl_.node_ != nullptr) {
    delete _impl_.node_;
  }
  _impl_.node_ = nullptr;
}
inline const ::uprotocol::core::udiscovery::v3::Node& UpdateNodeRequest::_internal_node() const {
  const ::uprotocol::core::udiscovery::v3::Node* p = _impl_.node_;
  return p != nullptr ? *p : reinterpret_cast<const ::uprotocol::core::udiscovery::v3::Node&>(
      ::uprotocol::core::udiscovery::v3::_Node_default_instance_);
}
inline const ::uprotocol::core::udiscovery::v3::Node& UpdateNodeRequest::node() const {
  // @@protoc_insertion_point(field_get:uprotocol.core.udiscovery.v3.UpdateNodeRequest.node)
  return _internal_node();
}
inline void UpdateNodeRequest::unsafe_arena_set_allocated_node(
    ::uprotocol::core::udiscovery::v3::Node* node) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.node_);
  }
  _impl_.node_ = node;
  if (node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:uprotocol.core.udiscovery.v3.UpdateNodeRequest.node)
}
inline ::uprotocol::core::udiscovery::v3::Node* UpdateNodeRequest::release_node() {
  
  ::uprotocol::core::udiscovery::v3::Node* temp = _impl_.node_;
  _impl_.node_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::uprotocol::core::udiscovery::v3::Node* UpdateNodeRequest::unsafe_arena_release_node() {
  // @@protoc_insertion_point(field_release:uprotocol.core.udiscovery.v3.UpdateNodeRequest.node)
  
  ::uprotocol::core::udiscovery::v3::Node* temp = _impl_.node_;
  _impl_.node_ = nullptr;
  return temp;
}
inline ::uprotocol::core::udiscovery::v3::Node* UpdateNodeRequest::_internal_mutable_node() {
  
  if (_impl_.node_ == nullptr) {
    auto* p = CreateMaybeMessage<::uprotocol::core::udiscovery::v3::Node>(GetArenaForAllocation());
    _impl_.node_ = p;
  }
  return _impl_.node_;
}
inline ::uprotocol::core::udiscovery::v3::Node* UpdateNodeRequest::mutable_node() {
  ::uprotocol::core::udiscovery::v3::Node* _msg = _internal_mutable_node();
  // @@protoc_insertion_point(field_mutable:uprotocol.core.udiscovery.v3.UpdateNodeRequest.node)
  return _msg;
}
inline void UpdateNodeRequest::set_allocated_node(::uprotocol::core::udiscovery::v3::Node* node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.node_;
  }
  if (node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(node);
    if (message_arena != submessage_arena) {
      node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.node_ = node;
  // @@protoc_insertion_point(field_set_allocated:uprotocol.core.udiscovery.v3.UpdateNodeRequest.node)
}

// optional int32 ttl = 3;
inline bool UpdateNodeRequest::_internal_has_ttl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UpdateNodeRequest::has_ttl() const {
  return _internal_has_ttl();
}
inline void UpdateNodeRequest::clear_ttl() {
  _impl_.ttl_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t UpdateNodeRequest::_internal_ttl() const {
  return _impl_.ttl_;
}
inline int32_t UpdateNodeRequest::ttl() const {
  // @@protoc_insertion_point(field_get:uprotocol.core.udiscovery.v3.UpdateNodeRequest.ttl)
  return _internal_ttl();
}
inline void UpdateNodeRequest::_internal_set_ttl(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ttl_ = value;
}
inline void UpdateNodeRequest::set_ttl(int32_t value) {
  _internal_set_ttl(value);
  // @@protoc_insertion_point(field_set:uprotocol.core.udiscovery.v3.UpdateNodeRequest.ttl)
}

// -------------------------------------------------------------------

// DeleteNodesRequest

// repeated string uris = 1;
inline int DeleteNodesRequest::_internal_uris_size() const {
  return _impl_.uris_.size();
}
inline int DeleteNodesRequest::uris_size() const {
  return _internal_uris_size();
}
inline void DeleteNodesRequest::clear_uris() {
  _impl_.uris_.Clear();
}
inline std::string* DeleteNodesRequest::add_uris() {
  std::string* _s = _internal_add_uris();
  // @@protoc_insertion_point(field_add_mutable:uprotocol.core.udiscovery.v3.DeleteNodesRequest.uris)
  return _s;
}
inline const std::string& DeleteNodesRequest::_internal_uris(int index) const {
  return _impl_.uris_.Get(index);
}
inline const std::string& DeleteNodesRequest::uris(int index) const {
  // @@protoc_insertion_point(field_get:uprotocol.core.udiscovery.v3.DeleteNodesRequest.uris)
  return _internal_uris(index);
}
inline std::string* DeleteNodesRequest::mutable_uris(int index) {
  // @@protoc_insertion_point(field_mutable:uprotocol.core.udiscovery.v3.DeleteNodesRequest.uris)
  return _impl_.uris_.Mutable(index);
}
inline void DeleteNodesRequest::set_uris(int index, const std::string& value) {
  _impl_.uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:uprotocol.core.udiscovery.v3.DeleteNodesRequest.uris)
}
inline void DeleteNodesRequest::set_uris(int index, std::string&& value) {
  _impl_.uris_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:uprotocol.core.udiscovery.v3.DeleteNodesRequest.uris)
}
inline void DeleteNodesRequest::set_uris(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:uprotocol.core.udiscovery.v3.DeleteNodesRequest.uris)
}
inline void DeleteNodesRequest::set_uris(int index, const char* value, size_t size) {
  _impl_.uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:uprotocol.core.udiscovery.v3.DeleteNodesRequest.uris)
}
inline std::string* DeleteNodesRequest::_internal_add_uris() {
  return _impl_.uris_.Add();
}
inline void DeleteNodesRequest::add_uris(const std::string& value) {
  _impl_.uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:uprotocol.core.udiscovery.v3.DeleteNodesRequest.uris)
}
inline void DeleteNodesRequest::add_uris(std::string&& value) {
  _impl_.uris_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:uprotocol.core.udiscovery.v3.DeleteNodesRequest.uris)
}
inline void DeleteNodesRequest::add_uris(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:uprotocol.core.udiscovery.v3.DeleteNodesRequest.uris)
}
inline void DeleteNodesRequest::add_uris(const char* value, size_t size) {
  _impl_.uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:uprotocol.core.udiscovery.v3.DeleteNodesRequest.uris)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeleteNodesRequest::uris() const {
  // @@protoc_insertion_point(field_list:uprotocol.core.udiscovery.v3.DeleteNodesRequest.uris)
  return _impl_.uris_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeleteNodesRequest::mutable_uris() {
  // @@protoc_insertion_point(field_mutable_list:uprotocol.core.udiscovery.v3.DeleteNodesRequest.uris)
  return &_impl_.uris_;
}

// -------------------------------------------------------------------

// FindNodesRequest

// string uri = 1;
inline void FindNodesRequest::clear_uri() {
  _impl_.uri_.ClearToEmpty();
}
inline const std::string& FindNodesRequest::uri() const {
  // @@protoc_insertion_point(field_get:uprotocol.core.udiscovery.v3.FindNodesRequest.uri)
  return _internal_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindNodesRequest::set_uri(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uri_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:uprotocol.core.udiscovery.v3.FindNodesRequest.uri)
}
inline std::string* FindNodesRequest::mutable_uri() {
  std::string* _s = _internal_mutable_uri();
  // @@protoc_insertion_point(field_mutable:uprotocol.core.udiscovery.v3.FindNodesRequest.uri)
  return _s;
}
inline const std::string& FindNodesRequest::_internal_uri() const {
  return _impl_.uri_.Get();
}
inline void FindNodesRequest::_internal_set_uri(const std::string& value) {
  
  _impl_.uri_.Set(value, GetArenaForAllocation());
}
inline std::string* FindNodesRequest::_internal_mutable_uri() {
  
  return _impl_.uri_.Mutable(GetArenaForAllocation());
}
inline std::string* FindNodesRequest::release_uri() {
  // @@protoc_insertion_point(field_release:uprotocol.core.udiscovery.v3.FindNodesRequest.uri)
  return _impl_.uri_.Release();
}
inline void FindNodesRequest::set_allocated_uri(std::string* uri) {
  if (uri != nullptr) {
    
  } else {
    
  }
  _impl_.uri_.SetAllocated(uri, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uri_.IsDefault()) {
    _impl_.uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:uprotocol.core.udiscovery.v3.FindNodesRequest.uri)
}

// optional int32 depth = 2;
inline bool FindNodesRequest::_internal_has_depth() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FindNodesRequest::has_depth() const {
  return _internal_has_depth();
}
inline void FindNodesRequest::clear_depth() {
  _impl_.depth_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t FindNodesRequest::_internal_depth() const {
  return _impl_.depth_;
}
inline int32_t FindNodesRequest::depth() const {
  // @@protoc_insertion_point(field_get:uprotocol.core.udiscovery.v3.FindNodesRequest.depth)
  return _internal_depth();
}
inline void FindNodesRequest::_internal_set_depth(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.depth_ = value;
}
inline void FindNodesRequest::set_depth(int32_t value) {
  _internal_set_depth(value);
  // @@protoc_insertion_point(field_set:uprotocol.core.udiscovery.v3.FindNodesRequest.depth)
}

// -------------------------------------------------------------------

// FindNodesResponse

// repeated .uprotocol.core.udiscovery.v3.Node nodes = 1;
inline int FindNodesResponse::_internal_nodes_size() const {
  return _impl_.nodes_.size();
}
inline int FindNodesResponse::nodes_size() const {
  return _internal_nodes_size();
}
inline void FindNodesResponse::clear_nodes() {
  _impl_.nodes_.Clear();
}
inline ::uprotocol::core::udiscovery::v3::Node* FindNodesResponse::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:uprotocol.core.udiscovery.v3.FindNodesResponse.nodes)
  return _impl_.nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::uprotocol::core::udiscovery::v3::Node >*
FindNodesResponse::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:uprotocol.core.udiscovery.v3.FindNodesResponse.nodes)
  return &_impl_.nodes_;
}
inline const ::uprotocol::core::udiscovery::v3::Node& FindNodesResponse::_internal_nodes(int index) const {
  return _impl_.nodes_.Get(index);
}
inline const ::uprotocol::core::udiscovery::v3::Node& FindNodesResponse::nodes(int index) const {
  // @@protoc_insertion_point(field_get:uprotocol.core.udiscovery.v3.FindNodesResponse.nodes)
  return _internal_nodes(index);
}
inline ::uprotocol::core::udiscovery::v3::Node* FindNodesResponse::_internal_add_nodes() {
  return _impl_.nodes_.Add();
}
inline ::uprotocol::core::udiscovery::v3::Node* FindNodesResponse::add_nodes() {
  ::uprotocol::core::udiscovery::v3::Node* _add = _internal_add_nodes();
  // @@protoc_insertion_point(field_add:uprotocol.core.udiscovery.v3.FindNodesResponse.nodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::uprotocol::core::udiscovery::v3::Node >&
FindNodesResponse::nodes() const {
  // @@protoc_insertion_point(field_list:uprotocol.core.udiscovery.v3.FindNodesResponse.nodes)
  return _impl_.nodes_;
}

// .uprotocol.v1.UStatus status = 2;
inline bool FindNodesResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool FindNodesResponse::has_status() const {
  return _internal_has_status();
}
inline const ::uprotocol::v1::UStatus& FindNodesResponse::_internal_status() const {
  const ::uprotocol::v1::UStatus* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::uprotocol::v1::UStatus&>(
      ::uprotocol::v1::_UStatus_default_instance_);
}
inline const ::uprotocol::v1::UStatus& FindNodesResponse::status() const {
  // @@protoc_insertion_point(field_get:uprotocol.core.udiscovery.v3.FindNodesResponse.status)
  return _internal_status();
}
inline void FindNodesResponse::unsafe_arena_set_allocated_status(
    ::uprotocol::v1::UStatus* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:uprotocol.core.udiscovery.v3.FindNodesResponse.status)
}
inline ::uprotocol::v1::UStatus* FindNodesResponse::release_status() {
  
  ::uprotocol::v1::UStatus* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::uprotocol::v1::UStatus* FindNodesResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:uprotocol.core.udiscovery.v3.FindNodesResponse.status)
  
  ::uprotocol::v1::UStatus* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::uprotocol::v1::UStatus* FindNodesResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::uprotocol::v1::UStatus>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::uprotocol::v1::UStatus* FindNodesResponse::mutable_status() {
  ::uprotocol::v1::UStatus* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:uprotocol.core.udiscovery.v3.FindNodesResponse.status)
  return _msg;
}
inline void FindNodesResponse::set_allocated_status(::uprotocol::v1::UStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:uprotocol.core.udiscovery.v3.FindNodesResponse.status)
}

// optional int32 ttl = 3;
inline bool FindNodesResponse::_internal_has_ttl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FindNodesResponse::has_ttl() const {
  return _internal_has_ttl();
}
inline void FindNodesResponse::clear_ttl() {
  _impl_.ttl_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t FindNodesResponse::_internal_ttl() const {
  return _impl_.ttl_;
}
inline int32_t FindNodesResponse::ttl() const {
  // @@protoc_insertion_point(field_get:uprotocol.core.udiscovery.v3.FindNodesResponse.ttl)
  return _internal_ttl();
}
inline void FindNodesResponse::_internal_set_ttl(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ttl_ = value;
}
inline void FindNodesResponse::set_ttl(int32_t value) {
  _internal_set_ttl(value);
  // @@protoc_insertion_point(field_set:uprotocol.core.udiscovery.v3.FindNodesResponse.ttl)
}

// -------------------------------------------------------------------

// FindNodePropertiesRequest

// string uri = 1;
inline void FindNodePropertiesRequest::clear_uri() {
  _impl_.uri_.ClearToEmpty();
}
inline const std::string& FindNodePropertiesRequest::uri() const {
  // @@protoc_insertion_point(field_get:uprotocol.core.udiscovery.v3.FindNodePropertiesRequest.uri)
  return _internal_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindNodePropertiesRequest::set_uri(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uri_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:uprotocol.core.udiscovery.v3.FindNodePropertiesRequest.uri)
}
inline std::string* FindNodePropertiesRequest::mutable_uri() {
  std::string* _s = _internal_mutable_uri();
  // @@protoc_insertion_point(field_mutable:uprotocol.core.udiscovery.v3.FindNodePropertiesRequest.uri)
  return _s;
}
inline const std::string& FindNodePropertiesRequest::_internal_uri() const {
  return _impl_.uri_.Get();
}
inline void FindNodePropertiesRequest::_internal_set_uri(const std::string& value) {
  
  _impl_.uri_.Set(value, GetArenaForAllocation());
}
inline std::string* FindNodePropertiesRequest::_internal_mutable_uri() {
  
  return _impl_.uri_.Mutable(GetArenaForAllocation());
}
inline std::string* FindNodePropertiesRequest::release_uri() {
  // @@protoc_insertion_point(field_release:uprotocol.core.udiscovery.v3.FindNodePropertiesRequest.uri)
  return _impl_.uri_.Release();
}
inline void FindNodePropertiesRequest::set_allocated_uri(std::string* uri) {
  if (uri != nullptr) {
    
  } else {
    
  }
  _impl_.uri_.SetAllocated(uri, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uri_.IsDefault()) {
    _impl_.uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:uprotocol.core.udiscovery.v3.FindNodePropertiesRequest.uri)
}

// repeated string properties = 2;
inline int FindNodePropertiesRequest::_internal_properties_size() const {
  return _impl_.properties_.size();
}
inline int FindNodePropertiesRequest::properties_size() const {
  return _internal_properties_size();
}
inline void FindNodePropertiesRequest::clear_properties() {
  _impl_.properties_.Clear();
}
inline std::string* FindNodePropertiesRequest::add_properties() {
  std::string* _s = _internal_add_properties();
  // @@protoc_insertion_point(field_add_mutable:uprotocol.core.udiscovery.v3.FindNodePropertiesRequest.properties)
  return _s;
}
inline const std::string& FindNodePropertiesRequest::_internal_properties(int index) const {
  return _impl_.properties_.Get(index);
}
inline const std::string& FindNodePropertiesRequest::properties(int index) const {
  // @@protoc_insertion_point(field_get:uprotocol.core.udiscovery.v3.FindNodePropertiesRequest.properties)
  return _internal_properties(index);
}
inline std::string* FindNodePropertiesRequest::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:uprotocol.core.udiscovery.v3.FindNodePropertiesRequest.properties)
  return _impl_.properties_.Mutable(index);
}
inline void FindNodePropertiesRequest::set_properties(int index, const std::string& value) {
  _impl_.properties_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:uprotocol.core.udiscovery.v3.FindNodePropertiesRequest.properties)
}
inline void FindNodePropertiesRequest::set_properties(int index, std::string&& value) {
  _impl_.properties_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:uprotocol.core.udiscovery.v3.FindNodePropertiesRequest.properties)
}
inline void FindNodePropertiesRequest::set_properties(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.properties_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:uprotocol.core.udiscovery.v3.FindNodePropertiesRequest.properties)
}
inline void FindNodePropertiesRequest::set_properties(int index, const char* value, size_t size) {
  _impl_.properties_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:uprotocol.core.udiscovery.v3.FindNodePropertiesRequest.properties)
}
inline std::string* FindNodePropertiesRequest::_internal_add_properties() {
  return _impl_.properties_.Add();
}
inline void FindNodePropertiesRequest::add_properties(const std::string& value) {
  _impl_.properties_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:uprotocol.core.udiscovery.v3.FindNodePropertiesRequest.properties)
}
inline void FindNodePropertiesRequest::add_properties(std::string&& value) {
  _impl_.properties_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:uprotocol.core.udiscovery.v3.FindNodePropertiesRequest.properties)
}
inline void FindNodePropertiesRequest::add_properties(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.properties_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:uprotocol.core.udiscovery.v3.FindNodePropertiesRequest.properties)
}
inline void FindNodePropertiesRequest::add_properties(const char* value, size_t size) {
  _impl_.properties_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:uprotocol.core.udiscovery.v3.FindNodePropertiesRequest.properties)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FindNodePropertiesRequest::properties() const {
  // @@protoc_insertion_point(field_list:uprotocol.core.udiscovery.v3.FindNodePropertiesRequest.properties)
  return _impl_.properties_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FindNodePropertiesRequest::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:uprotocol.core.udiscovery.v3.FindNodePropertiesRequest.properties)
  return &_impl_.properties_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// FindNodePropertiesResponse

// map<string, .uprotocol.core.udiscovery.v3.PropertyValue> properties = 1;
inline int FindNodePropertiesResponse::_internal_properties_size() const {
  return _impl_.properties_.size();
}
inline int FindNodePropertiesResponse::properties_size() const {
  return _internal_properties_size();
}
inline void FindNodePropertiesResponse::clear_properties() {
  _impl_.properties_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::uprotocol::core::udiscovery::v3::PropertyValue >&
FindNodePropertiesResponse::_internal_properties() const {
  return _impl_.properties_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::uprotocol::core::udiscovery::v3::PropertyValue >&
FindNodePropertiesResponse::properties() const {
  // @@protoc_insertion_point(field_map:uprotocol.core.udiscovery.v3.FindNodePropertiesResponse.properties)
  return _internal_properties();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::uprotocol::core::udiscovery::v3::PropertyValue >*
FindNodePropertiesResponse::_internal_mutable_properties() {
  return _impl_.properties_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::uprotocol::core::udiscovery::v3::PropertyValue >*
FindNodePropertiesResponse::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_map:uprotocol.core.udiscovery.v3.FindNodePropertiesResponse.properties)
  return _internal_mutable_properties();
}

// .uprotocol.v1.UStatus status = 2;
inline bool FindNodePropertiesResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool FindNodePropertiesResponse::has_status() const {
  return _internal_has_status();
}
inline const ::uprotocol::v1::UStatus& FindNodePropertiesResponse::_internal_status() const {
  const ::uprotocol::v1::UStatus* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::uprotocol::v1::UStatus&>(
      ::uprotocol::v1::_UStatus_default_instance_);
}
inline const ::uprotocol::v1::UStatus& FindNodePropertiesResponse::status() const {
  // @@protoc_insertion_point(field_get:uprotocol.core.udiscovery.v3.FindNodePropertiesResponse.status)
  return _internal_status();
}
inline void FindNodePropertiesResponse::unsafe_arena_set_allocated_status(
    ::uprotocol::v1::UStatus* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:uprotocol.core.udiscovery.v3.FindNodePropertiesResponse.status)
}
inline ::uprotocol::v1::UStatus* FindNodePropertiesResponse::release_status() {
  
  ::uprotocol::v1::UStatus* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::uprotocol::v1::UStatus* FindNodePropertiesResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:uprotocol.core.udiscovery.v3.FindNodePropertiesResponse.status)
  
  ::uprotocol::v1::UStatus* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::uprotocol::v1::UStatus* FindNodePropertiesResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::uprotocol::v1::UStatus>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::uprotocol::v1::UStatus* FindNodePropertiesResponse::mutable_status() {
  ::uprotocol::v1::UStatus* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:uprotocol.core.udiscovery.v3.FindNodePropertiesResponse.status)
  return _msg;
}
inline void FindNodePropertiesResponse::set_allocated_status(::uprotocol::v1::UStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:uprotocol.core.udiscovery.v3.FindNodePropertiesResponse.status)
}

// -------------------------------------------------------------------

// AddNodesRequest

// string parent_uri = 1;
inline void AddNodesRequest::clear_parent_uri() {
  _impl_.parent_uri_.ClearToEmpty();
}
inline const std::string& AddNodesRequest::parent_uri() const {
  // @@protoc_insertion_point(field_get:uprotocol.core.udiscovery.v3.AddNodesRequest.parent_uri)
  return _internal_parent_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddNodesRequest::set_parent_uri(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_uri_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:uprotocol.core.udiscovery.v3.AddNodesRequest.parent_uri)
}
inline std::string* AddNodesRequest::mutable_parent_uri() {
  std::string* _s = _internal_mutable_parent_uri();
  // @@protoc_insertion_point(field_mutable:uprotocol.core.udiscovery.v3.AddNodesRequest.parent_uri)
  return _s;
}
inline const std::string& AddNodesRequest::_internal_parent_uri() const {
  return _impl_.parent_uri_.Get();
}
inline void AddNodesRequest::_internal_set_parent_uri(const std::string& value) {
  
  _impl_.parent_uri_.Set(value, GetArenaForAllocation());
}
inline std::string* AddNodesRequest::_internal_mutable_parent_uri() {
  
  return _impl_.parent_uri_.Mutable(GetArenaForAllocation());
}
inline std::string* AddNodesRequest::release_parent_uri() {
  // @@protoc_insertion_point(field_release:uprotocol.core.udiscovery.v3.AddNodesRequest.parent_uri)
  return _impl_.parent_uri_.Release();
}
inline void AddNodesRequest::set_allocated_parent_uri(std::string* parent_uri) {
  if (parent_uri != nullptr) {
    
  } else {
    
  }
  _impl_.parent_uri_.SetAllocated(parent_uri, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_uri_.IsDefault()) {
    _impl_.parent_uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:uprotocol.core.udiscovery.v3.AddNodesRequest.parent_uri)
}

// repeated .uprotocol.core.udiscovery.v3.Node nodes = 2;
inline int AddNodesRequest::_internal_nodes_size() const {
  return _impl_.nodes_.size();
}
inline int AddNodesRequest::nodes_size() const {
  return _internal_nodes_size();
}
inline void AddNodesRequest::clear_nodes() {
  _impl_.nodes_.Clear();
}
inline ::uprotocol::core::udiscovery::v3::Node* AddNodesRequest::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:uprotocol.core.udiscovery.v3.AddNodesRequest.nodes)
  return _impl_.nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::uprotocol::core::udiscovery::v3::Node >*
AddNodesRequest::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:uprotocol.core.udiscovery.v3.AddNodesRequest.nodes)
  return &_impl_.nodes_;
}
inline const ::uprotocol::core::udiscovery::v3::Node& AddNodesRequest::_internal_nodes(int index) const {
  return _impl_.nodes_.Get(index);
}
inline const ::uprotocol::core::udiscovery::v3::Node& AddNodesRequest::nodes(int index) const {
  // @@protoc_insertion_point(field_get:uprotocol.core.udiscovery.v3.AddNodesRequest.nodes)
  return _internal_nodes(index);
}
inline ::uprotocol::core::udiscovery::v3::Node* AddNodesRequest::_internal_add_nodes() {
  return _impl_.nodes_.Add();
}
inline ::uprotocol::core::udiscovery::v3::Node* AddNodesRequest::add_nodes() {
  ::uprotocol::core::udiscovery::v3::Node* _add = _internal_add_nodes();
  // @@protoc_insertion_point(field_add:uprotocol.core.udiscovery.v3.AddNodesRequest.nodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::uprotocol::core::udiscovery::v3::Node >&
AddNodesRequest::nodes() const {
  // @@protoc_insertion_point(field_list:uprotocol.core.udiscovery.v3.AddNodesRequest.nodes)
  return _impl_.nodes_;
}

// -------------------------------------------------------------------

// UpdatePropertyRequest

// string uri = 1;
inline void UpdatePropertyRequest::clear_uri() {
  _impl_.uri_.ClearToEmpty();
}
inline const std::string& UpdatePropertyRequest::uri() const {
  // @@protoc_insertion_point(field_get:uprotocol.core.udiscovery.v3.UpdatePropertyRequest.uri)
  return _internal_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdatePropertyRequest::set_uri(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uri_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:uprotocol.core.udiscovery.v3.UpdatePropertyRequest.uri)
}
inline std::string* UpdatePropertyRequest::mutable_uri() {
  std::string* _s = _internal_mutable_uri();
  // @@protoc_insertion_point(field_mutable:uprotocol.core.udiscovery.v3.UpdatePropertyRequest.uri)
  return _s;
}
inline const std::string& UpdatePropertyRequest::_internal_uri() const {
  return _impl_.uri_.Get();
}
inline void UpdatePropertyRequest::_internal_set_uri(const std::string& value) {
  
  _impl_.uri_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdatePropertyRequest::_internal_mutable_uri() {
  
  return _impl_.uri_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdatePropertyRequest::release_uri() {
  // @@protoc_insertion_point(field_release:uprotocol.core.udiscovery.v3.UpdatePropertyRequest.uri)
  return _impl_.uri_.Release();
}
inline void UpdatePropertyRequest::set_allocated_uri(std::string* uri) {
  if (uri != nullptr) {
    
  } else {
    
  }
  _impl_.uri_.SetAllocated(uri, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uri_.IsDefault()) {
    _impl_.uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:uprotocol.core.udiscovery.v3.UpdatePropertyRequest.uri)
}

// string property = 2;
inline void UpdatePropertyRequest::clear_property() {
  _impl_.property_.ClearToEmpty();
}
inline const std::string& UpdatePropertyRequest::property() const {
  // @@protoc_insertion_point(field_get:uprotocol.core.udiscovery.v3.UpdatePropertyRequest.property)
  return _internal_property();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdatePropertyRequest::set_property(ArgT0&& arg0, ArgT... args) {
 
 _impl_.property_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:uprotocol.core.udiscovery.v3.UpdatePropertyRequest.property)
}
inline std::string* UpdatePropertyRequest::mutable_property() {
  std::string* _s = _internal_mutable_property();
  // @@protoc_insertion_point(field_mutable:uprotocol.core.udiscovery.v3.UpdatePropertyRequest.property)
  return _s;
}
inline const std::string& UpdatePropertyRequest::_internal_property() const {
  return _impl_.property_.Get();
}
inline void UpdatePropertyRequest::_internal_set_property(const std::string& value) {
  
  _impl_.property_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdatePropertyRequest::_internal_mutable_property() {
  
  return _impl_.property_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdatePropertyRequest::release_property() {
  // @@protoc_insertion_point(field_release:uprotocol.core.udiscovery.v3.UpdatePropertyRequest.property)
  return _impl_.property_.Release();
}
inline void UpdatePropertyRequest::set_allocated_property(std::string* property) {
  if (property != nullptr) {
    
  } else {
    
  }
  _impl_.property_.SetAllocated(property, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.property_.IsDefault()) {
    _impl_.property_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:uprotocol.core.udiscovery.v3.UpdatePropertyRequest.property)
}

// .uprotocol.core.udiscovery.v3.PropertyValue value = 3;
inline bool UpdatePropertyRequest::_internal_has_value() const {
  return this != internal_default_instance() && _impl_.value_ != nullptr;
}
inline bool UpdatePropertyRequest::has_value() const {
  return _internal_has_value();
}
inline void UpdatePropertyRequest::clear_value() {
  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
}
inline const ::uprotocol::core::udiscovery::v3::PropertyValue& UpdatePropertyRequest::_internal_value() const {
  const ::uprotocol::core::udiscovery::v3::PropertyValue* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::uprotocol::core::udiscovery::v3::PropertyValue&>(
      ::uprotocol::core::udiscovery::v3::_PropertyValue_default_instance_);
}
inline const ::uprotocol::core::udiscovery::v3::PropertyValue& UpdatePropertyRequest::value() const {
  // @@protoc_insertion_point(field_get:uprotocol.core.udiscovery.v3.UpdatePropertyRequest.value)
  return _internal_value();
}
inline void UpdatePropertyRequest::unsafe_arena_set_allocated_value(
    ::uprotocol::core::udiscovery::v3::PropertyValue* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:uprotocol.core.udiscovery.v3.UpdatePropertyRequest.value)
}
inline ::uprotocol::core::udiscovery::v3::PropertyValue* UpdatePropertyRequest::release_value() {
  
  ::uprotocol::core::udiscovery::v3::PropertyValue* temp = _impl_.value_;
  _impl_.value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::uprotocol::core::udiscovery::v3::PropertyValue* UpdatePropertyRequest::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:uprotocol.core.udiscovery.v3.UpdatePropertyRequest.value)
  
  ::uprotocol::core::udiscovery::v3::PropertyValue* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::uprotocol::core::udiscovery::v3::PropertyValue* UpdatePropertyRequest::_internal_mutable_value() {
  
  if (_impl_.value_ == nullptr) {
    auto* p = CreateMaybeMessage<::uprotocol::core::udiscovery::v3::PropertyValue>(GetArenaForAllocation());
    _impl_.value_ = p;
  }
  return _impl_.value_;
}
inline ::uprotocol::core::udiscovery::v3::PropertyValue* UpdatePropertyRequest::mutable_value() {
  ::uprotocol::core::udiscovery::v3::PropertyValue* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:uprotocol.core.udiscovery.v3.UpdatePropertyRequest.value)
  return _msg;
}
inline void UpdatePropertyRequest::set_allocated_value(::uprotocol::core::udiscovery::v3::PropertyValue* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.value_ = value;
  // @@protoc_insertion_point(field_set_allocated:uprotocol.core.udiscovery.v3.UpdatePropertyRequest.value)
}

// -------------------------------------------------------------------

// Notification

// string uri = 1;
inline void Notification::clear_uri() {
  _impl_.uri_.ClearToEmpty();
}
inline const std::string& Notification::uri() const {
  // @@protoc_insertion_point(field_get:uprotocol.core.udiscovery.v3.Notification.uri)
  return _internal_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Notification::set_uri(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uri_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:uprotocol.core.udiscovery.v3.Notification.uri)
}
inline std::string* Notification::mutable_uri() {
  std::string* _s = _internal_mutable_uri();
  // @@protoc_insertion_point(field_mutable:uprotocol.core.udiscovery.v3.Notification.uri)
  return _s;
}
inline const std::string& Notification::_internal_uri() const {
  return _impl_.uri_.Get();
}
inline void Notification::_internal_set_uri(const std::string& value) {
  
  _impl_.uri_.Set(value, GetArenaForAllocation());
}
inline std::string* Notification::_internal_mutable_uri() {
  
  return _impl_.uri_.Mutable(GetArenaForAllocation());
}
inline std::string* Notification::release_uri() {
  // @@protoc_insertion_point(field_release:uprotocol.core.udiscovery.v3.Notification.uri)
  return _impl_.uri_.Release();
}
inline void Notification::set_allocated_uri(std::string* uri) {
  if (uri != nullptr) {
    
  } else {
    
  }
  _impl_.uri_.SetAllocated(uri, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uri_.IsDefault()) {
    _impl_.uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:uprotocol.core.udiscovery.v3.Notification.uri)
}

// optional string parent_uri = 2;
inline bool Notification::_internal_has_parent_uri() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Notification::has_parent_uri() const {
  return _internal_has_parent_uri();
}
inline void Notification::clear_parent_uri() {
  _impl_.parent_uri_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Notification::parent_uri() const {
  // @@protoc_insertion_point(field_get:uprotocol.core.udiscovery.v3.Notification.parent_uri)
  return _internal_parent_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Notification::set_parent_uri(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.parent_uri_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:uprotocol.core.udiscovery.v3.Notification.parent_uri)
}
inline std::string* Notification::mutable_parent_uri() {
  std::string* _s = _internal_mutable_parent_uri();
  // @@protoc_insertion_point(field_mutable:uprotocol.core.udiscovery.v3.Notification.parent_uri)
  return _s;
}
inline const std::string& Notification::_internal_parent_uri() const {
  return _impl_.parent_uri_.Get();
}
inline void Notification::_internal_set_parent_uri(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.parent_uri_.Set(value, GetArenaForAllocation());
}
inline std::string* Notification::_internal_mutable_parent_uri() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.parent_uri_.Mutable(GetArenaForAllocation());
}
inline std::string* Notification::release_parent_uri() {
  // @@protoc_insertion_point(field_release:uprotocol.core.udiscovery.v3.Notification.parent_uri)
  if (!_internal_has_parent_uri()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.parent_uri_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_uri_.IsDefault()) {
    _impl_.parent_uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Notification::set_allocated_parent_uri(std::string* parent_uri) {
  if (parent_uri != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.parent_uri_.SetAllocated(parent_uri, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_uri_.IsDefault()) {
    _impl_.parent_uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:uprotocol.core.udiscovery.v3.Notification.parent_uri)
}

// .uprotocol.core.udiscovery.v3.Notification.Operation operation = 3;
inline void Notification::clear_operation() {
  _impl_.operation_ = 0;
}
inline ::uprotocol::core::udiscovery::v3::Notification_Operation Notification::_internal_operation() const {
  return static_cast< ::uprotocol::core::udiscovery::v3::Notification_Operation >(_impl_.operation_);
}
inline ::uprotocol::core::udiscovery::v3::Notification_Operation Notification::operation() const {
  // @@protoc_insertion_point(field_get:uprotocol.core.udiscovery.v3.Notification.operation)
  return _internal_operation();
}
inline void Notification::_internal_set_operation(::uprotocol::core::udiscovery::v3::Notification_Operation value) {
  
  _impl_.operation_ = value;
}
inline void Notification::set_operation(::uprotocol::core::udiscovery::v3::Notification_Operation value) {
  _internal_set_operation(value);
  // @@protoc_insertion_point(field_set:uprotocol.core.udiscovery.v3.Notification.operation)
}

// optional int32 ttl = 4;
inline bool Notification::_internal_has_ttl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Notification::has_ttl() const {
  return _internal_has_ttl();
}
inline void Notification::clear_ttl() {
  _impl_.ttl_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t Notification::_internal_ttl() const {
  return _impl_.ttl_;
}
inline int32_t Notification::ttl() const {
  // @@protoc_insertion_point(field_get:uprotocol.core.udiscovery.v3.Notification.ttl)
  return _internal_ttl();
}
inline void Notification::_internal_set_ttl(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ttl_ = value;
}
inline void Notification::set_ttl(int32_t value) {
  _internal_set_ttl(value);
  // @@protoc_insertion_point(field_set:uprotocol.core.udiscovery.v3.Notification.ttl)
}

// -------------------------------------------------------------------

// ObserverInfo

// string uri = 1;
inline void ObserverInfo::clear_uri() {
  _impl_.uri_.ClearToEmpty();
}
inline const std::string& ObserverInfo::uri() const {
  // @@protoc_insertion_point(field_get:uprotocol.core.udiscovery.v3.ObserverInfo.uri)
  return _internal_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObserverInfo::set_uri(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uri_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:uprotocol.core.udiscovery.v3.ObserverInfo.uri)
}
inline std::string* ObserverInfo::mutable_uri() {
  std::string* _s = _internal_mutable_uri();
  // @@protoc_insertion_point(field_mutable:uprotocol.core.udiscovery.v3.ObserverInfo.uri)
  return _s;
}
inline const std::string& ObserverInfo::_internal_uri() const {
  return _impl_.uri_.Get();
}
inline void ObserverInfo::_internal_set_uri(const std::string& value) {
  
  _impl_.uri_.Set(value, GetArenaForAllocation());
}
inline std::string* ObserverInfo::_internal_mutable_uri() {
  
  return _impl_.uri_.Mutable(GetArenaForAllocation());
}
inline std::string* ObserverInfo::release_uri() {
  // @@protoc_insertion_point(field_release:uprotocol.core.udiscovery.v3.ObserverInfo.uri)
  return _impl_.uri_.Release();
}
inline void ObserverInfo::set_allocated_uri(std::string* uri) {
  if (uri != nullptr) {
    
  } else {
    
  }
  _impl_.uri_.SetAllocated(uri, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uri_.IsDefault()) {
    _impl_.uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:uprotocol.core.udiscovery.v3.ObserverInfo.uri)
}

// -------------------------------------------------------------------

// NotificationsRequest

// repeated string uris = 1;
inline int NotificationsRequest::_internal_uris_size() const {
  return _impl_.uris_.size();
}
inline int NotificationsRequest::uris_size() const {
  return _internal_uris_size();
}
inline void NotificationsRequest::clear_uris() {
  _impl_.uris_.Clear();
}
inline std::string* NotificationsRequest::add_uris() {
  std::string* _s = _internal_add_uris();
  // @@protoc_insertion_point(field_add_mutable:uprotocol.core.udiscovery.v3.NotificationsRequest.uris)
  return _s;
}
inline const std::string& NotificationsRequest::_internal_uris(int index) const {
  return _impl_.uris_.Get(index);
}
inline const std::string& NotificationsRequest::uris(int index) const {
  // @@protoc_insertion_point(field_get:uprotocol.core.udiscovery.v3.NotificationsRequest.uris)
  return _internal_uris(index);
}
inline std::string* NotificationsRequest::mutable_uris(int index) {
  // @@protoc_insertion_point(field_mutable:uprotocol.core.udiscovery.v3.NotificationsRequest.uris)
  return _impl_.uris_.Mutable(index);
}
inline void NotificationsRequest::set_uris(int index, const std::string& value) {
  _impl_.uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:uprotocol.core.udiscovery.v3.NotificationsRequest.uris)
}
inline void NotificationsRequest::set_uris(int index, std::string&& value) {
  _impl_.uris_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:uprotocol.core.udiscovery.v3.NotificationsRequest.uris)
}
inline void NotificationsRequest::set_uris(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:uprotocol.core.udiscovery.v3.NotificationsRequest.uris)
}
inline void NotificationsRequest::set_uris(int index, const char* value, size_t size) {
  _impl_.uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:uprotocol.core.udiscovery.v3.NotificationsRequest.uris)
}
inline std::string* NotificationsRequest::_internal_add_uris() {
  return _impl_.uris_.Add();
}
inline void NotificationsRequest::add_uris(const std::string& value) {
  _impl_.uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:uprotocol.core.udiscovery.v3.NotificationsRequest.uris)
}
inline void NotificationsRequest::add_uris(std::string&& value) {
  _impl_.uris_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:uprotocol.core.udiscovery.v3.NotificationsRequest.uris)
}
inline void NotificationsRequest::add_uris(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:uprotocol.core.udiscovery.v3.NotificationsRequest.uris)
}
inline void NotificationsRequest::add_uris(const char* value, size_t size) {
  _impl_.uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:uprotocol.core.udiscovery.v3.NotificationsRequest.uris)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NotificationsRequest::uris() const {
  // @@protoc_insertion_point(field_list:uprotocol.core.udiscovery.v3.NotificationsRequest.uris)
  return _impl_.uris_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NotificationsRequest::mutable_uris() {
  // @@protoc_insertion_point(field_mutable_list:uprotocol.core.udiscovery.v3.NotificationsRequest.uris)
  return &_impl_.uris_;
}

// .uprotocol.core.udiscovery.v3.ObserverInfo observer = 2;
inline bool NotificationsRequest::_internal_has_observer() const {
  return this != internal_default_instance() && _impl_.observer_ != nullptr;
}
inline bool NotificationsRequest::has_observer() const {
  return _internal_has_observer();
}
inline void NotificationsRequest::clear_observer() {
  if (GetArenaForAllocation() == nullptr && _impl_.observer_ != nullptr) {
    delete _impl_.observer_;
  }
  _impl_.observer_ = nullptr;
}
inline const ::uprotocol::core::udiscovery::v3::ObserverInfo& NotificationsRequest::_internal_observer() const {
  const ::uprotocol::core::udiscovery::v3::ObserverInfo* p = _impl_.observer_;
  return p != nullptr ? *p : reinterpret_cast<const ::uprotocol::core::udiscovery::v3::ObserverInfo&>(
      ::uprotocol::core::udiscovery::v3::_ObserverInfo_default_instance_);
}
inline const ::uprotocol::core::udiscovery::v3::ObserverInfo& NotificationsRequest::observer() const {
  // @@protoc_insertion_point(field_get:uprotocol.core.udiscovery.v3.NotificationsRequest.observer)
  return _internal_observer();
}
inline void NotificationsRequest::unsafe_arena_set_allocated_observer(
    ::uprotocol::core::udiscovery::v3::ObserverInfo* observer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.observer_);
  }
  _impl_.observer_ = observer;
  if (observer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:uprotocol.core.udiscovery.v3.NotificationsRequest.observer)
}
inline ::uprotocol::core::udiscovery::v3::ObserverInfo* NotificationsRequest::release_observer() {
  
  ::uprotocol::core::udiscovery::v3::ObserverInfo* temp = _impl_.observer_;
  _impl_.observer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::uprotocol::core::udiscovery::v3::ObserverInfo* NotificationsRequest::unsafe_arena_release_observer() {
  // @@protoc_insertion_point(field_release:uprotocol.core.udiscovery.v3.NotificationsRequest.observer)
  
  ::uprotocol::core::udiscovery::v3::ObserverInfo* temp = _impl_.observer_;
  _impl_.observer_ = nullptr;
  return temp;
}
inline ::uprotocol::core::udiscovery::v3::ObserverInfo* NotificationsRequest::_internal_mutable_observer() {
  
  if (_impl_.observer_ == nullptr) {
    auto* p = CreateMaybeMessage<::uprotocol::core::udiscovery::v3::ObserverInfo>(GetArenaForAllocation());
    _impl_.observer_ = p;
  }
  return _impl_.observer_;
}
inline ::uprotocol::core::udiscovery::v3::ObserverInfo* NotificationsRequest::mutable_observer() {
  ::uprotocol::core::udiscovery::v3::ObserverInfo* _msg = _internal_mutable_observer();
  // @@protoc_insertion_point(field_mutable:uprotocol.core.udiscovery.v3.NotificationsRequest.observer)
  return _msg;
}
inline void NotificationsRequest::set_allocated_observer(::uprotocol::core::udiscovery::v3::ObserverInfo* observer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.observer_;
  }
  if (observer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(observer);
    if (message_arena != submessage_arena) {
      observer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, observer, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.observer_ = observer;
  // @@protoc_insertion_point(field_set_allocated:uprotocol.core.udiscovery.v3.NotificationsRequest.observer)
}

// optional int32 depth = 3;
inline bool NotificationsRequest::_internal_has_depth() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NotificationsRequest::has_depth() const {
  return _internal_has_depth();
}
inline void NotificationsRequest::clear_depth() {
  _impl_.depth_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t NotificationsRequest::_internal_depth() const {
  return _impl_.depth_;
}
inline int32_t NotificationsRequest::depth() const {
  // @@protoc_insertion_point(field_get:uprotocol.core.udiscovery.v3.NotificationsRequest.depth)
  return _internal_depth();
}
inline void NotificationsRequest::_internal_set_depth(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.depth_ = value;
}
inline void NotificationsRequest::set_depth(int32_t value) {
  _internal_set_depth(value);
  // @@protoc_insertion_point(field_set:uprotocol.core.udiscovery.v3.NotificationsRequest.depth)
}

// -------------------------------------------------------------------

// ResolveUriRequest

// .uprotocol.v1.UUri uri = 1;
inline bool ResolveUriRequest::_internal_has_uri() const {
  return this != internal_default_instance() && _impl_.uri_ != nullptr;
}
inline bool ResolveUriRequest::has_uri() const {
  return _internal_has_uri();
}
inline const ::uprotocol::v1::UUri& ResolveUriRequest::_internal_uri() const {
  const ::uprotocol::v1::UUri* p = _impl_.uri_;
  return p != nullptr ? *p : reinterpret_cast<const ::uprotocol::v1::UUri&>(
      ::uprotocol::v1::_UUri_default_instance_);
}
inline const ::uprotocol::v1::UUri& ResolveUriRequest::uri() const {
  // @@protoc_insertion_point(field_get:uprotocol.core.udiscovery.v3.ResolveUriRequest.uri)
  return _internal_uri();
}
inline void ResolveUriRequest::unsafe_arena_set_allocated_uri(
    ::uprotocol::v1::UUri* uri) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.uri_);
  }
  _impl_.uri_ = uri;
  if (uri) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:uprotocol.core.udiscovery.v3.ResolveUriRequest.uri)
}
inline ::uprotocol::v1::UUri* ResolveUriRequest::release_uri() {
  
  ::uprotocol::v1::UUri* temp = _impl_.uri_;
  _impl_.uri_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::uprotocol::v1::UUri* ResolveUriRequest::unsafe_arena_release_uri() {
  // @@protoc_insertion_point(field_release:uprotocol.core.udiscovery.v3.ResolveUriRequest.uri)
  
  ::uprotocol::v1::UUri* temp = _impl_.uri_;
  _impl_.uri_ = nullptr;
  return temp;
}
inline ::uprotocol::v1::UUri* ResolveUriRequest::_internal_mutable_uri() {
  
  if (_impl_.uri_ == nullptr) {
    auto* p = CreateMaybeMessage<::uprotocol::v1::UUri>(GetArenaForAllocation());
    _impl_.uri_ = p;
  }
  return _impl_.uri_;
}
inline ::uprotocol::v1::UUri* ResolveUriRequest::mutable_uri() {
  ::uprotocol::v1::UUri* _msg = _internal_mutable_uri();
  // @@protoc_insertion_point(field_mutable:uprotocol.core.udiscovery.v3.ResolveUriRequest.uri)
  return _msg;
}
inline void ResolveUriRequest::set_allocated_uri(::uprotocol::v1::UUri* uri) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.uri_);
  }
  if (uri) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uri));
    if (message_arena != submessage_arena) {
      uri = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uri, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.uri_ = uri;
  // @@protoc_insertion_point(field_set_allocated:uprotocol.core.udiscovery.v3.ResolveUriRequest.uri)
}

// -------------------------------------------------------------------

// ResolveUriResponse

// .uprotocol.v1.UUri uri = 1;
inline bool ResolveUriResponse::_internal_has_uri() const {
  return this != internal_default_instance() && _impl_.uri_ != nullptr;
}
inline bool ResolveUriResponse::has_uri() const {
  return _internal_has_uri();
}
inline const ::uprotocol::v1::UUri& ResolveUriResponse::_internal_uri() const {
  const ::uprotocol::v1::UUri* p = _impl_.uri_;
  return p != nullptr ? *p : reinterpret_cast<const ::uprotocol::v1::UUri&>(
      ::uprotocol::v1::_UUri_default_instance_);
}
inline const ::uprotocol::v1::UUri& ResolveUriResponse::uri() const {
  // @@protoc_insertion_point(field_get:uprotocol.core.udiscovery.v3.ResolveUriResponse.uri)
  return _internal_uri();
}
inline void ResolveUriResponse::unsafe_arena_set_allocated_uri(
    ::uprotocol::v1::UUri* uri) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.uri_);
  }
  _impl_.uri_ = uri;
  if (uri) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:uprotocol.core.udiscovery.v3.ResolveUriResponse.uri)
}
inline ::uprotocol::v1::UUri* ResolveUriResponse::release_uri() {
  
  ::uprotocol::v1::UUri* temp = _impl_.uri_;
  _impl_.uri_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::uprotocol::v1::UUri* ResolveUriResponse::unsafe_arena_release_uri() {
  // @@protoc_insertion_point(field_release:uprotocol.core.udiscovery.v3.ResolveUriResponse.uri)
  
  ::uprotocol::v1::UUri* temp = _impl_.uri_;
  _impl_.uri_ = nullptr;
  return temp;
}
inline ::uprotocol::v1::UUri* ResolveUriResponse::_internal_mutable_uri() {
  
  if (_impl_.uri_ == nullptr) {
    auto* p = CreateMaybeMessage<::uprotocol::v1::UUri>(GetArenaForAllocation());
    _impl_.uri_ = p;
  }
  return _impl_.uri_;
}
inline ::uprotocol::v1::UUri* ResolveUriResponse::mutable_uri() {
  ::uprotocol::v1::UUri* _msg = _internal_mutable_uri();
  // @@protoc_insertion_point(field_mutable:uprotocol.core.udiscovery.v3.ResolveUriResponse.uri)
  return _msg;
}
inline void ResolveUriResponse::set_allocated_uri(::uprotocol::v1::UUri* uri) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.uri_);
  }
  if (uri) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uri));
    if (message_arena != submessage_arena) {
      uri = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uri, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.uri_ = uri;
  // @@protoc_insertion_point(field_set_allocated:uprotocol.core.udiscovery.v3.ResolveUriResponse.uri)
}

// .uprotocol.v1.UStatus status = 3;
inline bool ResolveUriResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool ResolveUriResponse::has_status() const {
  return _internal_has_status();
}
inline const ::uprotocol::v1::UStatus& ResolveUriResponse::_internal_status() const {
  const ::uprotocol::v1::UStatus* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::uprotocol::v1::UStatus&>(
      ::uprotocol::v1::_UStatus_default_instance_);
}
inline const ::uprotocol::v1::UStatus& ResolveUriResponse::status() const {
  // @@protoc_insertion_point(field_get:uprotocol.core.udiscovery.v3.ResolveUriResponse.status)
  return _internal_status();
}
inline void ResolveUriResponse::unsafe_arena_set_allocated_status(
    ::uprotocol::v1::UStatus* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:uprotocol.core.udiscovery.v3.ResolveUriResponse.status)
}
inline ::uprotocol::v1::UStatus* ResolveUriResponse::release_status() {
  
  ::uprotocol::v1::UStatus* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::uprotocol::v1::UStatus* ResolveUriResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:uprotocol.core.udiscovery.v3.ResolveUriResponse.status)
  
  ::uprotocol::v1::UStatus* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::uprotocol::v1::UStatus* ResolveUriResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::uprotocol::v1::UStatus>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::uprotocol::v1::UStatus* ResolveUriResponse::mutable_status() {
  ::uprotocol::v1::UStatus* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:uprotocol.core.udiscovery.v3.ResolveUriResponse.status)
  return _msg;
}
inline void ResolveUriResponse::set_allocated_status(::uprotocol::v1::UStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:uprotocol.core.udiscovery.v3.ResolveUriResponse.status)
}

// -------------------------------------------------------------------

// LookupUriResponse

// .uprotocol.v1.UUriBatch uris = 1;
inline bool LookupUriResponse::_internal_has_uris() const {
  return this != internal_default_instance() && _impl_.uris_ != nullptr;
}
inline bool LookupUriResponse::has_uris() const {
  return _internal_has_uris();
}
inline const ::uprotocol::v1::UUriBatch& LookupUriResponse::_internal_uris() const {
  const ::uprotocol::v1::UUriBatch* p = _impl_.uris_;
  return p != nullptr ? *p : reinterpret_cast<const ::uprotocol::v1::UUriBatch&>(
      ::uprotocol::v1::_UUriBatch_default_instance_);
}
inline const ::uprotocol::v1::UUriBatch& LookupUriResponse::uris() const {
  // @@protoc_insertion_point(field_get:uprotocol.core.udiscovery.v3.LookupUriResponse.uris)
  return _internal_uris();
}
inline void LookupUriResponse::unsafe_arena_set_allocated_uris(
    ::uprotocol::v1::UUriBatch* uris) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.uris_);
  }
  _impl_.uris_ = uris;
  if (uris) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:uprotocol.core.udiscovery.v3.LookupUriResponse.uris)
}
inline ::uprotocol::v1::UUriBatch* LookupUriResponse::release_uris() {
  
  ::uprotocol::v1::UUriBatch* temp = _impl_.uris_;
  _impl_.uris_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::uprotocol::v1::UUriBatch* LookupUriResponse::unsafe_arena_release_uris() {
  // @@protoc_insertion_point(field_release:uprotocol.core.udiscovery.v3.LookupUriResponse.uris)
  
  ::uprotocol::v1::UUriBatch* temp = _impl_.uris_;
  _impl_.uris_ = nullptr;
  return temp;
}
inline ::uprotocol::v1::UUriBatch* LookupUriResponse::_internal_mutable_uris() {
  
  if (_impl_.uris_ == nullptr) {
    auto* p = CreateMaybeMessage<::uprotocol::v1::UUriBatch>(GetArenaForAllocation());
    _impl_.uris_ = p;
  }
  return _impl_.uris_;
}
inline ::uprotocol::v1::UUriBatch* LookupUriResponse::mutable_uris() {
  ::uprotocol::v1::UUriBatch* _msg = _internal_mutable_uris();
  // @@protoc_insertion_point(field_mutable:uprotocol.core.udiscovery.v3.LookupUriResponse.uris)
  return _msg;
}
inline void LookupUriResponse::set_allocated_uris(::uprotocol::v1::UUriBatch* uris) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.uris_);
  }
  if (uris) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uris));
    if (message_arena != submessage_arena) {
      uris = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uris, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.uris_ = uris;
  // @@protoc_insertion_point(field_set_allocated:uprotocol.core.udiscovery.v3.LookupUriResponse.uris)
}

// .uprotocol.v1.UStatus status = 2;
inline bool LookupUriResponse::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool LookupUriResponse::has_status() const {
  return _internal_has_status();
}
inline const ::uprotocol::v1::UStatus& LookupUriResponse::_internal_status() const {
  const ::uprotocol::v1::UStatus* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::uprotocol::v1::UStatus&>(
      ::uprotocol::v1::_UStatus_default_instance_);
}
inline const ::uprotocol::v1::UStatus& LookupUriResponse::status() const {
  // @@protoc_insertion_point(field_get:uprotocol.core.udiscovery.v3.LookupUriResponse.status)
  return _internal_status();
}
inline void LookupUriResponse::unsafe_arena_set_allocated_status(
    ::uprotocol::v1::UStatus* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:uprotocol.core.udiscovery.v3.LookupUriResponse.status)
}
inline ::uprotocol::v1::UStatus* LookupUriResponse::release_status() {
  
  ::uprotocol::v1::UStatus* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::uprotocol::v1::UStatus* LookupUriResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:uprotocol.core.udiscovery.v3.LookupUriResponse.status)
  
  ::uprotocol::v1::UStatus* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::uprotocol::v1::UStatus* LookupUriResponse::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::uprotocol::v1::UStatus>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::uprotocol::v1::UStatus* LookupUriResponse::mutable_status() {
  ::uprotocol::v1::UStatus* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:uprotocol.core.udiscovery.v3.LookupUriResponse.status)
  return _msg;
}
inline void LookupUriResponse::set_allocated_status(::uprotocol::v1::UStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:uprotocol.core.udiscovery.v3.LookupUriResponse.status)
}

// -------------------------------------------------------------------

// NodeNotificationTopic

// .uprotocol.core.udiscovery.v3.Notification.Resources resource_name = 1 [(.uprotocol.resource_name_mask) = "*"];
inline void NodeNotificationTopic::clear_resource_name() {
  _impl_.resource_name_ = 0;
}
inline ::uprotocol::core::udiscovery::v3::Notification_Resources NodeNotificationTopic::_internal_resource_name() const {
  return static_cast< ::uprotocol::core::udiscovery::v3::Notification_Resources >(_impl_.resource_name_);
}
inline ::uprotocol::core::udiscovery::v3::Notification_Resources NodeNotificationTopic::resource_name() const {
  // @@protoc_insertion_point(field_get:uprotocol.core.udiscovery.v3.NodeNotificationTopic.resource_name)
  return _internal_resource_name();
}
inline void NodeNotificationTopic::_internal_set_resource_name(::uprotocol::core::udiscovery::v3::Notification_Resources value) {
  
  _impl_.resource_name_ = value;
}
inline void NodeNotificationTopic::set_resource_name(::uprotocol::core::udiscovery::v3::Notification_Resources value) {
  _internal_set_resource_name(value);
  // @@protoc_insertion_point(field_set:uprotocol.core.udiscovery.v3.NodeNotificationTopic.resource_name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v3
}  // namespace udiscovery
}  // namespace core
}  // namespace uprotocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::uprotocol::core::udiscovery::v3::Node_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::uprotocol::core::udiscovery::v3::Node_Type>() {
  return ::uprotocol::core::udiscovery::v3::Node_Type_descriptor();
}
template <> struct is_proto_enum< ::uprotocol::core::udiscovery::v3::Notification_Operation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::uprotocol::core::udiscovery::v3::Notification_Operation>() {
  return ::uprotocol::core::udiscovery::v3::Notification_Operation_descriptor();
}
template <> struct is_proto_enum< ::uprotocol::core::udiscovery::v3::Notification_Resources> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::uprotocol::core::udiscovery::v3::Notification_Resources>() {
  return ::uprotocol::core::udiscovery::v3::Notification_Resources_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_core_2fudiscovery_2fv3_2fudiscovery_2eproto
