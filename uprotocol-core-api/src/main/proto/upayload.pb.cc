// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: upayload.proto

#include "upayload.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace uprotocol {
namespace v1 {
PROTOBUF_CONSTEXPR UPayload::UPayload(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.length_)*/0
  , /*decltype(_impl_.format_)*/0
  , /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct UPayloadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UPayloadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UPayloadDefaultTypeInternal() {}
  union {
    UPayload _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UPayloadDefaultTypeInternal _UPayload_default_instance_;
}  // namespace v1
}  // namespace uprotocol
static ::_pb::Metadata file_level_metadata_upayload_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_upayload_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_upayload_2eproto = nullptr;

const uint32_t TableStruct_upayload_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::uprotocol::v1::UPayload, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::v1::UPayload, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::uprotocol::v1::UPayload, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::uprotocol::v1::UPayload, _impl_.length_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::v1::UPayload, _impl_.format_),
  PROTOBUF_FIELD_OFFSET(::uprotocol::v1::UPayload, _impl_.data_),
  ~0u,
  ~0u,
  0,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, -1, sizeof(::uprotocol::v1::UPayload)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::uprotocol::v1::_UPayload_default_instance_._instance,
};

const char descriptor_table_protodef_upayload_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016upayload.proto\022\014uprotocol.v1\"\206\001\n\010UPayl"
  "oad\022\023\n\treference\030\001 \001(\006H\000\022\017\n\005value\030\002 \001(\014H"
  "\000\022\023\n\006length\030\003 \001(\005H\001\210\001\001\022,\n\006format\030\004 \001(\0162\034"
  ".uprotocol.v1.UPayloadFormatB\006\n\004dataB\t\n\007"
  "_length*\330\001\n\016UPayloadFormat\022\037\n\033UPAYLOAD_F"
  "ORMAT_UNSPECIFIED\020\000\022\034\n\030UPAYLOAD_FORMAT_P"
  "ROTOBUF\020\001\022\030\n\024UPAYLOAD_FORMAT_JSON\020\002\022\032\n\026U"
  "PAYLOAD_FORMAT_SOMEIP\020\003\022\036\n\032UPAYLOAD_FORM"
  "AT_SOMEIP_TLV\020\004\022\027\n\023UPAYLOAD_FORMAT_RAW\020\005"
  "\022\030\n\024UPAYLOAD_FORMAT_TEXT\020\006B+\n\030org.eclips"
  "e.uprotocol.v1B\rUPayloadProtoP\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_upayload_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_upayload_2eproto = {
    false, false, 439, descriptor_table_protodef_upayload_2eproto,
    "upayload.proto",
    &descriptor_table_upayload_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_upayload_2eproto::offsets,
    file_level_metadata_upayload_2eproto, file_level_enum_descriptors_upayload_2eproto,
    file_level_service_descriptors_upayload_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_upayload_2eproto_getter() {
  return &descriptor_table_upayload_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_upayload_2eproto(&descriptor_table_upayload_2eproto);
namespace uprotocol {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UPayloadFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_upayload_2eproto);
  return file_level_enum_descriptors_upayload_2eproto[0];
}
bool UPayloadFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class UPayload::_Internal {
 public:
  using HasBits = decltype(std::declval<UPayload>()._impl_._has_bits_);
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UPayload::UPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:uprotocol.v1.UPayload)
}
UPayload::UPayload(const UPayload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UPayload* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.length_){}
    , decltype(_impl_.format_){}
    , decltype(_impl_.data_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.length_, &from._impl_.length_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.format_) -
    reinterpret_cast<char*>(&_impl_.length_)) + sizeof(_impl_.format_));
  clear_has_data();
  switch (from.data_case()) {
    case kReference: {
      _this->_internal_set_reference(from._internal_reference());
      break;
    }
    case kValue: {
      _this->_internal_set_value(from._internal_value());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:uprotocol.v1.UPayload)
}

inline void UPayload::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.length_){0}
    , decltype(_impl_.format_){0}
    , decltype(_impl_.data_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_data();
}

UPayload::~UPayload() {
  // @@protoc_insertion_point(destructor:uprotocol.v1.UPayload)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UPayload::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_data()) {
    clear_data();
  }
}

void UPayload::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UPayload::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:uprotocol.v1.UPayload)
  switch (data_case()) {
    case kReference: {
      // No need to clear
      break;
    }
    case kValue: {
      _impl_.data_.value_.Destroy();
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}


void UPayload::Clear() {
// @@protoc_insertion_point(message_clear_start:uprotocol.v1.UPayload)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.length_ = 0;
  _impl_.format_ = 0;
  clear_data();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UPayload::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // fixed64 reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _internal_set_reference(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_length(&has_bits);
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .uprotocol.v1.UPayloadFormat format = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_format(static_cast<::uprotocol::v1::UPayloadFormat>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UPayload::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uprotocol.v1.UPayload)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 reference = 1;
  if (_internal_has_reference()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_reference(), target);
  }

  // bytes value = 2;
  if (_internal_has_value()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  // optional int32 length = 3;
  if (_internal_has_length()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_length(), target);
  }

  // .uprotocol.v1.UPayloadFormat format = 4;
  if (this->_internal_format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_format(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uprotocol.v1.UPayload)
  return target;
}

size_t UPayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uprotocol.v1.UPayload)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 length = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_length());
  }

  // .uprotocol.v1.UPayloadFormat format = 4;
  if (this->_internal_format() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_format());
  }

  switch (data_case()) {
    // fixed64 reference = 1;
    case kReference: {
      total_size += 1 + 8;
      break;
    }
    // bytes value = 2;
    case kValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_value());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UPayload::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UPayload::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UPayload::GetClassData() const { return &_class_data_; }


void UPayload::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UPayload*>(&to_msg);
  auto& from = static_cast<const UPayload&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:uprotocol.v1.UPayload)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_length()) {
    _this->_internal_set_length(from._internal_length());
  }
  if (from._internal_format() != 0) {
    _this->_internal_set_format(from._internal_format());
  }
  switch (from.data_case()) {
    case kReference: {
      _this->_internal_set_reference(from._internal_reference());
      break;
    }
    case kValue: {
      _this->_internal_set_value(from._internal_value());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UPayload::CopyFrom(const UPayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uprotocol.v1.UPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UPayload::IsInitialized() const {
  return true;
}

void UPayload::InternalSwap(UPayload* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UPayload, _impl_.format_)
      + sizeof(UPayload::_impl_.format_)
      - PROTOBUF_FIELD_OFFSET(UPayload, _impl_.length_)>(
          reinterpret_cast<char*>(&_impl_.length_),
          reinterpret_cast<char*>(&other->_impl_.length_));
  swap(_impl_.data_, other->_impl_.data_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata UPayload::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_upayload_2eproto_getter, &descriptor_table_upayload_2eproto_once,
      file_level_metadata_upayload_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace uprotocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::uprotocol::v1::UPayload*
Arena::CreateMaybeMessage< ::uprotocol::v1::UPayload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uprotocol::v1::UPayload >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
