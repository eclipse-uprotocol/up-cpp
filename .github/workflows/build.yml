name: C++ Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        compiler: [clang-15, gcc-11]

    env:
      CC: ${{ matrix.compiler }}
      CXX: ${{ matrix.compiler }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Setup Compiler and Tools
      run: |
        if [ "${{ matrix.compiler }}" == "clang-15" ]; then
          sudo apt-get install -y clang-15 libclang-15-dev
        elif [ "${{ matrix.compiler }}" == "gcc-11" ]; then
          sudo apt-get install -y g++-11 gcc-11
        fi
        sudo apt-get install -y build-essential libbsd-dev make ninja-build pkg-config clang-format cmake gcc uuid uuid-dev openssl libssl-dev
        sudo apt-get install -y libgtest-dev rapidjson-dev cgreen1  libspdlog-dev libcgreen1-dev wget
    - name: Build lastest cmake version
      run: |
        wget -c https://github.com/Kitware/CMake/releases/download/v3.20.1/cmake-3.20.1.tar.gz
        tar xfvz cmake-3.20.1.tar.gz 
        cd cmake-3.20.1/
        ./bootstrap && make && sudo make install

    - name: Build protobuf
      run: |
        git clone --progress -b v3.21.12 https://github.com/protocolbuffers/protobuf
        mkdir -p build && cd build && cmake .. -DCMAKE_CXX_STANDARD=14 && cmake --build .. && make && sudo make install
    - name: Build C++ Application
      run: |
        git clone --progress -b v3.21.12 https://github.com/protocolbuffers/protobuf
        mkdir -p build & cd build && cmake ../cmake -DCMAKE_BUILD_TYPE=Release -Dprotobuf_BUILD_SHARED_LIBS=ON -Dprotobuf_BUILD_TESTS=OFF; sudo -E make -j4 install
        
    - name: Run Test Capture
      run: |
        cd build
        ctest --verbose
        lcov --directory . --capture --output-file coverage.info
        lcov --remove coverage.info '/usr/*' --output-file coverage.info
        lcov --list coverage.info
  
    - name: Check Code Coverage Threshold
      run: |
        COVERAGE_THRESHOLD=80
        COVERAGE_PERCENT=$(lcov --summary coverage.info | grep "lines......:" | awk '{print $3}')
        echo "Code coverage: $COVERAGE_PERCENT%"
        if [ $COVERAGE_PERCENT -lt $COVERAGE_THRESHOLD ]; then
          echo "Code coverage is below the threshold of $COVERAGE_THRESHOLD%"
          exit 1
        fi

